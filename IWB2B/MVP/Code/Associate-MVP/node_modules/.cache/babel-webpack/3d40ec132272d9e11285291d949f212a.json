{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Component, ViewEncapsulation, Input, Output, ViewChild, ContentChildren, Directive, HostListener, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { DomHandler } from 'primeng/dom';\nimport * as i2 from 'primeng/paginator';\nimport { PaginatorModule } from 'primeng/paginator';\nimport * as i1 from 'primeng/api';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { ObjectUtils } from 'primeng/utils';\nimport * as i5 from 'primeng/ripple';\nimport { RippleModule } from 'primeng/ripple';\nimport * as i4 from '@angular/cdk/scrolling';\nimport { CdkVirtualScrollViewport, ScrollingModule } from '@angular/cdk/scrolling';\nconst _c0 = [\"container\"];\nconst _c1 = [\"resizeHelper\"];\nconst _c2 = [\"reorderIndicatorUp\"];\nconst _c3 = [\"reorderIndicatorDown\"];\nconst _c4 = [\"table\"];\nconst _c5 = [\"scrollableView\"];\nconst _c6 = [\"scrollableFrozenView\"];\n\nfunction TreeTable_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵelementStart(1, \"div\", 13);\n    i0.ɵɵelement(2, \"i\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵclassMap(\"p-treetable-loading-icon pi-spin \" + ctx_r1.loadingIcon);\n  }\n}\n\nfunction TreeTable_div_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TreeTable_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtemplate(1, TreeTable_div_3_ng_container_1_Template, 1, 0, \"ng-container\", 15);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.captionTemplate);\n  }\n}\n\nfunction TreeTable_p_paginator_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"p-paginator\", 16);\n    i0.ɵɵlistener(\"onPageChange\", function TreeTable_p_paginator_4_Template_p_paginator_onPageChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.onPageChange($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"rows\", ctx_r3.rows)(\"first\", ctx_r3.first)(\"totalRecords\", ctx_r3.totalRecords)(\"pageLinkSize\", ctx_r3.pageLinks)(\"alwaysShow\", ctx_r3.alwaysShowPaginator)(\"rowsPerPageOptions\", ctx_r3.rowsPerPageOptions)(\"templateLeft\", ctx_r3.paginatorLeftTemplate)(\"templateRight\", ctx_r3.paginatorRightTemplate)(\"dropdownAppendTo\", ctx_r3.paginatorDropdownAppendTo)(\"currentPageReportTemplate\", ctx_r3.currentPageReportTemplate)(\"showFirstLastIcon\", ctx_r3.showFirstLastIcon)(\"dropdownItemTemplate\", ctx_r3.paginatorDropdownItemTemplate)(\"showCurrentPageReport\", ctx_r3.showCurrentPageReport)(\"showJumpToPageDropdown\", ctx_r3.showJumpToPageDropdown)(\"showPageLinks\", ctx_r3.showPageLinks);\n  }\n}\n\nfunction TreeTable_div_5_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TreeTable_div_5_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TreeTable_div_5_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c7 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nfunction TreeTable_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵelementStart(1, \"table\", 18, 19);\n    i0.ɵɵtemplate(3, TreeTable_div_5_ng_container_3_Template, 1, 0, \"ng-container\", 20);\n    i0.ɵɵelementStart(4, \"thead\", 21);\n    i0.ɵɵtemplate(5, TreeTable_div_5_ng_container_5_Template, 1, 0, \"ng-container\", 20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"tbody\", 22);\n    i0.ɵɵelementStart(7, \"tfoot\", 23);\n    i0.ɵɵtemplate(8, TreeTable_div_5_ng_container_8_Template, 1, 0, \"ng-container\", 20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r4.tableStyleClass)(\"ngStyle\", ctx_r4.tableStyle);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r4.colGroupTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(10, _c7, ctx_r4.columns));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r4.headerTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(12, _c7, ctx_r4.columns));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"pTreeTableBody\", ctx_r4.columns)(\"pTreeTableBodyTemplate\", ctx_r4.bodyTemplate);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r4.footerTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(14, _c7, ctx_r4.columns));\n  }\n}\n\nconst _c8 = function (a0) {\n  return {\n    width: a0\n  };\n};\n\nfunction TreeTable_div_6_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 28, 29);\n  }\n\n  if (rf & 2) {\n    const ctx_r18 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ttScrollableView\", ctx_r18.frozenColumns)(\"frozen\", true)(\"ngStyle\", i0.ɵɵpureFunction1(4, _c8, ctx_r18.frozenWidth))(\"scrollHeight\", ctx_r18.scrollHeight);\n  }\n}\n\nconst _c9 = function (a0, a1) {\n  return {\n    left: a0,\n    width: a1\n  };\n};\n\nfunction TreeTable_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 24);\n    i0.ɵɵtemplate(1, TreeTable_div_6_div_1_Template, 2, 6, \"div\", 25);\n    i0.ɵɵelement(2, \"div\", 26, 27);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.frozenColumns || ctx_r5.frozenBodyTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ttScrollableView\", ctx_r5.columns)(\"frozen\", false)(\"scrollHeight\", ctx_r5.scrollHeight)(\"ngStyle\", i0.ɵɵpureFunction2(5, _c9, ctx_r5.frozenWidth, \"calc(100% - \" + ctx_r5.frozenWidth + \")\"));\n  }\n}\n\nfunction TreeTable_p_paginator_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"p-paginator\", 30);\n    i0.ɵɵlistener(\"onPageChange\", function TreeTable_p_paginator_7_Template_p_paginator_onPageChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.onPageChange($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"rows\", ctx_r6.rows)(\"first\", ctx_r6.first)(\"totalRecords\", ctx_r6.totalRecords)(\"pageLinkSize\", ctx_r6.pageLinks)(\"alwaysShow\", ctx_r6.alwaysShowPaginator)(\"rowsPerPageOptions\", ctx_r6.rowsPerPageOptions)(\"templateLeft\", ctx_r6.paginatorLeftTemplate)(\"templateRight\", ctx_r6.paginatorRightTemplate)(\"dropdownAppendTo\", ctx_r6.paginatorDropdownAppendTo)(\"currentPageReportTemplate\", ctx_r6.currentPageReportTemplate)(\"showFirstLastIcon\", ctx_r6.showFirstLastIcon)(\"dropdownItemTemplate\", ctx_r6.paginatorDropdownItemTemplate)(\"showCurrentPageReport\", ctx_r6.showCurrentPageReport)(\"showJumpToPageDropdown\", ctx_r6.showJumpToPageDropdown)(\"showPageLinks\", ctx_r6.showPageLinks);\n  }\n}\n\nfunction TreeTable_div_8_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TreeTable_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 31);\n    i0.ɵɵtemplate(1, TreeTable_div_8_ng_container_1_Template, 1, 0, \"ng-container\", 15);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r7.summaryTemplate);\n  }\n}\n\nfunction TreeTable_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 32, 33);\n  }\n}\n\nfunction TreeTable_span_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 34, 35);\n  }\n}\n\nfunction TreeTable_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 36, 37);\n  }\n}\n\nconst _c10 = function (a1, a2, a3, a4, a5) {\n  return {\n    \"p-treetable p-component\": true,\n    \"p-treetable-hoverable-rows\": a1,\n    \"p-treetable-auto-layout\": a2,\n    \"p-treetable-resizable\": a3,\n    \"p-treetable-resizable-fit\": a4,\n    \"p-treetable-flex-scrollable\": a5\n  };\n};\n\nconst _c11 = [\"pTreeTableBody\", \"\"];\n\nfunction TTBody_ng_container_0_ng_template_1_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c12 = function (a0, a1, a2, a3) {\n  return {\n    $implicit: a0,\n    node: a1,\n    rowData: a2,\n    columns: a3\n  };\n};\n\nfunction TTBody_ng_container_0_ng_template_1_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TTBody_ng_container_0_ng_template_1_ng_container_0_ng_container_1_Template, 1, 0, \"ng-container\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const serializedNode_r4 = i0.ɵɵnextContext().$implicit;\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r6.template)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction4(2, _c12, serializedNode_r4, serializedNode_r4.node, serializedNode_r4.node.data, ctx_r6.columns));\n  }\n}\n\nfunction TTBody_ng_container_0_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TTBody_ng_container_0_ng_template_1_ng_container_0_Template, 2, 7, \"ng-container\", 0);\n  }\n\n  if (rf & 2) {\n    const serializedNode_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngIf\", serializedNode_r4.visible);\n  }\n}\n\nfunction TTBody_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TTBody_ng_container_0_ng_template_1_Template, 1, 1, \"ng-template\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.tt.serializedValue)(\"ngForTrackBy\", ctx_r0.tt.rowTrackBy);\n  }\n}\n\nfunction TTBody_ng_container_1_ng_template_1_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TTBody_ng_container_1_ng_template_1_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TTBody_ng_container_1_ng_template_1_ng_container_0_ng_container_1_Template, 1, 0, \"ng-container\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const serializedNode_r10 = i0.ɵɵnextContext().$implicit;\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r12.template)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction4(2, _c12, serializedNode_r10, serializedNode_r10.node, serializedNode_r10.node.data, ctx_r12.columns));\n  }\n}\n\nfunction TTBody_ng_container_1_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TTBody_ng_container_1_ng_template_1_ng_container_0_Template, 2, 7, \"ng-container\", 0);\n  }\n\n  if (rf & 2) {\n    const serializedNode_r10 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngIf\", serializedNode_r10.visible);\n  }\n}\n\nfunction TTBody_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TTBody_ng_container_1_ng_template_1_Template, 1, 1, \"ng-template\", 3);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"cdkVirtualForOf\", ctx_r1.tt.serializedValue)(\"cdkVirtualForTrackBy\", ctx_r1.tt.rowTrackBy)(\"cdkVirtualForTemplateCacheSize\", 0);\n  }\n}\n\nfunction TTBody_ng_container_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c13 = function (a0, a1) {\n  return {\n    $implicit: a0,\n    frozen: a1\n  };\n};\n\nfunction TTBody_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TTBody_ng_container_2_ng_container_1_Template, 1, 0, \"ng-container\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.tt.emptyMessageTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c13, ctx_r2.columns, ctx_r2.frozen));\n  }\n}\n\nconst _c14 = [\"scrollHeader\"];\nconst _c15 = [\"scrollHeaderBox\"];\nconst _c16 = [\"scrollBody\"];\nconst _c17 = [\"scrollTable\"];\nconst _c18 = [\"loadingTable\"];\nconst _c19 = [\"scrollFooter\"];\nconst _c20 = [\"scrollFooterBox\"];\nconst _c21 = [\"scrollableAligner\"];\nconst _c22 = [\"ttScrollableView\", \"\"];\n\nfunction TTScrollableView_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TTScrollableView_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TTScrollableView_ng_container_8_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TTScrollableView_ng_container_8_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 16, 17);\n  }\n}\n\nconst _c23 = function (a0, a1) {\n  return {\n    \"max-height\": a0,\n    \"overflow-y\": a1\n  };\n};\n\nfunction TTScrollableView_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 10, 11);\n    i0.ɵɵelementStart(3, \"table\", 12, 13);\n    i0.ɵɵtemplate(5, TTScrollableView_ng_container_8_ng_container_5_Template, 1, 0, \"ng-container\", 5);\n    i0.ɵɵelement(6, \"tbody\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, TTScrollableView_ng_container_8_div_7_Template, 2, 0, \"div\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction2(10, _c23, ctx_r4.tt.scrollHeight !== \"flex\" ? ctx_r4.scrollHeight : undefined, !ctx_r4.frozen && ctx_r4.tt.scrollHeight ? \"scroll\" : undefined));\n    i0.ɵɵadvance(2);\n    i0.ɵɵclassMap(ctx_r4.tt.tableStyleClass);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r4.tt.tableStyle);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r4.frozen ? ctx_r4.tt.frozenColGroupTemplate || ctx_r4.tt.colGroupTemplate : ctx_r4.tt.colGroupTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(13, _c7, ctx_r4.columns));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"pTreeTableBody\", ctx_r4.columns)(\"pTreeTableBodyTemplate\", ctx_r4.frozen ? ctx_r4.tt.frozenBodyTemplate || ctx_r4.tt.bodyTemplate : ctx_r4.tt.bodyTemplate)(\"frozen\", ctx_r4.frozen);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.frozen);\n  }\n}\n\nfunction TTScrollableView_ng_template_9_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TTScrollableView_ng_template_9_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 16, 17);\n  }\n}\n\nfunction TTScrollableView_ng_template_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"cdk-virtual-scroll-viewport\", 18);\n    i0.ɵɵelementStart(1, \"table\", 12, 13);\n    i0.ɵɵtemplate(3, TTScrollableView_ng_template_9_ng_container_3_Template, 1, 0, \"ng-container\", 5);\n    i0.ɵɵelement(4, \"tbody\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, TTScrollableView_ng_template_9_div_5_Template, 2, 0, \"div\", 15);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"height\", ctx_r6.tt.scrollHeight !== \"flex\" ? ctx_r6.scrollHeight : undefined);\n    i0.ɵɵproperty(\"itemSize\", ctx_r6.tt.virtualRowHeight)(\"minBufferPx\", ctx_r6.tt.minBufferPx)(\"maxBufferPx\", ctx_r6.tt.maxBufferPx);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMap(ctx_r6.tt.tableStyleClass);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r6.tt.tableStyle);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r6.frozen ? ctx_r6.tt.frozenColGroupTemplate || ctx_r6.tt.colGroupTemplate : ctx_r6.tt.colGroupTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(14, _c7, ctx_r6.columns));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"pTreeTableBody\", ctx_r6.columns)(\"pTreeTableBodyTemplate\", ctx_r6.frozen ? ctx_r6.tt.frozenBodyTemplate || ctx_r6.tt.bodyTemplate : ctx_r6.tt.bodyTemplate)(\"frozen\", ctx_r6.frozen);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.frozen);\n  }\n}\n\nfunction TTScrollableView_div_11_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TTScrollableView_div_11_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TTScrollableView_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19, 20);\n    i0.ɵɵelementStart(2, \"div\", 21, 22);\n    i0.ɵɵelementStart(4, \"table\", 23);\n    i0.ɵɵtemplate(5, TTScrollableView_div_11_ng_container_5_Template, 1, 0, \"ng-container\", 5);\n    i0.ɵɵelementStart(6, \"tfoot\", 24);\n    i0.ɵɵtemplate(7, TTScrollableView_div_11_ng_container_7_Template, 1, 0, \"ng-container\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngClass\", ctx_r7.tt.tableStyleClass)(\"ngStyle\", ctx_r7.tt.tableStyle);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r7.frozen ? ctx_r7.tt.frozenColGroupTemplate || ctx_r7.tt.colGroupTemplate : ctx_r7.tt.colGroupTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(6, _c7, ctx_r7.columns));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r7.frozen ? ctx_r7.tt.frozenFooterTemplate || ctx_r7.tt.footerTemplate : ctx_r7.tt.footerTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(8, _c7, ctx_r7.columns));\n  }\n}\n\nconst _c24 = function (a0, a1, a2) {\n  return {\n    \"pi-sort-amount-up-alt\": a0,\n    \"pi-sort-amount-down\": a1,\n    \"pi-sort-alt\": a2\n  };\n};\n\nconst _c25 = [\"box\"];\n\nconst _c26 = function (a1, a2, a3) {\n  return {\n    \"p-checkbox-box\": true,\n    \"p-highlight\": a1,\n    \"p-indeterminate\": a2,\n    \"p-disabled\": a3\n  };\n};\n\nconst _c27 = function (a0, a1) {\n  return {\n    \"pi-check\": a0,\n    \"pi-minus\": a1\n  };\n};\n\nconst _c28 = function (a1, a2) {\n  return {\n    \"p-checkbox-box\": true,\n    \"p-highlight\": a1,\n    \"p-disabled\": a2\n  };\n};\n\nconst _c29 = function (a0) {\n  return {\n    \"pi pi-check\": a0\n  };\n};\n\nfunction TreeTableCellEditor_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TreeTableCellEditor_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TreeTableCellEditor_ng_container_0_ng_container_1_Template, 1, 0, \"ng-container\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.inputTemplate);\n  }\n}\n\nfunction TreeTableCellEditor_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TreeTableCellEditor_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TreeTableCellEditor_ng_container_1_ng_container_1_Template, 1, 0, \"ng-container\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.outputTemplate);\n  }\n}\n\nclass TreeTableService {\n  constructor() {\n    this.sortSource = new Subject();\n    this.selectionSource = new Subject();\n    this.contextMenuSource = new Subject();\n    this.uiUpdateSource = new Subject();\n    this.totalRecordsSource = new Subject();\n    this.sortSource$ = this.sortSource.asObservable();\n    this.selectionSource$ = this.selectionSource.asObservable();\n    this.contextMenuSource$ = this.contextMenuSource.asObservable();\n    this.uiUpdateSource$ = this.uiUpdateSource.asObservable();\n    this.totalRecordsSource$ = this.totalRecordsSource.asObservable();\n  }\n\n  onSort(sortMeta) {\n    this.sortSource.next(sortMeta);\n  }\n\n  onSelectionChange() {\n    this.selectionSource.next();\n  }\n\n  onContextMenu(node) {\n    this.contextMenuSource.next(node);\n  }\n\n  onUIUpdate(value) {\n    this.uiUpdateSource.next(value);\n  }\n\n  onTotalRecordsChange(value) {\n    this.totalRecordsSource.next(value);\n  }\n\n}\n\nTreeTableService.ɵfac = function TreeTableService_Factory(t) {\n  return new (t || TreeTableService)();\n};\n\nTreeTableService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TreeTableService,\n  factory: TreeTableService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeTableService, [{\n    type: Injectable\n  }], null, null);\n})();\n\nclass TreeTable {\n  constructor(el, zone, tableService, filterService) {\n    this.el = el;\n    this.zone = zone;\n    this.tableService = tableService;\n    this.filterService = filterService;\n    this.lazy = false;\n    this.lazyLoadOnInit = true;\n    this.first = 0;\n    this.pageLinks = 5;\n    this.alwaysShowPaginator = true;\n    this.paginatorPosition = 'bottom';\n    this.currentPageReportTemplate = '{currentPage} of {totalPages}';\n    this.showFirstLastIcon = true;\n    this.showPageLinks = true;\n    this.defaultSortOrder = 1;\n    this.sortMode = 'single';\n    this.resetPageOnSort = true;\n    this.selectionChange = new EventEmitter();\n    this.contextMenuSelectionChange = new EventEmitter();\n    this.contextMenuSelectionMode = \"separate\";\n    this.compareSelectionBy = 'deepEquals';\n    this.loadingIcon = 'pi pi-spinner';\n    this.showLoader = true;\n    this.virtualScrollDelay = 150;\n    this.virtualRowHeight = 28;\n    this.columnResizeMode = 'fit';\n\n    this.rowTrackBy = (index, item) => item;\n\n    this.filters = {};\n    this.filterDelay = 300;\n    this.filterMode = 'lenient';\n    this.onFilter = new EventEmitter();\n    this.onNodeExpand = new EventEmitter();\n    this.onNodeCollapse = new EventEmitter();\n    this.onPage = new EventEmitter();\n    this.onSort = new EventEmitter();\n    this.onLazyLoad = new EventEmitter();\n    this.sortFunction = new EventEmitter();\n    this.onColResize = new EventEmitter();\n    this.onColReorder = new EventEmitter();\n    this.onNodeSelect = new EventEmitter();\n    this.onNodeUnselect = new EventEmitter();\n    this.onContextMenuSelect = new EventEmitter();\n    this.onHeaderCheckboxToggle = new EventEmitter();\n    this.onEditInit = new EventEmitter();\n    this.onEditComplete = new EventEmitter();\n    this.onEditCancel = new EventEmitter();\n    this._value = [];\n    this._totalRecords = 0;\n    this._sortOrder = 1;\n    this.selectionKeys = {};\n  }\n\n  ngOnInit() {\n    if (this.lazy && this.lazyLoadOnInit) {\n      this.onLazyLoad.emit(this.createLazyLoadMetadata());\n    }\n\n    this.initialized = true;\n  }\n\n  ngAfterContentInit() {\n    this.templates.forEach(item => {\n      switch (item.getType()) {\n        case 'caption':\n          this.captionTemplate = item.template;\n          break;\n\n        case 'header':\n          this.headerTemplate = item.template;\n          break;\n\n        case 'body':\n          this.bodyTemplate = item.template;\n          break;\n\n        case 'loadingbody':\n          this.loadingBodyTemplate = item.template;\n          break;\n\n        case 'footer':\n          this.footerTemplate = item.template;\n          break;\n\n        case 'summary':\n          this.summaryTemplate = item.template;\n          break;\n\n        case 'colgroup':\n          this.colGroupTemplate = item.template;\n          break;\n\n        case 'emptymessage':\n          this.emptyMessageTemplate = item.template;\n          break;\n\n        case 'paginatorleft':\n          this.paginatorLeftTemplate = item.template;\n          break;\n\n        case 'paginatorright':\n          this.paginatorRightTemplate = item.template;\n          break;\n\n        case 'paginatordropdownitem':\n          this.paginatorDropdownItemTemplate = item.template;\n          break;\n\n        case 'frozenheader':\n          this.frozenHeaderTemplate = item.template;\n          break;\n\n        case 'frozenbody':\n          this.frozenBodyTemplate = item.template;\n          break;\n\n        case 'frozenfooter':\n          this.frozenFooterTemplate = item.template;\n          break;\n\n        case 'frozencolgroup':\n          this.frozenColGroupTemplate = item.template;\n          break;\n      }\n    });\n  }\n\n  ngOnChanges(simpleChange) {\n    if (simpleChange.value) {\n      this._value = simpleChange.value.currentValue;\n\n      if (!this.lazy) {\n        this.totalRecords = this._value ? this._value.length : 0;\n        if (this.sortMode == 'single' && this.sortField) this.sortSingle();else if (this.sortMode == 'multiple' && this.multiSortMeta) this.sortMultiple();else if (this.hasFilter()) //sort already filters\n          this._filter();\n      }\n\n      this.updateSerializedValue();\n      this.tableService.onUIUpdate(this.value);\n    }\n\n    if (simpleChange.sortField) {\n      this._sortField = simpleChange.sortField.currentValue; //avoid triggering lazy load prior to lazy initialization at onInit\n\n      if (!this.lazy || this.initialized) {\n        if (this.sortMode === 'single') {\n          this.sortSingle();\n        }\n      }\n    }\n\n    if (simpleChange.sortOrder) {\n      this._sortOrder = simpleChange.sortOrder.currentValue; //avoid triggering lazy load prior to lazy initialization at onInit\n\n      if (!this.lazy || this.initialized) {\n        if (this.sortMode === 'single') {\n          this.sortSingle();\n        }\n      }\n    }\n\n    if (simpleChange.multiSortMeta) {\n      this._multiSortMeta = simpleChange.multiSortMeta.currentValue;\n\n      if (this.sortMode === 'multiple') {\n        this.sortMultiple();\n      }\n    }\n\n    if (simpleChange.selection) {\n      this._selection = simpleChange.selection.currentValue;\n\n      if (!this.preventSelectionSetterPropagation) {\n        this.updateSelectionKeys();\n        this.tableService.onSelectionChange();\n      }\n\n      this.preventSelectionSetterPropagation = false;\n    }\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  set value(val) {\n    this._value = val;\n  }\n\n  updateSerializedValue() {\n    this.serializedValue = [];\n    if (this.paginator) this.serializePageNodes();else this.serializeNodes(null, this.filteredNodes || this.value, 0, true);\n  }\n\n  serializeNodes(parent, nodes, level, visible) {\n    if (nodes && nodes.length) {\n      for (let node of nodes) {\n        node.parent = parent;\n        const rowNode = {\n          node: node,\n          parent: parent,\n          level: level,\n          visible: visible && (parent ? parent.expanded : true)\n        };\n        this.serializedValue.push(rowNode);\n\n        if (rowNode.visible && node.expanded) {\n          this.serializeNodes(node, node.children, level + 1, rowNode.visible);\n        }\n      }\n    }\n  }\n\n  serializePageNodes() {\n    let data = this.filteredNodes || this.value;\n    this.serializedValue = [];\n\n    if (data && data.length) {\n      const first = this.lazy ? 0 : this.first;\n\n      for (let i = first; i < first + this.rows; i++) {\n        let node = data[i];\n\n        if (node) {\n          this.serializedValue.push({\n            node: node,\n            parent: null,\n            level: 0,\n            visible: true\n          });\n          this.serializeNodes(node, node.children, 1, true);\n        }\n      }\n    }\n  }\n\n  get totalRecords() {\n    return this._totalRecords;\n  }\n\n  set totalRecords(val) {\n    this._totalRecords = val;\n    this.tableService.onTotalRecordsChange(this._totalRecords);\n  }\n\n  get sortField() {\n    return this._sortField;\n  }\n\n  set sortField(val) {\n    this._sortField = val;\n  }\n\n  get sortOrder() {\n    return this._sortOrder;\n  }\n\n  set sortOrder(val) {\n    this._sortOrder = val;\n  }\n\n  get multiSortMeta() {\n    return this._multiSortMeta;\n  }\n\n  set multiSortMeta(val) {\n    this._multiSortMeta = val;\n  }\n\n  get selection() {\n    return this._selection;\n  }\n\n  set selection(val) {\n    this._selection = val;\n  }\n\n  updateSelectionKeys() {\n    if (this.dataKey && this._selection) {\n      this.selectionKeys = {};\n\n      if (Array.isArray(this._selection)) {\n        for (let node of this._selection) {\n          this.selectionKeys[String(ObjectUtils.resolveFieldData(node.data, this.dataKey))] = 1;\n        }\n      } else {\n        this.selectionKeys[String(ObjectUtils.resolveFieldData(this._selection.data, this.dataKey))] = 1;\n      }\n    }\n  }\n\n  onPageChange(event) {\n    this.first = event.first;\n    this.rows = event.rows;\n    if (this.lazy) this.onLazyLoad.emit(this.createLazyLoadMetadata());else this.serializePageNodes();\n    this.onPage.emit({\n      first: this.first,\n      rows: this.rows\n    });\n    this.tableService.onUIUpdate(this.value);\n\n    if (this.scrollable) {\n      this.resetScrollTop();\n    }\n  }\n\n  sort(event) {\n    let originalEvent = event.originalEvent;\n\n    if (this.sortMode === 'single') {\n      this._sortOrder = this.sortField === event.field ? this.sortOrder * -1 : this.defaultSortOrder;\n      this._sortField = event.field;\n      this.sortSingle();\n\n      if (this.resetPageOnSort && this.scrollable) {\n        this.resetScrollTop();\n      }\n    }\n\n    if (this.sortMode === 'multiple') {\n      let metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n      let sortMeta = this.getSortMeta(event.field);\n\n      if (sortMeta) {\n        if (!metaKey) {\n          this._multiSortMeta = [{\n            field: event.field,\n            order: sortMeta.order * -1\n          }];\n\n          if (this.resetPageOnSort && this.scrollable) {\n            this.resetScrollTop();\n          }\n        } else {\n          sortMeta.order = sortMeta.order * -1;\n        }\n      } else {\n        if (!metaKey || !this.multiSortMeta) {\n          this._multiSortMeta = [];\n\n          if (this.resetPageOnSort && this.scrollable) {\n            this.resetScrollTop();\n          }\n        }\n\n        this.multiSortMeta.push({\n          field: event.field,\n          order: this.defaultSortOrder\n        });\n      }\n\n      this.sortMultiple();\n    }\n  }\n\n  sortSingle() {\n    if (this.sortField && this.sortOrder) {\n      if (this.lazy) {\n        this.onLazyLoad.emit(this.createLazyLoadMetadata());\n      } else if (this.value) {\n        this.sortNodes(this.value);\n\n        if (this.hasFilter()) {\n          this._filter();\n        }\n      }\n\n      let sortMeta = {\n        field: this.sortField,\n        order: this.sortOrder\n      };\n      this.onSort.emit(sortMeta);\n      this.tableService.onSort(sortMeta);\n      this.updateSerializedValue();\n    }\n  }\n\n  sortNodes(nodes) {\n    if (!nodes || nodes.length === 0) {\n      return;\n    }\n\n    if (this.customSort) {\n      this.sortFunction.emit({\n        data: nodes,\n        mode: this.sortMode,\n        field: this.sortField,\n        order: this.sortOrder\n      });\n    } else {\n      nodes.sort((node1, node2) => {\n        let value1 = ObjectUtils.resolveFieldData(node1.data, this.sortField);\n        let value2 = ObjectUtils.resolveFieldData(node2.data, this.sortField);\n        let result = null;\n        if (value1 == null && value2 != null) result = -1;else if (value1 != null && value2 == null) result = 1;else if (value1 == null && value2 == null) result = 0;else if (typeof value1 === 'string' && typeof value2 === 'string') result = value1.localeCompare(value2, undefined, {\n          numeric: true\n        });else result = value1 < value2 ? -1 : value1 > value2 ? 1 : 0;\n        return this.sortOrder * result;\n      });\n    }\n\n    for (let node of nodes) {\n      this.sortNodes(node.children);\n    }\n  }\n\n  sortMultiple() {\n    if (this.multiSortMeta) {\n      if (this.lazy) {\n        this.onLazyLoad.emit(this.createLazyLoadMetadata());\n      } else if (this.value) {\n        this.sortMultipleNodes(this.value);\n\n        if (this.hasFilter()) {\n          this._filter();\n        }\n      }\n\n      this.onSort.emit({\n        multisortmeta: this.multiSortMeta\n      });\n      this.updateSerializedValue();\n      this.tableService.onSort(this.multiSortMeta);\n    }\n  }\n\n  sortMultipleNodes(nodes) {\n    if (!nodes || nodes.length === 0) {\n      return;\n    }\n\n    if (this.customSort) {\n      this.sortFunction.emit({\n        data: this.value,\n        mode: this.sortMode,\n        multiSortMeta: this.multiSortMeta\n      });\n    } else {\n      nodes.sort((node1, node2) => {\n        return this.multisortField(node1, node2, this.multiSortMeta, 0);\n      });\n    }\n\n    for (let node of nodes) {\n      this.sortMultipleNodes(node.children);\n    }\n  }\n\n  multisortField(node1, node2, multiSortMeta, index) {\n    let value1 = ObjectUtils.resolveFieldData(node1.data, multiSortMeta[index].field);\n    let value2 = ObjectUtils.resolveFieldData(node2.data, multiSortMeta[index].field);\n    let result = null;\n    if (value1 == null && value2 != null) result = -1;else if (value1 != null && value2 == null) result = 1;else if (value1 == null && value2 == null) result = 0;\n\n    if (typeof value1 == 'string' || value1 instanceof String) {\n      if (value1.localeCompare && value1 != value2) {\n        return multiSortMeta[index].order * value1.localeCompare(value2, undefined, {\n          numeric: true\n        });\n      }\n    } else {\n      result = value1 < value2 ? -1 : 1;\n    }\n\n    if (value1 == value2) {\n      return multiSortMeta.length - 1 > index ? this.multisortField(node1, node2, multiSortMeta, index + 1) : 0;\n    }\n\n    return multiSortMeta[index].order * result;\n  }\n\n  getSortMeta(field) {\n    if (this.multiSortMeta && this.multiSortMeta.length) {\n      for (let i = 0; i < this.multiSortMeta.length; i++) {\n        if (this.multiSortMeta[i].field === field) {\n          return this.multiSortMeta[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  isSorted(field) {\n    if (this.sortMode === 'single') {\n      return this.sortField && this.sortField === field;\n    } else if (this.sortMode === 'multiple') {\n      let sorted = false;\n\n      if (this.multiSortMeta) {\n        for (let i = 0; i < this.multiSortMeta.length; i++) {\n          if (this.multiSortMeta[i].field == field) {\n            sorted = true;\n            break;\n          }\n        }\n      }\n\n      return sorted;\n    }\n  }\n\n  createLazyLoadMetadata() {\n    return {\n      first: this.first,\n      rows: this.rows,\n      sortField: this.sortField,\n      sortOrder: this.sortOrder,\n      filters: this.filters,\n      globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,\n      multiSortMeta: this.multiSortMeta\n    };\n  }\n\n  resetScrollTop() {\n    if (this.virtualScroll) this.scrollToVirtualIndex(0);else this.scrollTo({\n      top: 0\n    });\n  }\n\n  scrollToVirtualIndex(index) {\n    if (this.scrollableViewChild) {\n      this.scrollableViewChild.scrollToVirtualIndex(index);\n    }\n\n    if (this.scrollableFrozenViewChild) {\n      this.scrollableFrozenViewChild.scrollToVirtualIndex(index);\n    }\n  }\n\n  scrollTo(options) {\n    if (this.scrollableViewChild) {\n      this.scrollableViewChild.scrollTo(options);\n    }\n\n    if (this.scrollableFrozenViewChild) {\n      this.scrollableFrozenViewChild.scrollTo(options);\n    }\n  }\n\n  isEmpty() {\n    let data = this.filteredNodes || this.value;\n    return data == null || data.length == 0;\n  }\n\n  getBlockableElement() {\n    return this.el.nativeElement.children[0];\n  }\n\n  onColumnResizeBegin(event) {\n    let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n    this.lastResizerHelperX = event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft;\n    event.preventDefault();\n  }\n\n  onColumnResize(event) {\n    let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n    DomHandler.addClass(this.containerViewChild.nativeElement, 'p-unselectable-text');\n    this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild.nativeElement.offsetHeight + 'px';\n    this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\n    this.resizeHelperViewChild.nativeElement.style.left = event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft + 'px';\n    this.resizeHelperViewChild.nativeElement.style.display = 'block';\n  }\n\n  onColumnResizeEnd(event, column) {\n    let delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\n    let columnWidth = column.offsetWidth;\n    let newColumnWidth = columnWidth + delta;\n    let minWidth = column.style.minWidth || 15;\n\n    if (columnWidth + delta > parseInt(minWidth)) {\n      if (this.columnResizeMode === 'fit') {\n        let nextColumn = column.nextElementSibling;\n\n        while (!nextColumn.offsetParent) {\n          nextColumn = nextColumn.nextElementSibling;\n        }\n\n        if (nextColumn) {\n          let nextColumnWidth = nextColumn.offsetWidth - delta;\n          let nextColumnMinWidth = nextColumn.style.minWidth || 15;\n\n          if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\n            if (this.scrollable) {\n              let scrollableView = this.findParentScrollableView(column);\n              let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body table') || DomHandler.findSingle(scrollableView, '.p-treetable-virtual-scrollable-body table');\n              let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-header-table');\n              let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-footer-table');\n              let resizeColumnIndex = DomHandler.index(column);\n              this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n              this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n              this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n            } else {\n              column.style.width = newColumnWidth + 'px';\n\n              if (nextColumn) {\n                nextColumn.style.width = nextColumnWidth + 'px';\n              }\n            }\n          }\n        }\n      } else if (this.columnResizeMode === 'expand') {\n        if (this.scrollable) {\n          let scrollableView = this.findParentScrollableView(column);\n          let scrollableBody = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body') || DomHandler.findSingle(scrollableView, 'cdk-virtual-scroll-viewport');\n          let scrollableHeader = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-header');\n          let scrollableFooter = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-footer');\n          let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body table') || DomHandler.findSingle(scrollableView, 'cdk-virtual-scroll-viewport table');\n          let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-header-table');\n          let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-footer-table');\n          scrollableBodyTable.style.width = scrollableBodyTable.offsetWidth + delta + 'px';\n          scrollableHeaderTable.style.width = scrollableHeaderTable.offsetWidth + delta + 'px';\n\n          if (scrollableFooterTable) {\n            scrollableFooterTable.style.width = scrollableFooterTable.offsetWidth + delta + 'px';\n          }\n\n          let resizeColumnIndex = DomHandler.index(column);\n          const scrollableBodyTableWidth = column ? scrollableBodyTable.offsetWidth + delta : newColumnWidth;\n          const scrollableHeaderTableWidth = column ? scrollableHeaderTable.offsetWidth + delta : newColumnWidth;\n          const isContainerInViewport = this.containerViewChild.nativeElement.offsetWidth >= scrollableBodyTableWidth;\n\n          let setWidth = (container, table, width, isContainerInViewport) => {\n            if (container && table) {\n              container.style.width = isContainerInViewport ? width + DomHandler.calculateScrollbarWidth(scrollableBody) + 'px' : 'auto';\n              table.style.width = width + 'px';\n            }\n          };\n\n          setWidth(scrollableBody, scrollableBodyTable, scrollableBodyTableWidth, isContainerInViewport);\n          setWidth(scrollableHeader, scrollableHeaderTable, scrollableHeaderTableWidth, isContainerInViewport);\n          setWidth(scrollableFooter, scrollableFooterTable, scrollableHeaderTableWidth, isContainerInViewport);\n          this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\n          this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\n          this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\n        } else {\n          this.tableViewChild.nativeElement.style.width = this.tableViewChild.nativeElement.offsetWidth + delta + 'px';\n          column.style.width = newColumnWidth + 'px';\n          let containerWidth = this.tableViewChild.nativeElement.style.width;\n          this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\n        }\n      }\n\n      this.onColResize.emit({\n        element: column,\n        delta: delta\n      });\n    }\n\n    this.resizeHelperViewChild.nativeElement.style.display = 'none';\n    DomHandler.removeClass(this.containerViewChild.nativeElement, 'p-unselectable-text');\n  }\n\n  findParentScrollableView(column) {\n    if (column) {\n      let parent = column.parentElement;\n\n      while (parent && !DomHandler.hasClass(parent, 'p-treetable-scrollable-view')) {\n        parent = parent.parentElement;\n      }\n\n      return parent;\n    } else {\n      return null;\n    }\n  }\n\n  resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\n    if (table) {\n      let colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\n\n      if (colGroup) {\n        let col = colGroup.children[resizeColumnIndex];\n        let nextCol = col.nextElementSibling;\n        col.style.width = newColumnWidth + 'px';\n\n        if (nextCol && nextColumnWidth) {\n          nextCol.style.width = nextColumnWidth + 'px';\n        }\n      } else {\n        throw \"Scrollable tables require a colgroup to support resizable columns\";\n      }\n    }\n  }\n\n  onColumnDragStart(event, columnElement) {\n    this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild.nativeElement);\n    this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild.nativeElement);\n    this.draggedColumn = columnElement;\n    event.dataTransfer.setData('text', 'b'); // For firefox\n  }\n\n  onColumnDragEnter(event, dropHeader) {\n    if (this.reorderableColumns && this.draggedColumn && dropHeader) {\n      event.preventDefault();\n      let containerOffset = DomHandler.getOffset(this.containerViewChild.nativeElement);\n      let dropHeaderOffset = DomHandler.getOffset(dropHeader);\n\n      if (this.draggedColumn != dropHeader) {\n        let targetLeft = dropHeaderOffset.left - containerOffset.left;\n        let targetTop = containerOffset.top - dropHeaderOffset.top;\n        let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n        this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\n        this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n\n        if (event.pageX > columnCenter) {\n          this.reorderIndicatorUpViewChild.nativeElement.style.left = targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2) + 'px';\n          this.reorderIndicatorDownViewChild.nativeElement.style.left = targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2) + 'px';\n          this.dropPosition = 1;\n        } else {\n          this.reorderIndicatorUpViewChild.nativeElement.style.left = targetLeft - Math.ceil(this.reorderIconWidth / 2) + 'px';\n          this.reorderIndicatorDownViewChild.nativeElement.style.left = targetLeft - Math.ceil(this.reorderIconWidth / 2) + 'px';\n          this.dropPosition = -1;\n        }\n\n        this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\n        this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\n      } else {\n        event.dataTransfer.dropEffect = 'none';\n      }\n    }\n  }\n\n  onColumnDragLeave(event) {\n    if (this.reorderableColumns && this.draggedColumn) {\n      event.preventDefault();\n      this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n      this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n    }\n  }\n\n  onColumnDrop(event, dropColumn) {\n    event.preventDefault();\n\n    if (this.draggedColumn) {\n      let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'ttreorderablecolumn');\n      let dropIndex = DomHandler.indexWithinGroup(dropColumn, 'ttreorderablecolumn');\n      let allowDrop = dragIndex != dropIndex;\n\n      if (allowDrop && (dropIndex - dragIndex == 1 && this.dropPosition === -1 || dragIndex - dropIndex == 1 && this.dropPosition === 1)) {\n        allowDrop = false;\n      }\n\n      if (allowDrop && dropIndex < dragIndex && this.dropPosition === 1) {\n        dropIndex = dropIndex + 1;\n      }\n\n      if (allowDrop && dropIndex > dragIndex && this.dropPosition === -1) {\n        dropIndex = dropIndex - 1;\n      }\n\n      if (allowDrop) {\n        ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\n        this.onColReorder.emit({\n          dragIndex: dragIndex,\n          dropIndex: dropIndex,\n          columns: this.columns\n        });\n      }\n\n      this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n      this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n      this.draggedColumn.draggable = false;\n      this.draggedColumn = null;\n      this.dropPosition = null;\n    }\n  }\n\n  handleRowClick(event) {\n    let targetNode = event.originalEvent.target.nodeName;\n\n    if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' || DomHandler.hasClass(event.originalEvent.target, 'p-clickable')) {\n      return;\n    }\n\n    if (this.selectionMode) {\n      this.preventSelectionSetterPropagation = true;\n      let rowNode = event.rowNode;\n      let selected = this.isSelected(rowNode.node);\n      let metaSelection = this.rowTouched ? false : this.metaKeySelection;\n      let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowNode.node.data, this.dataKey)) : null;\n\n      if (metaSelection) {\n        let metaKey = event.originalEvent.metaKey || event.originalEvent.ctrlKey;\n\n        if (selected && metaKey) {\n          if (this.isSingleSelectionMode()) {\n            this._selection = null;\n            this.selectionKeys = {};\n            this.selectionChange.emit(null);\n          } else {\n            let selectionIndex = this.findIndexInSelection(rowNode.node);\n            this._selection = this.selection.filter((val, i) => i != selectionIndex);\n            this.selectionChange.emit(this.selection);\n\n            if (dataKeyValue) {\n              delete this.selectionKeys[dataKeyValue];\n            }\n          }\n\n          this.onNodeUnselect.emit({\n            originalEvent: event.originalEvent,\n            node: rowNode.node,\n            type: 'row'\n          });\n        } else {\n          if (this.isSingleSelectionMode()) {\n            this._selection = rowNode.node;\n            this.selectionChange.emit(rowNode.node);\n\n            if (dataKeyValue) {\n              this.selectionKeys = {};\n              this.selectionKeys[dataKeyValue] = 1;\n            }\n          } else if (this.isMultipleSelectionMode()) {\n            if (metaKey) {\n              this._selection = this.selection || [];\n            } else {\n              this._selection = [];\n              this.selectionKeys = {};\n            }\n\n            this._selection = [...this.selection, rowNode.node];\n            this.selectionChange.emit(this.selection);\n\n            if (dataKeyValue) {\n              this.selectionKeys[dataKeyValue] = 1;\n            }\n          }\n\n          this.onNodeSelect.emit({\n            originalEvent: event.originalEvent,\n            node: rowNode.node,\n            type: 'row',\n            index: event.rowIndex\n          });\n        }\n      } else {\n        if (this.selectionMode === 'single') {\n          if (selected) {\n            this._selection = null;\n            this.selectionKeys = {};\n            this.selectionChange.emit(this.selection);\n            this.onNodeUnselect.emit({\n              originalEvent: event.originalEvent,\n              node: rowNode.node,\n              type: 'row'\n            });\n          } else {\n            this._selection = rowNode.node;\n            this.selectionChange.emit(this.selection);\n            this.onNodeSelect.emit({\n              originalEvent: event.originalEvent,\n              node: rowNode.node,\n              type: 'row',\n              index: event.rowIndex\n            });\n\n            if (dataKeyValue) {\n              this.selectionKeys = {};\n              this.selectionKeys[dataKeyValue] = 1;\n            }\n          }\n        } else if (this.selectionMode === 'multiple') {\n          if (selected) {\n            let selectionIndex = this.findIndexInSelection(rowNode.node);\n            this._selection = this.selection.filter((val, i) => i != selectionIndex);\n            this.selectionChange.emit(this.selection);\n            this.onNodeUnselect.emit({\n              originalEvent: event.originalEvent,\n              node: rowNode.node,\n              type: 'row'\n            });\n\n            if (dataKeyValue) {\n              delete this.selectionKeys[dataKeyValue];\n            }\n          } else {\n            this._selection = this.selection ? [...this.selection, rowNode.node] : [rowNode.node];\n            this.selectionChange.emit(this.selection);\n            this.onNodeSelect.emit({\n              originalEvent: event.originalEvent,\n              node: rowNode.node,\n              type: 'row',\n              index: event.rowIndex\n            });\n\n            if (dataKeyValue) {\n              this.selectionKeys[dataKeyValue] = 1;\n            }\n          }\n        }\n      }\n\n      this.tableService.onSelectionChange();\n    }\n\n    this.rowTouched = false;\n  }\n\n  handleRowTouchEnd(event) {\n    this.rowTouched = true;\n  }\n\n  handleRowRightClick(event) {\n    if (this.contextMenu) {\n      const node = event.rowNode.node;\n\n      if (this.contextMenuSelectionMode === 'separate') {\n        this.contextMenuSelection = node;\n        this.contextMenuSelectionChange.emit(node);\n        this.onContextMenuSelect.emit({\n          originalEvent: event.originalEvent,\n          node: node\n        });\n        this.contextMenu.show(event.originalEvent);\n        this.tableService.onContextMenu(node);\n      } else if (this.contextMenuSelectionMode === 'joint') {\n        this.preventSelectionSetterPropagation = true;\n        let selected = this.isSelected(node);\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n\n        if (!selected) {\n          if (this.isSingleSelectionMode()) {\n            this.selection = node;\n            this.selectionChange.emit(node);\n          } else if (this.isMultipleSelectionMode()) {\n            this.selection = [node];\n            this.selectionChange.emit(this.selection);\n          }\n\n          if (dataKeyValue) {\n            this.selectionKeys[dataKeyValue] = 1;\n          }\n        }\n\n        this.contextMenu.show(event.originalEvent);\n        this.onContextMenuSelect.emit({\n          originalEvent: event.originalEvent,\n          node: node\n        });\n      }\n    }\n  }\n\n  toggleNodeWithCheckbox(event) {\n    this.selection = this.selection || [];\n    this.preventSelectionSetterPropagation = true;\n    let node = event.rowNode.node;\n    let selected = this.isSelected(node);\n\n    if (selected) {\n      this.propagateSelectionDown(node, false);\n\n      if (event.rowNode.parent) {\n        this.propagateSelectionUp(node.parent, false);\n      }\n\n      this.selectionChange.emit(this.selection);\n      this.onNodeUnselect.emit({\n        originalEvent: event,\n        node: node\n      });\n    } else {\n      this.propagateSelectionDown(node, true);\n\n      if (event.rowNode.parent) {\n        this.propagateSelectionUp(node.parent, true);\n      }\n\n      this.selectionChange.emit(this.selection);\n      this.onNodeSelect.emit({\n        originalEvent: event,\n        node: node\n      });\n    }\n\n    this.tableService.onSelectionChange();\n  }\n\n  toggleNodesWithCheckbox(event, check) {\n    let data = this.filteredNodes || this.value;\n    this._selection = check && data ? data.slice() : [];\n\n    if (check) {\n      if (data && data.length) {\n        for (let node of data) {\n          this.propagateSelectionDown(node, true);\n        }\n      }\n    } else {\n      this._selection = [];\n      this.selectionKeys = {};\n    }\n\n    this.preventSelectionSetterPropagation = true;\n    this.selectionChange.emit(this._selection);\n    this.tableService.onSelectionChange();\n    this.onHeaderCheckboxToggle.emit({\n      originalEvent: event,\n      checked: check\n    });\n  }\n\n  propagateSelectionUp(node, select) {\n    if (node.children && node.children.length) {\n      let selectedChildCount = 0;\n      let childPartialSelected = false;\n      let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n\n      for (let child of node.children) {\n        if (this.isSelected(child)) selectedChildCount++;else if (child.partialSelected) childPartialSelected = true;\n      }\n\n      if (select && selectedChildCount == node.children.length) {\n        this._selection = [...(this.selection || []), node];\n        node.partialSelected = false;\n\n        if (dataKeyValue) {\n          this.selectionKeys[dataKeyValue] = 1;\n        }\n      } else {\n        if (!select) {\n          let index = this.findIndexInSelection(node);\n\n          if (index >= 0) {\n            this._selection = this.selection.filter((val, i) => i != index);\n\n            if (dataKeyValue) {\n              delete this.selectionKeys[dataKeyValue];\n            }\n          }\n        }\n\n        if (childPartialSelected || selectedChildCount > 0 && selectedChildCount != node.children.length) node.partialSelected = true;else node.partialSelected = false;\n      }\n    }\n\n    let parent = node.parent;\n\n    if (parent) {\n      this.propagateSelectionUp(parent, select);\n    }\n  }\n\n  propagateSelectionDown(node, select) {\n    let index = this.findIndexInSelection(node);\n    let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n\n    if (select && index == -1) {\n      this._selection = [...(this.selection || []), node];\n\n      if (dataKeyValue) {\n        this.selectionKeys[dataKeyValue] = 1;\n      }\n    } else if (!select && index > -1) {\n      this._selection = this.selection.filter((val, i) => i != index);\n\n      if (dataKeyValue) {\n        delete this.selectionKeys[dataKeyValue];\n      }\n    }\n\n    node.partialSelected = false;\n\n    if (node.children && node.children.length) {\n      for (let child of node.children) {\n        this.propagateSelectionDown(child, select);\n      }\n    }\n  }\n\n  isSelected(node) {\n    if (node && this.selection) {\n      if (this.dataKey) {\n        return this.selectionKeys[ObjectUtils.resolveFieldData(node.data, this.dataKey)] !== undefined;\n      } else {\n        if (this.selection instanceof Array) return this.findIndexInSelection(node) > -1;else return this.equals(node, this.selection);\n      }\n    }\n\n    return false;\n  }\n\n  findIndexInSelection(node) {\n    let index = -1;\n\n    if (this.selection && this.selection.length) {\n      for (let i = 0; i < this.selection.length; i++) {\n        if (this.equals(node, this.selection[i])) {\n          index = i;\n          break;\n        }\n      }\n    }\n\n    return index;\n  }\n\n  isSingleSelectionMode() {\n    return this.selectionMode === 'single';\n  }\n\n  isMultipleSelectionMode() {\n    return this.selectionMode === 'multiple';\n  }\n\n  equals(node1, node2) {\n    return this.compareSelectionBy === 'equals' ? node1 === node2 : ObjectUtils.equals(node1.data, node2.data, this.dataKey);\n  }\n\n  filter(value, field, matchMode) {\n    if (this.filterTimeout) {\n      clearTimeout(this.filterTimeout);\n    }\n\n    if (!this.isFilterBlank(value)) {\n      this.filters[field] = {\n        value: value,\n        matchMode: matchMode\n      };\n    } else if (this.filters[field]) {\n      delete this.filters[field];\n    }\n\n    this.filterTimeout = setTimeout(() => {\n      this._filter();\n\n      this.filterTimeout = null;\n    }, this.filterDelay);\n  }\n\n  filterGlobal(value, matchMode) {\n    this.filter(value, 'global', matchMode);\n  }\n\n  isFilterBlank(filter) {\n    if (filter !== null && filter !== undefined) {\n      if (typeof filter === 'string' && filter.trim().length == 0 || filter instanceof Array && filter.length == 0) return true;else return false;\n    }\n\n    return true;\n  }\n\n  _filter() {\n    if (this.lazy) {\n      this.onLazyLoad.emit(this.createLazyLoadMetadata());\n    } else {\n      if (!this.value) {\n        return;\n      }\n\n      if (!this.hasFilter()) {\n        this.filteredNodes = null;\n\n        if (this.paginator) {\n          this.totalRecords = this.value ? this.value.length : 0;\n        }\n      } else {\n        let globalFilterFieldsArray;\n\n        if (this.filters['global']) {\n          if (!this.columns && !this.globalFilterFields) throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');else globalFilterFieldsArray = this.globalFilterFields || this.columns;\n        }\n\n        this.filteredNodes = [];\n        const isStrictMode = this.filterMode === 'strict';\n        let isValueChanged = false;\n\n        for (let node of this.value) {\n          let copyNode = Object.assign({}, node);\n          let localMatch = true;\n          let globalMatch = false;\n          let paramsWithoutNode;\n\n          for (let prop in this.filters) {\n            if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\n              let filterMeta = this.filters[prop];\n              let filterField = prop;\n              let filterValue = filterMeta.value;\n              let filterMatchMode = filterMeta.matchMode || 'startsWith';\n              let filterConstraint = this.filterService.filters[filterMatchMode];\n              paramsWithoutNode = {\n                filterField,\n                filterValue,\n                filterConstraint,\n                isStrictMode\n              };\n\n              if (isStrictMode && !(this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode)) || !isStrictMode && !(this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode))) {\n                localMatch = false;\n              }\n\n              if (!localMatch) {\n                break;\n              }\n            }\n          }\n\n          if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\n            for (let j = 0; j < globalFilterFieldsArray.length; j++) {\n              let copyNodeForGlobal = Object.assign({}, copyNode);\n              let filterField = globalFilterFieldsArray[j].field || globalFilterFieldsArray[j];\n              let filterValue = this.filters['global'].value;\n              let filterConstraint = this.filterService.filters[this.filters['global'].matchMode];\n              paramsWithoutNode = {\n                filterField,\n                filterValue,\n                filterConstraint,\n                isStrictMode\n              };\n\n              if (isStrictMode && (this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode) || this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode)) || !isStrictMode && (this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode) || this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode))) {\n                globalMatch = true;\n                copyNode = copyNodeForGlobal;\n              }\n            }\n          }\n\n          let matches = localMatch;\n\n          if (this.filters['global']) {\n            matches = localMatch && globalMatch;\n          }\n\n          if (matches) {\n            this.filteredNodes.push(copyNode);\n          }\n\n          isValueChanged = isValueChanged || !localMatch || globalMatch || localMatch && this.filteredNodes.length > 0 || !globalMatch && this.filteredNodes.length === 0;\n        }\n\n        if (!isValueChanged) {\n          this.filteredNodes = null;\n        }\n\n        if (this.paginator) {\n          this.totalRecords = this.filteredNodes ? this.filteredNodes.length : this.value ? this.value.length : 0;\n        }\n      }\n    }\n\n    this.first = 0;\n    const filteredValue = this.filteredNodes || this.value;\n    this.onFilter.emit({\n      filters: this.filters,\n      filteredValue: filteredValue\n    });\n    this.tableService.onUIUpdate(filteredValue);\n    this.updateSerializedValue();\n\n    if (this.scrollable) {\n      this.resetScrollTop();\n    }\n  }\n\n  findFilteredNodes(node, paramsWithoutNode) {\n    if (node) {\n      let matched = false;\n\n      if (node.children) {\n        let childNodes = [...node.children];\n        node.children = [];\n\n        for (let childNode of childNodes) {\n          let copyChildNode = Object.assign({}, childNode);\n\n          if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n            matched = true;\n            node.children.push(copyChildNode);\n          }\n        }\n      }\n\n      if (matched) {\n        return true;\n      }\n    }\n  }\n\n  isFilterMatched(node, {\n    filterField,\n    filterValue,\n    filterConstraint,\n    isStrictMode\n  }) {\n    let matched = false;\n    let dataFieldValue = ObjectUtils.resolveFieldData(node.data, filterField);\n\n    if (filterConstraint(dataFieldValue, filterValue, this.filterLocale)) {\n      matched = true;\n    }\n\n    if (!matched || isStrictMode && !this.isNodeLeaf(node)) {\n      matched = this.findFilteredNodes(node, {\n        filterField,\n        filterValue,\n        filterConstraint,\n        isStrictMode\n      }) || matched;\n    }\n\n    return matched;\n  }\n\n  isNodeLeaf(node) {\n    return node.leaf === false ? false : !(node.children && node.children.length);\n  }\n\n  hasFilter() {\n    let empty = true;\n\n    for (let prop in this.filters) {\n      if (this.filters.hasOwnProperty(prop)) {\n        empty = false;\n        break;\n      }\n    }\n\n    return !empty;\n  }\n\n  reset() {\n    this._sortField = null;\n    this._sortOrder = 1;\n    this._multiSortMeta = null;\n    this.tableService.onSort(null);\n    this.filteredNodes = null;\n    this.filters = {};\n    this.first = 0;\n\n    if (this.lazy) {\n      this.onLazyLoad.emit(this.createLazyLoadMetadata());\n    } else {\n      this.totalRecords = this._value ? this._value.length : 0;\n    }\n  }\n\n  updateEditingCell(cell, data, field) {\n    this.editingCell = cell;\n    this.editingCellData = data;\n    this.editingCellField = field;\n    this.bindDocumentEditListener();\n  }\n\n  isEditingCellValid() {\n    return this.editingCell && DomHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length === 0;\n  }\n\n  bindDocumentEditListener() {\n    if (!this.documentEditListener) {\n      this.documentEditListener = event => {\n        if (this.editingCell && !this.editingCellClick && this.isEditingCellValid()) {\n          DomHandler.removeClass(this.editingCell, 'p-cell-editing');\n          this.editingCell = null;\n          this.onEditComplete.emit({\n            field: this.editingCellField,\n            data: this.editingCellData\n          });\n          this.editingCellField = null;\n          this.editingCellData = null;\n          this.unbindDocumentEditListener();\n        }\n\n        this.editingCellClick = false;\n      };\n\n      document.addEventListener('click', this.documentEditListener);\n    }\n  }\n\n  unbindDocumentEditListener() {\n    if (this.documentEditListener) {\n      document.removeEventListener('click', this.documentEditListener);\n      this.documentEditListener = null;\n    }\n  }\n\n  ngOnDestroy() {\n    this.unbindDocumentEditListener();\n    this.editingCell = null;\n    this.editingCellField = null;\n    this.editingCellData = null;\n    this.initialized = null;\n  }\n\n}\n\nTreeTable.ɵfac = function TreeTable_Factory(t) {\n  return new (t || TreeTable)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(TreeTableService), i0.ɵɵdirectiveInject(i1.FilterService));\n};\n\nTreeTable.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TreeTable,\n  selectors: [[\"p-treeTable\"]],\n  contentQueries: function TreeTable_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n    }\n  },\n  viewQuery: function TreeTable_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n      i0.ɵɵviewQuery(_c1, 5);\n      i0.ɵɵviewQuery(_c2, 5);\n      i0.ɵɵviewQuery(_c3, 5);\n      i0.ɵɵviewQuery(_c4, 5);\n      i0.ɵɵviewQuery(_c5, 5);\n      i0.ɵɵviewQuery(_c6, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.resizeHelperViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.reorderIndicatorUpViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.reorderIndicatorDownViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollableViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollableFrozenViewChild = _t.first);\n    }\n  },\n  inputs: {\n    columns: \"columns\",\n    style: \"style\",\n    styleClass: \"styleClass\",\n    tableStyle: \"tableStyle\",\n    tableStyleClass: \"tableStyleClass\",\n    autoLayout: \"autoLayout\",\n    lazy: \"lazy\",\n    lazyLoadOnInit: \"lazyLoadOnInit\",\n    paginator: \"paginator\",\n    rows: \"rows\",\n    first: \"first\",\n    pageLinks: \"pageLinks\",\n    rowsPerPageOptions: \"rowsPerPageOptions\",\n    alwaysShowPaginator: \"alwaysShowPaginator\",\n    paginatorPosition: \"paginatorPosition\",\n    paginatorDropdownAppendTo: \"paginatorDropdownAppendTo\",\n    currentPageReportTemplate: \"currentPageReportTemplate\",\n    showCurrentPageReport: \"showCurrentPageReport\",\n    showJumpToPageDropdown: \"showJumpToPageDropdown\",\n    showFirstLastIcon: \"showFirstLastIcon\",\n    showPageLinks: \"showPageLinks\",\n    defaultSortOrder: \"defaultSortOrder\",\n    sortMode: \"sortMode\",\n    resetPageOnSort: \"resetPageOnSort\",\n    customSort: \"customSort\",\n    selectionMode: \"selectionMode\",\n    contextMenuSelection: \"contextMenuSelection\",\n    contextMenuSelectionMode: \"contextMenuSelectionMode\",\n    dataKey: \"dataKey\",\n    metaKeySelection: \"metaKeySelection\",\n    compareSelectionBy: \"compareSelectionBy\",\n    rowHover: \"rowHover\",\n    loading: \"loading\",\n    loadingIcon: \"loadingIcon\",\n    showLoader: \"showLoader\",\n    scrollable: \"scrollable\",\n    scrollHeight: \"scrollHeight\",\n    virtualScroll: \"virtualScroll\",\n    virtualScrollDelay: \"virtualScrollDelay\",\n    virtualRowHeight: \"virtualRowHeight\",\n    minBufferPx: \"minBufferPx\",\n    maxBufferPx: \"maxBufferPx\",\n    frozenWidth: \"frozenWidth\",\n    frozenColumns: \"frozenColumns\",\n    resizableColumns: \"resizableColumns\",\n    columnResizeMode: \"columnResizeMode\",\n    reorderableColumns: \"reorderableColumns\",\n    contextMenu: \"contextMenu\",\n    rowTrackBy: \"rowTrackBy\",\n    filters: \"filters\",\n    globalFilterFields: \"globalFilterFields\",\n    filterDelay: \"filterDelay\",\n    filterMode: \"filterMode\",\n    filterLocale: \"filterLocale\",\n    value: \"value\",\n    totalRecords: \"totalRecords\",\n    sortField: \"sortField\",\n    sortOrder: \"sortOrder\",\n    multiSortMeta: \"multiSortMeta\",\n    selection: \"selection\"\n  },\n  outputs: {\n    selectionChange: \"selectionChange\",\n    contextMenuSelectionChange: \"contextMenuSelectionChange\",\n    onFilter: \"onFilter\",\n    onNodeExpand: \"onNodeExpand\",\n    onNodeCollapse: \"onNodeCollapse\",\n    onPage: \"onPage\",\n    onSort: \"onSort\",\n    onLazyLoad: \"onLazyLoad\",\n    sortFunction: \"sortFunction\",\n    onColResize: \"onColResize\",\n    onColReorder: \"onColReorder\",\n    onNodeSelect: \"onNodeSelect\",\n    onNodeUnselect: \"onNodeUnselect\",\n    onContextMenuSelect: \"onContextMenuSelect\",\n    onHeaderCheckboxToggle: \"onHeaderCheckboxToggle\",\n    onEditInit: \"onEditInit\",\n    onEditComplete: \"onEditComplete\",\n    onEditCancel: \"onEditCancel\"\n  },\n  features: [i0.ɵɵProvidersFeature([TreeTableService]), i0.ɵɵNgOnChangesFeature],\n  decls: 12,\n  vars: 20,\n  consts: [[\"data-scrollselectors\", \".p-treetable-scrollable-body\", 3, \"ngStyle\", \"ngClass\"], [\"container\", \"\"], [\"class\", \"p-treetable-loading\", 4, \"ngIf\"], [\"class\", \"p-treetable-header\", 4, \"ngIf\"], [\"styleClass\", \"p-paginator-top\", 3, \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"templateLeft\", \"templateRight\", \"dropdownAppendTo\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showPageLinks\", \"onPageChange\", 4, \"ngIf\"], [\"class\", \"p-treetable-wrapper\", 4, \"ngIf\"], [\"class\", \"p-treetable-scrollable-wrapper\", 4, \"ngIf\"], [\"styleClass\", \"p-paginator-bottom\", 3, \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"templateLeft\", \"templateRight\", \"dropdownAppendTo\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showPageLinks\", \"onPageChange\", 4, \"ngIf\"], [\"class\", \"p-treetable-footer\", 4, \"ngIf\"], [\"class\", \"p-column-resizer-helper\", \"style\", \"display:none\", 4, \"ngIf\"], [\"class\", \"pi pi-arrow-down p-treetable-reorder-indicator-up\", 4, \"ngIf\"], [\"class\", \"pi pi-arrow-up p-treetable-reorder-indicator-down\", 4, \"ngIf\"], [1, \"p-treetable-loading\"], [1, \"p-treetable-loading-overlay\", \"p-component-overlay\"], [1, \"p-treetable-header\"], [4, \"ngTemplateOutlet\"], [\"styleClass\", \"p-paginator-top\", 3, \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"templateLeft\", \"templateRight\", \"dropdownAppendTo\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showPageLinks\", \"onPageChange\"], [1, \"p-treetable-wrapper\"], [3, \"ngClass\", \"ngStyle\"], [\"table\", \"\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"p-treetable-thead\"], [1, \"p-treetable-tbody\", 3, \"pTreeTableBody\", \"pTreeTableBodyTemplate\"], [1, \"p-treetable-tfoot\"], [1, \"p-treetable-scrollable-wrapper\"], [\"class\", \"p-treetable-scrollable-view p-treetable-frozen-view\", 3, \"ttScrollableView\", \"frozen\", \"ngStyle\", \"scrollHeight\", 4, \"ngIf\"], [1, \"p-treetable-scrollable-view\", 3, \"ttScrollableView\", \"frozen\", \"scrollHeight\", \"ngStyle\"], [\"scrollableView\", \"\"], [1, \"p-treetable-scrollable-view\", \"p-treetable-frozen-view\", 3, \"ttScrollableView\", \"frozen\", \"ngStyle\", \"scrollHeight\"], [\"scrollableFrozenView\", \"\"], [\"styleClass\", \"p-paginator-bottom\", 3, \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"templateLeft\", \"templateRight\", \"dropdownAppendTo\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showPageLinks\", \"onPageChange\"], [1, \"p-treetable-footer\"], [1, \"p-column-resizer-helper\", 2, \"display\", \"none\"], [\"resizeHelper\", \"\"], [1, \"pi\", \"pi-arrow-down\", \"p-treetable-reorder-indicator-up\"], [\"reorderIndicatorUp\", \"\"], [1, \"pi\", \"pi-arrow-up\", \"p-treetable-reorder-indicator-down\"], [\"reorderIndicatorDown\", \"\"]],\n  template: function TreeTable_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵtemplate(2, TreeTable_div_2_Template, 3, 2, \"div\", 2);\n      i0.ɵɵtemplate(3, TreeTable_div_3_Template, 2, 1, \"div\", 3);\n      i0.ɵɵtemplate(4, TreeTable_p_paginator_4_Template, 1, 15, \"p-paginator\", 4);\n      i0.ɵɵtemplate(5, TreeTable_div_5_Template, 9, 16, \"div\", 5);\n      i0.ɵɵtemplate(6, TreeTable_div_6_Template, 4, 8, \"div\", 6);\n      i0.ɵɵtemplate(7, TreeTable_p_paginator_7_Template, 1, 15, \"p-paginator\", 7);\n      i0.ɵɵtemplate(8, TreeTable_div_8_Template, 2, 1, \"div\", 8);\n      i0.ɵɵtemplate(9, TreeTable_div_9_Template, 2, 0, \"div\", 9);\n      i0.ɵɵtemplate(10, TreeTable_span_10_Template, 2, 0, \"span\", 10);\n      i0.ɵɵtemplate(11, TreeTable_span_11_Template, 2, 0, \"span\", 11);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.styleClass);\n      i0.ɵɵproperty(\"ngStyle\", ctx.style)(\"ngClass\", i0.ɵɵpureFunction5(14, _c10, ctx.rowHover || ctx.selectionMode === \"single\" || ctx.selectionMode === \"multiple\", ctx.autoLayout, ctx.resizableColumns, ctx.resizableColumns && ctx.columnResizeMode === \"fit\", ctx.scrollable && ctx.scrollHeight === \"flex\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.loading && ctx.showLoader);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.captionTemplate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.paginator && (ctx.paginatorPosition === \"top\" || ctx.paginatorPosition == \"both\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.scrollable);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.scrollable);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.paginator && (ctx.paginatorPosition === \"bottom\" || ctx.paginatorPosition == \"both\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.summaryTemplate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.resizableColumns);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.reorderableColumns);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.reorderableColumns);\n    }\n  },\n  directives: function () {\n    return [i3.NgStyle, i3.NgClass, i3.NgIf, i3.NgTemplateOutlet, i2.Paginator, TTBody, TTScrollableView];\n  },\n  styles: [\".p-treetable{position:relative}.p-treetable table{border-collapse:collapse;width:100%;table-layout:fixed}.p-treetable .p-sortable-column{cursor:pointer;-webkit-user-select:none;-ms-user-select:none;user-select:none}.p-treetable .p-sortable-column .p-column-title,.p-treetable .p-sortable-column .p-sortable-column-badge,.p-treetable .p-sortable-column .p-sortable-column-icon{vertical-align:middle}.p-treetable .p-sortable-column .p-sortable-column-badge{display:inline-flex;align-items:center;justify-content:center}.p-treetable-auto-layout>.p-treetable-wrapper{overflow-x:auto}.p-treetable-auto-layout>.p-treetable-wrapper>table{table-layout:auto}.p-treetable-hoverable-rows .p-treetable-tbody>tr{cursor:pointer}.p-treetable-toggler{cursor:pointer;-webkit-user-select:none;-ms-user-select:none;user-select:none;display:inline-flex;align-items:center;justify-content:center;overflow:hidden;position:relative}.p-treetable-toggler,p-treetabletoggler+p-treetablecheckbox+span,p-treetabletoggler+p-treetablecheckbox .p-checkbox{vertical-align:middle}.p-treetable-scrollable-wrapper{position:relative}.p-treetable-scrollable-footer,.p-treetable-scrollable-header{overflow:hidden}.p-treetable-scrollable-body{overflow:auto;position:relative}.p-treetable-scrollable-body>table>.p-treetable-tbody>tr:first-child>td{border-top:0}.p-treetable-virtual-table{position:absolute}.p-treetable-frozen-view .p-treetable-scrollable-body{overflow:hidden}.p-treetable-frozen-view>.p-treetable-scrollable-body>table>.p-treetable-tbody>tr>td:last-child{border-right:0}.p-treetable-unfrozen-view{position:absolute;top:0}.p-treetable-flex-scrollable,.p-treetable-flex-scrollable .p-treetable-scrollable-view,.p-treetable-flex-scrollable .p-treetable-scrollable-wrapper{display:flex;flex-direction:column;flex:1;height:100%}.p-treetable-flex-scrollable .p-treetable-scrollable-body{flex:1}.p-treetable-resizable>.p-treetable-wrapper{overflow-x:auto}.p-treetable-resizable .p-treetable-tbody>tr>td,.p-treetable-resizable .p-treetable-tfoot>tr>td,.p-treetable-resizable .p-treetable-thead>tr>th{overflow:hidden}.p-treetable-resizable .p-resizable-column{background-clip:padding-box;position:relative}.p-treetable-resizable-fit .p-resizable-column:last-child .p-column-resizer{display:none}.p-treetable .p-column-resizer{display:block;position:absolute!important;top:0;right:0;margin:0;width:.5rem;height:100%;padding:0;cursor:col-resize;border:1px solid transparent}.p-treetable .p-column-resizer-helper{width:1px;position:absolute;z-index:10;display:none}.p-treetable .p-row-editor-cancel,.p-treetable .p-row-editor-init,.p-treetable .p-row-editor-save,.p-treetable .p-row-toggler{display:inline-flex;align-items:center;justify-content:center;overflow:hidden;position:relative}.p-treetable-reorder-indicator-down,.p-treetable-reorder-indicator-up{position:absolute;display:none}[ttReorderableColumn]{cursor:move}.p-treetable .p-treetable-loading-overlay{position:absolute;display:flex;align-items:center;justify-content:center;z-index:2}\"],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeTable, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTable',\n      template: `\n        <div #container [ngStyle]=\"style\" [class]=\"styleClass\" data-scrollselectors=\".p-treetable-scrollable-body\"\n                [ngClass]=\"{'p-treetable p-component': true,\n                'p-treetable-hoverable-rows': (rowHover||(selectionMode === 'single' || selectionMode === 'multiple')),\n                'p-treetable-auto-layout': autoLayout,\n                'p-treetable-resizable': resizableColumns,\n                'p-treetable-resizable-fit': (resizableColumns && columnResizeMode === 'fit'),\n                'p-treetable-flex-scrollable': (scrollable && scrollHeight === 'flex')}\">\n            <div class=\"p-treetable-loading\" *ngIf=\"loading && showLoader\">\n                <div class=\"p-treetable-loading-overlay p-component-overlay\">\n                    <i [class]=\"'p-treetable-loading-icon pi-spin ' + loadingIcon\"></i>\n                </div>\n            </div>\n            <div *ngIf=\"captionTemplate\" class=\"p-treetable-header\">\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"p-paginator-top\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showFirstLastIcon]=\"showFirstLastIcon\" [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\" [showJumpToPageDropdown]=\"showJumpToPageDropdown\" [showPageLinks]=\"showPageLinks\"></p-paginator>\n\n            <div class=\"p-treetable-wrapper\" *ngIf=\"!scrollable\">\n                <table #table [ngClass]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container>\n                    </thead>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"bodyTemplate\"></tbody>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n\n            <div class=\"p-treetable-scrollable-wrapper\" *ngIf=\"scrollable\">\n               <div class=\"p-treetable-scrollable-view p-treetable-frozen-view\" *ngIf=\"frozenColumns||frozenBodyTemplate\" #scrollableFrozenView [ttScrollableView]=\"frozenColumns\" [frozen]=\"true\" [ngStyle]=\"{width: frozenWidth}\" [scrollHeight]=\"scrollHeight\"></div>\n               <div class=\"p-treetable-scrollable-view\" #scrollableView [ttScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\" [ngStyle]=\"{left: frozenWidth, width: 'calc(100% - '+frozenWidth+')'}\"></div>\n            </div>\n\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"p-paginator-bottom\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showFirstLastIcon]=\"showFirstLastIcon\" [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\" [showJumpToPageDropdown]=\"showJumpToPageDropdown\" [showPageLinks]=\"showPageLinks\"></p-paginator>\n            <div *ngIf=\"summaryTemplate\" class=\"p-treetable-footer\">\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n            </div>\n\n            <div #resizeHelper class=\"p-column-resizer-helper\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\n\n            <span #reorderIndicatorUp class=\"pi pi-arrow-down p-treetable-reorder-indicator-up\" *ngIf=\"reorderableColumns\"></span>\n            <span #reorderIndicatorDown class=\"pi pi-arrow-up p-treetable-reorder-indicator-down\" *ngIf=\"reorderableColumns\"></span>\n        </div>\n    `,\n      providers: [TreeTableService],\n      encapsulation: ViewEncapsulation.None,\n      styleUrls: ['./treetable.css']\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: TreeTableService\n    }, {\n      type: i1.FilterService\n    }];\n  }, {\n    columns: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }],\n    styleClass: [{\n      type: Input\n    }],\n    tableStyle: [{\n      type: Input\n    }],\n    tableStyleClass: [{\n      type: Input\n    }],\n    autoLayout: [{\n      type: Input\n    }],\n    lazy: [{\n      type: Input\n    }],\n    lazyLoadOnInit: [{\n      type: Input\n    }],\n    paginator: [{\n      type: Input\n    }],\n    rows: [{\n      type: Input\n    }],\n    first: [{\n      type: Input\n    }],\n    pageLinks: [{\n      type: Input\n    }],\n    rowsPerPageOptions: [{\n      type: Input\n    }],\n    alwaysShowPaginator: [{\n      type: Input\n    }],\n    paginatorPosition: [{\n      type: Input\n    }],\n    paginatorDropdownAppendTo: [{\n      type: Input\n    }],\n    currentPageReportTemplate: [{\n      type: Input\n    }],\n    showCurrentPageReport: [{\n      type: Input\n    }],\n    showJumpToPageDropdown: [{\n      type: Input\n    }],\n    showFirstLastIcon: [{\n      type: Input\n    }],\n    showPageLinks: [{\n      type: Input\n    }],\n    defaultSortOrder: [{\n      type: Input\n    }],\n    sortMode: [{\n      type: Input\n    }],\n    resetPageOnSort: [{\n      type: Input\n    }],\n    customSort: [{\n      type: Input\n    }],\n    selectionMode: [{\n      type: Input\n    }],\n    selectionChange: [{\n      type: Output\n    }],\n    contextMenuSelection: [{\n      type: Input\n    }],\n    contextMenuSelectionChange: [{\n      type: Output\n    }],\n    contextMenuSelectionMode: [{\n      type: Input\n    }],\n    dataKey: [{\n      type: Input\n    }],\n    metaKeySelection: [{\n      type: Input\n    }],\n    compareSelectionBy: [{\n      type: Input\n    }],\n    rowHover: [{\n      type: Input\n    }],\n    loading: [{\n      type: Input\n    }],\n    loadingIcon: [{\n      type: Input\n    }],\n    showLoader: [{\n      type: Input\n    }],\n    scrollable: [{\n      type: Input\n    }],\n    scrollHeight: [{\n      type: Input\n    }],\n    virtualScroll: [{\n      type: Input\n    }],\n    virtualScrollDelay: [{\n      type: Input\n    }],\n    virtualRowHeight: [{\n      type: Input\n    }],\n    minBufferPx: [{\n      type: Input\n    }],\n    maxBufferPx: [{\n      type: Input\n    }],\n    frozenWidth: [{\n      type: Input\n    }],\n    frozenColumns: [{\n      type: Input\n    }],\n    resizableColumns: [{\n      type: Input\n    }],\n    columnResizeMode: [{\n      type: Input\n    }],\n    reorderableColumns: [{\n      type: Input\n    }],\n    contextMenu: [{\n      type: Input\n    }],\n    rowTrackBy: [{\n      type: Input\n    }],\n    filters: [{\n      type: Input\n    }],\n    globalFilterFields: [{\n      type: Input\n    }],\n    filterDelay: [{\n      type: Input\n    }],\n    filterMode: [{\n      type: Input\n    }],\n    filterLocale: [{\n      type: Input\n    }],\n    onFilter: [{\n      type: Output\n    }],\n    onNodeExpand: [{\n      type: Output\n    }],\n    onNodeCollapse: [{\n      type: Output\n    }],\n    onPage: [{\n      type: Output\n    }],\n    onSort: [{\n      type: Output\n    }],\n    onLazyLoad: [{\n      type: Output\n    }],\n    sortFunction: [{\n      type: Output\n    }],\n    onColResize: [{\n      type: Output\n    }],\n    onColReorder: [{\n      type: Output\n    }],\n    onNodeSelect: [{\n      type: Output\n    }],\n    onNodeUnselect: [{\n      type: Output\n    }],\n    onContextMenuSelect: [{\n      type: Output\n    }],\n    onHeaderCheckboxToggle: [{\n      type: Output\n    }],\n    onEditInit: [{\n      type: Output\n    }],\n    onEditComplete: [{\n      type: Output\n    }],\n    onEditCancel: [{\n      type: Output\n    }],\n    containerViewChild: [{\n      type: ViewChild,\n      args: ['container']\n    }],\n    resizeHelperViewChild: [{\n      type: ViewChild,\n      args: ['resizeHelper']\n    }],\n    reorderIndicatorUpViewChild: [{\n      type: ViewChild,\n      args: ['reorderIndicatorUp']\n    }],\n    reorderIndicatorDownViewChild: [{\n      type: ViewChild,\n      args: ['reorderIndicatorDown']\n    }],\n    tableViewChild: [{\n      type: ViewChild,\n      args: ['table']\n    }],\n    scrollableViewChild: [{\n      type: ViewChild,\n      args: ['scrollableView']\n    }],\n    scrollableFrozenViewChild: [{\n      type: ViewChild,\n      args: ['scrollableFrozenView']\n    }],\n    templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }],\n    value: [{\n      type: Input\n    }],\n    totalRecords: [{\n      type: Input\n    }],\n    sortField: [{\n      type: Input\n    }],\n    sortOrder: [{\n      type: Input\n    }],\n    multiSortMeta: [{\n      type: Input\n    }],\n    selection: [{\n      type: Input\n    }]\n  });\n})();\n\nclass TTBody {\n  constructor(tt, treeTableService, cd) {\n    this.tt = tt;\n    this.treeTableService = treeTableService;\n    this.cd = cd;\n    this.subscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n      if (this.tt.virtualScroll) {\n        this.cd.detectChanges();\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n}\n\nTTBody.ɵfac = function TTBody_Factory(t) {\n  return new (t || TTBody)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nTTBody.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TTBody,\n  selectors: [[\"\", \"pTreeTableBody\", \"\"]],\n  inputs: {\n    columns: [\"pTreeTableBody\", \"columns\"],\n    template: [\"pTreeTableBodyTemplate\", \"template\"],\n    frozen: \"frozen\"\n  },\n  attrs: _c11,\n  decls: 3,\n  vars: 3,\n  consts: [[4, \"ngIf\"], [\"ngFor\", \"\", 3, \"ngForOf\", \"ngForTrackBy\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"cdkVirtualFor\", \"\", 3, \"cdkVirtualForOf\", \"cdkVirtualForTrackBy\", \"cdkVirtualForTemplateCacheSize\"]],\n  template: function TTBody_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, TTBody_ng_container_0_Template, 2, 2, \"ng-container\", 0);\n      i0.ɵɵtemplate(1, TTBody_ng_container_1_Template, 2, 3, \"ng-container\", 0);\n      i0.ɵɵtemplate(2, TTBody_ng_container_2_Template, 2, 5, \"ng-container\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", !ctx.tt.virtualScroll);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.tt.virtualScroll);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.tt.isEmpty());\n    }\n  },\n  directives: [i3.NgIf, i3.NgForOf, i3.NgTemplateOutlet, i4.CdkVirtualForOf],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTBody, [{\n    type: Component,\n    args: [{\n      selector: '[pTreeTableBody]',\n      template: `\n        <ng-container *ngIf=\"!tt.virtualScroll\">\n            <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"tt.serializedValue\" [ngForTrackBy]=\"tt.rowTrackBy\">\n                <ng-container *ngIf=\"serializedNode.visible\">\n                    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\"></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"tt.virtualScroll\">\n            <ng-template cdkVirtualFor let-serializedNode let-rowIndex=\"index\" [cdkVirtualForOf]=\"tt.serializedValue\" [cdkVirtualForTrackBy]=\"tt.rowTrackBy\" [cdkVirtualForTemplateCacheSize]=\"0\">\n                <ng-container *ngIf=\"serializedNode.visible\">\n                    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\"></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"tt.isEmpty()\">\n            <ng-container *ngTemplateOutlet=\"tt.emptyMessageTemplate; context: {$implicit: columns, frozen: frozen}\"></ng-container>\n        </ng-container>\n    `,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    columns: [{\n      type: Input,\n      args: [\"pTreeTableBody\"]\n    }],\n    template: [{\n      type: Input,\n      args: [\"pTreeTableBodyTemplate\"]\n    }],\n    frozen: [{\n      type: Input\n    }]\n  });\n})();\n\nclass TTScrollableView {\n  constructor(tt, el, zone) {\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n\n  get scrollHeight() {\n    return this._scrollHeight;\n  }\n\n  set scrollHeight(val) {\n    this._scrollHeight = val;\n\n    if (val != null && (val.includes('%') || val.includes('calc'))) {\n      console.log('Percentage scroll height calculation is removed in favor of the more performant CSS based flex mode, use scrollHeight=\"flex\" instead.');\n    }\n\n    if (this.tt.virtualScroll && this.virtualScrollBody) {\n      this.virtualScrollBody.ngOnInit();\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this.frozen) {\n      if (this.tt.frozenColumns || this.tt.frozenBodyTemplate) {\n        DomHandler.addClass(this.el.nativeElement, 'p-treetable-unfrozen-view');\n      }\n\n      let frozenView = this.el.nativeElement.previousElementSibling;\n\n      if (frozenView) {\n        if (this.tt.virtualScroll) this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-treetable-virtual-scrollable-body');else this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-treetable-scrollable-body');\n      }\n\n      let scrollBarWidth = DomHandler.calculateScrollbarWidth();\n      this.scrollHeaderBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n\n      if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\n        this.scrollFooterBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n      }\n    } else {\n      if (this.scrollableAlignerViewChild && this.scrollableAlignerViewChild.nativeElement) {\n        this.scrollableAlignerViewChild.nativeElement.style.height = DomHandler.calculateScrollbarHeight() + 'px';\n      }\n    }\n\n    this.bindEvents();\n  }\n\n  bindEvents() {\n    this.zone.runOutsideAngular(() => {\n      if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n        this.headerScrollListener = this.onHeaderScroll.bind(this);\n        this.scrollHeaderBoxViewChild.nativeElement.addEventListener('scroll', this.headerScrollListener);\n      }\n\n      if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n        this.footerScrollListener = this.onFooterScroll.bind(this);\n        this.scrollFooterViewChild.nativeElement.addEventListener('scroll', this.footerScrollListener);\n      }\n\n      if (!this.frozen) {\n        this.bodyScrollListener = this.onBodyScroll.bind(this);\n        if (this.tt.virtualScroll) this.virtualScrollBody.getElementRef().nativeElement.addEventListener('scroll', this.bodyScrollListener);else this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);\n      }\n    });\n  }\n\n  unbindEvents() {\n    if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n      this.scrollHeaderBoxViewChild.nativeElement.removeEventListener('scroll', this.headerScrollListener);\n    }\n\n    if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n      this.scrollFooterViewChild.nativeElement.removeEventListener('scroll', this.footerScrollListener);\n    }\n\n    if (this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\n      this.scrollBodyViewChild.nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n    }\n\n    if (this.virtualScrollBody && this.virtualScrollBody.getElementRef()) {\n      this.virtualScrollBody.getElementRef().nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n    }\n  }\n\n  onHeaderScroll() {\n    const scrollLeft = this.scrollHeaderViewChild.nativeElement.scrollLeft;\n    this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n\n    if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n      this.scrollFooterViewChild.nativeElement.scrollLeft = scrollLeft;\n    }\n\n    this.preventBodyScrollPropagation = true;\n  }\n\n  onFooterScroll() {\n    const scrollLeft = this.scrollFooterViewChild.nativeElement.scrollLeft;\n    this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n\n    if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n      this.scrollHeaderViewChild.nativeElement.scrollLeft = scrollLeft;\n    }\n\n    this.preventBodyScrollPropagation = true;\n  }\n\n  onBodyScroll(event) {\n    if (this.preventBodyScrollPropagation) {\n      this.preventBodyScrollPropagation = false;\n      return;\n    }\n\n    if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n      this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n    }\n\n    if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n      this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n    }\n\n    if (this.frozenSiblingBody) {\n      this.frozenSiblingBody.scrollTop = event.target.scrollTop;\n    }\n  }\n\n  scrollToVirtualIndex(index) {\n    if (this.virtualScrollBody) {\n      this.virtualScrollBody.scrollToIndex(index);\n    }\n  }\n\n  scrollTo(options) {\n    if (this.virtualScrollBody) {\n      this.virtualScrollBody.scrollTo(options);\n    } else {\n      if (this.scrollBodyViewChild.nativeElement.scrollTo) {\n        this.scrollBodyViewChild.nativeElement.scrollTo(options);\n      } else {\n        this.scrollBodyViewChild.nativeElement.scrollLeft = options.left;\n        this.scrollBodyViewChild.nativeElement.scrollTop = options.top;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.unbindEvents();\n    this.frozenSiblingBody = null;\n  }\n\n}\n\nTTScrollableView.ɵfac = function TTScrollableView_Factory(t) {\n  return new (t || TTScrollableView)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nTTScrollableView.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TTScrollableView,\n  selectors: [[\"\", \"ttScrollableView\", \"\"]],\n  viewQuery: function TTScrollableView_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c14, 5);\n      i0.ɵɵviewQuery(_c15, 5);\n      i0.ɵɵviewQuery(_c16, 5);\n      i0.ɵɵviewQuery(_c17, 5);\n      i0.ɵɵviewQuery(_c18, 5);\n      i0.ɵɵviewQuery(_c19, 5);\n      i0.ɵɵviewQuery(_c20, 5);\n      i0.ɵɵviewQuery(_c21, 5);\n      i0.ɵɵviewQuery(CdkVirtualScrollViewport, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollHeaderViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollHeaderBoxViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollBodyViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollTableViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollLoadingTableViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollFooterViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollFooterBoxViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollableAlignerViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.virtualScrollBody = _t.first);\n    }\n  },\n  inputs: {\n    columns: [\"ttScrollableView\", \"columns\"],\n    frozen: \"frozen\",\n    scrollHeight: \"scrollHeight\"\n  },\n  attrs: _c22,\n  decls: 12,\n  vars: 13,\n  consts: [[1, \"p-treetable-scrollable-header\"], [\"scrollHeader\", \"\"], [1, \"p-treetable-scrollable-header-box\"], [\"scrollHeaderBox\", \"\"], [1, \"p-treetable-scrollable-header-table\", 3, \"ngClass\", \"ngStyle\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"p-treetable-thead\"], [4, \"ngIf\", \"ngIfElse\"], [\"virtualScrollTemplate\", \"\"], [\"class\", \"p-treetable-scrollable-footer\", 4, \"ngIf\"], [1, \"p-treetable-scrollable-body\", 3, \"ngStyle\"], [\"scrollBody\", \"\"], [3, \"ngStyle\"], [\"scrollTable\", \"\"], [1, \"p-treetable-tbody\", 3, \"pTreeTableBody\", \"pTreeTableBodyTemplate\", \"frozen\"], [\"style\", \"background-color:transparent\", 4, \"ngIf\"], [2, \"background-color\", \"transparent\"], [\"scrollableAligner\", \"\"], [1, \"p-treetable-virtual-scrollable-body\", 3, \"itemSize\", \"minBufferPx\", \"maxBufferPx\"], [1, \"p-treetable-scrollable-footer\"], [\"scrollFooter\", \"\"], [1, \"p-treetable-scrollable-footer-box\"], [\"scrollFooterBox\", \"\"], [1, \"p-treetable-scrollable-footer-table\", 3, \"ngClass\", \"ngStyle\"], [1, \"p-treetable-tfoot\"]],\n  template: function TTScrollableView_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵelementStart(2, \"div\", 2, 3);\n      i0.ɵɵelementStart(4, \"table\", 4);\n      i0.ɵɵtemplate(5, TTScrollableView_ng_container_5_Template, 1, 0, \"ng-container\", 5);\n      i0.ɵɵelementStart(6, \"thead\", 6);\n      i0.ɵɵtemplate(7, TTScrollableView_ng_container_7_Template, 1, 0, \"ng-container\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(8, TTScrollableView_ng_container_8_Template, 8, 15, \"ng-container\", 7);\n      i0.ɵɵtemplate(9, TTScrollableView_ng_template_9_Template, 6, 16, \"ng-template\", null, 8, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵtemplate(11, TTScrollableView_div_11_Template, 8, 10, \"div\", 9);\n    }\n\n    if (rf & 2) {\n      const _r5 = i0.ɵɵreference(10);\n\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngClass\", ctx.tt.tableStyleClass)(\"ngStyle\", ctx.tt.tableStyle);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.frozen ? ctx.tt.frozenColGroupTemplate || ctx.tt.colGroupTemplate : ctx.tt.colGroupTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(9, _c7, ctx.columns));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.frozen ? ctx.tt.frozenHeaderTemplate || ctx.tt.headerTemplate : ctx.tt.headerTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(11, _c7, ctx.columns));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.tt.virtualScroll)(\"ngIfElse\", _r5);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.tt.footerTemplate);\n    }\n  },\n  directives: [i3.NgClass, i3.NgStyle, i3.NgTemplateOutlet, i3.NgIf, TTBody, i4.CdkVirtualScrollViewport, i4.CdkFixedSizeVirtualScroll],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTScrollableView, [{\n    type: Component,\n    args: [{\n      selector: '[ttScrollableView]',\n      template: `\n        <div #scrollHeader class=\"p-treetable-scrollable-header\">\n            <div #scrollHeaderBox class=\"p-treetable-scrollable-header-box\">\n                <table class=\"p-treetable-scrollable-header-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenHeaderTemplate||tt.headerTemplate : tt.headerTemplate; context {$implicit: columns}\"></ng-container>\n                    </thead>\n                </table>\n            </div>\n        </div>\n        <ng-container *ngIf=\"!tt.virtualScroll; else virtualScrollTemplate\">\n            <div #scrollBody class=\"p-treetable-scrollable-body\" [ngStyle]=\"{'max-height': tt.scrollHeight !== 'flex' ? scrollHeight : undefined, 'overflow-y': !frozen && tt.scrollHeight ? 'scroll' : undefined}\">\n                <table #scrollTable [class]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </div>\n        </ng-container>\n        <ng-template #virtualScrollTemplate>\n            <cdk-virtual-scroll-viewport [itemSize]=\"tt.virtualRowHeight\" [style.height]=\"tt.scrollHeight !== 'flex' ? scrollHeight : undefined\"\n                    [minBufferPx]=\"tt.minBufferPx\" [maxBufferPx]=\"tt.maxBufferPx\" class=\"p-treetable-virtual-scrollable-body\">\n                <table #scrollTable [class]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </cdk-virtual-scroll-viewport>\n        </ng-template>\n        <div #scrollFooter *ngIf=\"tt.footerTemplate\" class=\"p-treetable-scrollable-footer\">\n            <div #scrollFooterBox class=\"p-treetable-scrollable-footer-box\">\n                <table class=\"p-treetable-scrollable-footer-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenFooterTemplate||tt.footerTemplate : tt.footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    `,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    columns: [{\n      type: Input,\n      args: [\"ttScrollableView\"]\n    }],\n    frozen: [{\n      type: Input\n    }],\n    scrollHeaderViewChild: [{\n      type: ViewChild,\n      args: ['scrollHeader']\n    }],\n    scrollHeaderBoxViewChild: [{\n      type: ViewChild,\n      args: ['scrollHeaderBox']\n    }],\n    scrollBodyViewChild: [{\n      type: ViewChild,\n      args: ['scrollBody']\n    }],\n    scrollTableViewChild: [{\n      type: ViewChild,\n      args: ['scrollTable']\n    }],\n    scrollLoadingTableViewChild: [{\n      type: ViewChild,\n      args: ['loadingTable']\n    }],\n    scrollFooterViewChild: [{\n      type: ViewChild,\n      args: ['scrollFooter']\n    }],\n    scrollFooterBoxViewChild: [{\n      type: ViewChild,\n      args: ['scrollFooterBox']\n    }],\n    scrollableAlignerViewChild: [{\n      type: ViewChild,\n      args: ['scrollableAligner']\n    }],\n    virtualScrollBody: [{\n      type: ViewChild,\n      args: [CdkVirtualScrollViewport]\n    }],\n    scrollHeight: [{\n      type: Input\n    }]\n  });\n})();\n\nclass TTSortableColumn {\n  constructor(tt) {\n    this.tt = tt;\n\n    if (this.isEnabled()) {\n      this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\n        this.updateSortState();\n      });\n    }\n  }\n\n  ngOnInit() {\n    if (this.isEnabled()) {\n      this.updateSortState();\n    }\n  }\n\n  updateSortState() {\n    this.sorted = this.tt.isSorted(this.field);\n  }\n\n  onClick(event) {\n    if (this.isEnabled()) {\n      this.updateSortState();\n      this.tt.sort({\n        originalEvent: event,\n        field: this.field\n      });\n      DomHandler.clearSelection();\n    }\n  }\n\n  onEnterKey(event) {\n    this.onClick(event);\n  }\n\n  isEnabled() {\n    return this.ttSortableColumnDisabled !== true;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n}\n\nTTSortableColumn.ɵfac = function TTSortableColumn_Factory(t) {\n  return new (t || TTSortableColumn)(i0.ɵɵdirectiveInject(TreeTable));\n};\n\nTTSortableColumn.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TTSortableColumn,\n  selectors: [[\"\", \"ttSortableColumn\", \"\"]],\n  hostVars: 6,\n  hostBindings: function TTSortableColumn_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function TTSortableColumn_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      })(\"keydown.enter\", function TTSortableColumn_keydown_enter_HostBindingHandler($event) {\n        return ctx.onEnterKey($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"tabindex\", ctx.isEnabled() ? \"0\" : null)(\"role\", \"columnheader\");\n      i0.ɵɵclassProp(\"p-sortable-column\", ctx.isEnabled())(\"p-highlight\", ctx.sorted);\n    }\n  },\n  inputs: {\n    field: [\"ttSortableColumn\", \"field\"],\n    ttSortableColumnDisabled: \"ttSortableColumnDisabled\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTSortableColumn, [{\n    type: Directive,\n    args: [{\n      selector: '[ttSortableColumn]',\n      host: {\n        '[class.p-sortable-column]': 'isEnabled()',\n        '[class.p-highlight]': 'sorted',\n        '[attr.tabindex]': 'isEnabled() ? \"0\" : null',\n        '[attr.role]': '\"columnheader\"'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }];\n  }, {\n    field: [{\n      type: Input,\n      args: [\"ttSortableColumn\"]\n    }],\n    ttSortableColumnDisabled: [{\n      type: Input\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onEnterKey: [{\n      type: HostListener,\n      args: ['keydown.enter', ['$event']]\n    }]\n  });\n})();\n\nclass TTSortIcon {\n  constructor(tt, cd) {\n    this.tt = tt;\n    this.cd = cd;\n    this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\n      this.updateSortState();\n      this.cd.markForCheck();\n    });\n  }\n\n  ngOnInit() {\n    this.updateSortState();\n  }\n\n  onClick(event) {\n    event.preventDefault();\n  }\n\n  updateSortState() {\n    if (this.tt.sortMode === 'single') {\n      this.sortOrder = this.tt.isSorted(this.field) ? this.tt.sortOrder : 0;\n    } else if (this.tt.sortMode === 'multiple') {\n      let sortMeta = this.tt.getSortMeta(this.field);\n      this.sortOrder = sortMeta ? sortMeta.order : 0;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n}\n\nTTSortIcon.ɵfac = function TTSortIcon_Factory(t) {\n  return new (t || TTSortIcon)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nTTSortIcon.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TTSortIcon,\n  selectors: [[\"p-treeTableSortIcon\"]],\n  inputs: {\n    field: \"field\",\n    ariaLabelDesc: \"ariaLabelDesc\",\n    ariaLabelAsc: \"ariaLabelAsc\"\n  },\n  decls: 1,\n  vars: 5,\n  consts: [[1, \"p-sortable-column-icon\", \"pi\", \"pi-fw\", 3, \"ngClass\"]],\n  template: function TTSortIcon_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"i\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(1, _c24, ctx.sortOrder === 1, ctx.sortOrder === -1, ctx.sortOrder === 0));\n    }\n  },\n  directives: [i3.NgClass],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTSortIcon, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableSortIcon',\n      template: `\n        <i class=\"p-sortable-column-icon pi pi-fw\" [ngClass]=\"{'pi-sort-amount-up-alt': sortOrder === 1, 'pi-sort-amount-down': sortOrder === -1, 'pi-sort-alt': sortOrder === 0}\"></i>\n    `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    field: [{\n      type: Input\n    }],\n    ariaLabelDesc: [{\n      type: Input\n    }],\n    ariaLabelAsc: [{\n      type: Input\n    }]\n  });\n})();\n\nclass TTResizableColumn {\n  constructor(tt, el, zone) {\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n\n  ngAfterViewInit() {\n    if (this.isEnabled()) {\n      DomHandler.addClass(this.el.nativeElement, 'p-resizable-column');\n      this.resizer = document.createElement('span');\n      this.resizer.className = 'p-column-resizer';\n      this.el.nativeElement.appendChild(this.resizer);\n      this.zone.runOutsideAngular(() => {\n        this.resizerMouseDownListener = this.onMouseDown.bind(this);\n        this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);\n      });\n    }\n  }\n\n  bindDocumentEvents() {\n    this.zone.runOutsideAngular(() => {\n      this.documentMouseMoveListener = this.onDocumentMouseMove.bind(this);\n      document.addEventListener('mousemove', this.documentMouseMoveListener);\n      this.documentMouseUpListener = this.onDocumentMouseUp.bind(this);\n      document.addEventListener('mouseup', this.documentMouseUpListener);\n    });\n  }\n\n  unbindDocumentEvents() {\n    if (this.documentMouseMoveListener) {\n      document.removeEventListener('mousemove', this.documentMouseMoveListener);\n      this.documentMouseMoveListener = null;\n    }\n\n    if (this.documentMouseUpListener) {\n      document.removeEventListener('mouseup', this.documentMouseUpListener);\n      this.documentMouseUpListener = null;\n    }\n  }\n\n  onMouseDown(event) {\n    this.tt.onColumnResizeBegin(event);\n    this.bindDocumentEvents();\n  }\n\n  onDocumentMouseMove(event) {\n    this.tt.onColumnResize(event);\n  }\n\n  onDocumentMouseUp(event) {\n    this.tt.onColumnResizeEnd(event, this.el.nativeElement);\n    this.unbindDocumentEvents();\n  }\n\n  isEnabled() {\n    return this.ttResizableColumnDisabled !== true;\n  }\n\n  ngOnDestroy() {\n    if (this.resizerMouseDownListener) {\n      this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\n    }\n\n    this.unbindDocumentEvents();\n  }\n\n}\n\nTTResizableColumn.ɵfac = function TTResizableColumn_Factory(t) {\n  return new (t || TTResizableColumn)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nTTResizableColumn.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TTResizableColumn,\n  selectors: [[\"\", \"ttResizableColumn\", \"\"]],\n  inputs: {\n    ttResizableColumnDisabled: \"ttResizableColumnDisabled\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTResizableColumn, [{\n    type: Directive,\n    args: [{\n      selector: '[ttResizableColumn]'\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    ttResizableColumnDisabled: [{\n      type: Input\n    }]\n  });\n})();\n\nclass TTReorderableColumn {\n  constructor(tt, el, zone) {\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n\n  ngAfterViewInit() {\n    if (this.isEnabled()) {\n      this.bindEvents();\n    }\n  }\n\n  bindEvents() {\n    this.zone.runOutsideAngular(() => {\n      this.mouseDownListener = this.onMouseDown.bind(this);\n      this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\n      this.dragStartListener = this.onDragStart.bind(this);\n      this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\n      this.dragOverListener = this.onDragEnter.bind(this);\n      this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\n      this.dragEnterListener = this.onDragEnter.bind(this);\n      this.el.nativeElement.addEventListener('dragenter', this.dragEnterListener);\n      this.dragLeaveListener = this.onDragLeave.bind(this);\n      this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\n    });\n  }\n\n  unbindEvents() {\n    if (this.mouseDownListener) {\n      document.removeEventListener('mousedown', this.mouseDownListener);\n      this.mouseDownListener = null;\n    }\n\n    if (this.dragOverListener) {\n      document.removeEventListener('dragover', this.dragOverListener);\n      this.dragOverListener = null;\n    }\n\n    if (this.dragEnterListener) {\n      document.removeEventListener('dragenter', this.dragEnterListener);\n      this.dragEnterListener = null;\n    }\n\n    if (this.dragEnterListener) {\n      document.removeEventListener('dragenter', this.dragEnterListener);\n      this.dragEnterListener = null;\n    }\n\n    if (this.dragLeaveListener) {\n      document.removeEventListener('dragleave', this.dragLeaveListener);\n      this.dragLeaveListener = null;\n    }\n  }\n\n  onMouseDown(event) {\n    if (event.target.nodeName === 'INPUT' || event.target.nodeName === 'TEXTAREA' || DomHandler.hasClass(event.target, 'p-column-resizer')) this.el.nativeElement.draggable = false;else this.el.nativeElement.draggable = true;\n  }\n\n  onDragStart(event) {\n    this.tt.onColumnDragStart(event, this.el.nativeElement);\n  }\n\n  onDragOver(event) {\n    event.preventDefault();\n  }\n\n  onDragEnter(event) {\n    this.tt.onColumnDragEnter(event, this.el.nativeElement);\n  }\n\n  onDragLeave(event) {\n    this.tt.onColumnDragLeave(event);\n  }\n\n  onDrop(event) {\n    if (this.isEnabled()) {\n      this.tt.onColumnDrop(event, this.el.nativeElement);\n    }\n  }\n\n  isEnabled() {\n    return this.ttReorderableColumnDisabled !== true;\n  }\n\n  ngOnDestroy() {\n    this.unbindEvents();\n  }\n\n}\n\nTTReorderableColumn.ɵfac = function TTReorderableColumn_Factory(t) {\n  return new (t || TTReorderableColumn)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nTTReorderableColumn.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TTReorderableColumn,\n  selectors: [[\"\", \"ttReorderableColumn\", \"\"]],\n  hostBindings: function TTReorderableColumn_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"drop\", function TTReorderableColumn_drop_HostBindingHandler($event) {\n        return ctx.onDrop($event);\n      });\n    }\n  },\n  inputs: {\n    ttReorderableColumnDisabled: \"ttReorderableColumnDisabled\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTReorderableColumn, [{\n    type: Directive,\n    args: [{\n      selector: '[ttReorderableColumn]'\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    ttReorderableColumnDisabled: [{\n      type: Input\n    }],\n    onDrop: [{\n      type: HostListener,\n      args: ['drop', ['$event']]\n    }]\n  });\n})();\n\nclass TTSelectableRow {\n  constructor(tt, tableService) {\n    this.tt = tt;\n    this.tableService = tableService;\n\n    if (this.isEnabled()) {\n      this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n        this.selected = this.tt.isSelected(this.rowNode.node);\n      });\n    }\n  }\n\n  ngOnInit() {\n    if (this.isEnabled()) {\n      this.selected = this.tt.isSelected(this.rowNode.node);\n    }\n  }\n\n  onClick(event) {\n    if (this.isEnabled()) {\n      this.tt.handleRowClick({\n        originalEvent: event,\n        rowNode: this.rowNode\n      });\n    }\n  }\n\n  onEnterKey(event) {\n    if (event.which === 13) {\n      this.onClick(event);\n    }\n  }\n\n  onTouchEnd(event) {\n    if (this.isEnabled()) {\n      this.tt.handleRowTouchEnd(event);\n    }\n  }\n\n  isEnabled() {\n    return this.ttSelectableRowDisabled !== true;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n}\n\nTTSelectableRow.ɵfac = function TTSelectableRow_Factory(t) {\n  return new (t || TTSelectableRow)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService));\n};\n\nTTSelectableRow.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TTSelectableRow,\n  selectors: [[\"\", \"ttSelectableRow\", \"\"]],\n  hostVars: 2,\n  hostBindings: function TTSelectableRow_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function TTSelectableRow_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      })(\"keydown\", function TTSelectableRow_keydown_HostBindingHandler($event) {\n        return ctx.onEnterKey($event);\n      })(\"touchend\", function TTSelectableRow_touchend_HostBindingHandler($event) {\n        return ctx.onTouchEnd($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"p-highlight\", ctx.selected);\n    }\n  },\n  inputs: {\n    rowNode: [\"ttSelectableRow\", \"rowNode\"],\n    ttSelectableRowDisabled: \"ttSelectableRowDisabled\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTSelectableRow, [{\n    type: Directive,\n    args: [{\n      selector: '[ttSelectableRow]',\n      host: {\n        '[class.p-highlight]': 'selected'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }];\n  }, {\n    rowNode: [{\n      type: Input,\n      args: [\"ttSelectableRow\"]\n    }],\n    ttSelectableRowDisabled: [{\n      type: Input\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onEnterKey: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }],\n    onTouchEnd: [{\n      type: HostListener,\n      args: ['touchend', ['$event']]\n    }]\n  });\n})();\n\nclass TTSelectableRowDblClick {\n  constructor(tt, tableService) {\n    this.tt = tt;\n    this.tableService = tableService;\n\n    if (this.isEnabled()) {\n      this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n        this.selected = this.tt.isSelected(this.rowNode.node);\n      });\n    }\n  }\n\n  ngOnInit() {\n    if (this.isEnabled()) {\n      this.selected = this.tt.isSelected(this.rowNode.node);\n    }\n  }\n\n  onClick(event) {\n    if (this.isEnabled()) {\n      this.tt.handleRowClick({\n        originalEvent: event,\n        rowNode: this.rowNode\n      });\n    }\n  }\n\n  isEnabled() {\n    return this.ttSelectableRowDisabled !== true;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n}\n\nTTSelectableRowDblClick.ɵfac = function TTSelectableRowDblClick_Factory(t) {\n  return new (t || TTSelectableRowDblClick)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService));\n};\n\nTTSelectableRowDblClick.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TTSelectableRowDblClick,\n  selectors: [[\"\", \"ttSelectableRowDblClick\", \"\"]],\n  hostVars: 2,\n  hostBindings: function TTSelectableRowDblClick_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"dblclick\", function TTSelectableRowDblClick_dblclick_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"p-highlight\", ctx.selected);\n    }\n  },\n  inputs: {\n    rowNode: [\"ttSelectableRowDblClick\", \"rowNode\"],\n    ttSelectableRowDisabled: \"ttSelectableRowDisabled\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTSelectableRowDblClick, [{\n    type: Directive,\n    args: [{\n      selector: '[ttSelectableRowDblClick]',\n      host: {\n        '[class.p-highlight]': 'selected'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }];\n  }, {\n    rowNode: [{\n      type: Input,\n      args: [\"ttSelectableRowDblClick\"]\n    }],\n    ttSelectableRowDisabled: [{\n      type: Input\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['dblclick', ['$event']]\n    }]\n  });\n})();\n\nclass TTContextMenuRow {\n  constructor(tt, tableService, el) {\n    this.tt = tt;\n    this.tableService = tableService;\n    this.el = el;\n\n    if (this.isEnabled()) {\n      this.subscription = this.tt.tableService.contextMenuSource$.subscribe(node => {\n        this.selected = this.tt.equals(this.rowNode.node, node);\n      });\n    }\n  }\n\n  onContextMenu(event) {\n    if (this.isEnabled()) {\n      this.tt.handleRowRightClick({\n        originalEvent: event,\n        rowNode: this.rowNode\n      });\n      this.el.nativeElement.focus();\n      event.preventDefault();\n    }\n  }\n\n  isEnabled() {\n    return this.ttContextMenuRowDisabled !== true;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n}\n\nTTContextMenuRow.ɵfac = function TTContextMenuRow_Factory(t) {\n  return new (t || TTContextMenuRow)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nTTContextMenuRow.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TTContextMenuRow,\n  selectors: [[\"\", \"ttContextMenuRow\", \"\"]],\n  hostVars: 3,\n  hostBindings: function TTContextMenuRow_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"contextmenu\", function TTContextMenuRow_contextmenu_HostBindingHandler($event) {\n        return ctx.onContextMenu($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"tabindex\", ctx.isEnabled() ? 0 : undefined);\n      i0.ɵɵclassProp(\"p-highlight-contextmenu\", ctx.selected);\n    }\n  },\n  inputs: {\n    rowNode: [\"ttContextMenuRow\", \"rowNode\"],\n    ttContextMenuRowDisabled: \"ttContextMenuRowDisabled\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTContextMenuRow, [{\n    type: Directive,\n    args: [{\n      selector: '[ttContextMenuRow]',\n      host: {\n        '[class.p-highlight-contextmenu]': 'selected',\n        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }, {\n      type: i0.ElementRef\n    }];\n  }, {\n    rowNode: [{\n      type: Input,\n      args: [\"ttContextMenuRow\"]\n    }],\n    ttContextMenuRowDisabled: [{\n      type: Input\n    }],\n    onContextMenu: [{\n      type: HostListener,\n      args: ['contextmenu', ['$event']]\n    }]\n  });\n})();\n\nclass TTCheckbox {\n  constructor(tt, tableService, cd) {\n    this.tt = tt;\n    this.tableService = tableService;\n    this.cd = cd;\n    this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n      this.checked = this.tt.isSelected(this.rowNode.node);\n      this.cd.markForCheck();\n    });\n  }\n\n  ngOnInit() {\n    this.checked = this.tt.isSelected(this.rowNode.node);\n  }\n\n  onClick(event) {\n    if (!this.disabled) {\n      this.tt.toggleNodeWithCheckbox({\n        originalEvent: event,\n        rowNode: this.rowNode\n      });\n    }\n\n    DomHandler.clearSelection();\n  }\n\n  onFocus() {\n    DomHandler.addClass(this.boxViewChild.nativeElement, 'p-focus');\n  }\n\n  onBlur() {\n    DomHandler.removeClass(this.boxViewChild.nativeElement, 'p-focus');\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n}\n\nTTCheckbox.ɵfac = function TTCheckbox_Factory(t) {\n  return new (t || TTCheckbox)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nTTCheckbox.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TTCheckbox,\n  selectors: [[\"p-treeTableCheckbox\"]],\n  viewQuery: function TTCheckbox_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c25, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.boxViewChild = _t.first);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    rowNode: [\"value\", \"rowNode\"]\n  },\n  decls: 6,\n  vars: 11,\n  consts: [[1, \"p-checkbox\", \"p-component\", 3, \"click\"], [1, \"p-hidden-accessible\"], [\"type\", \"checkbox\", 3, \"checked\", \"focus\", \"blur\"], [\"role\", \"checkbox\", 3, \"ngClass\"], [\"box\", \"\"], [1, \"p-checkbox-icon\", \"pi\", 3, \"ngClass\"]],\n  template: function TTCheckbox_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵlistener(\"click\", function TTCheckbox_Template_div_click_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"input\", 2);\n      i0.ɵɵlistener(\"focus\", function TTCheckbox_Template_input_focus_2_listener() {\n        return ctx.onFocus();\n      })(\"blur\", function TTCheckbox_Template_input_blur_2_listener() {\n        return ctx.onBlur();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 3, 4);\n      i0.ɵɵelement(5, \"span\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"checked\", ctx.checked);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(4, _c26, ctx.checked, ctx.rowNode.node.partialSelected, ctx.disabled));\n      i0.ɵɵattribute(\"aria-checked\", ctx.checked);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(8, _c27, ctx.checked, ctx.rowNode.node.partialSelected));\n    }\n  },\n  directives: [i3.NgClass],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTCheckbox, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableCheckbox',\n      template: `\n        <div class=\"p-checkbox p-component\" (click)=\"onClick($event)\">\n            <div class=\"p-hidden-accessible\">\n                <input type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\">\n            </div>\n            <div #box [ngClass]=\"{'p-checkbox-box':true,\n                'p-highlight':checked, 'p-indeterminate': rowNode.node.partialSelected, 'p-disabled':disabled}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"p-checkbox-icon pi\" [ngClass]=\"{'pi-check':checked, 'pi-minus': rowNode.node.partialSelected}\"></span>\n            </div>\n        </div>\n    `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    disabled: [{\n      type: Input\n    }],\n    rowNode: [{\n      type: Input,\n      args: [\"value\"]\n    }],\n    boxViewChild: [{\n      type: ViewChild,\n      args: ['box']\n    }]\n  });\n})();\n\nclass TTHeaderCheckbox {\n  constructor(tt, tableService, cd) {\n    this.tt = tt;\n    this.tableService = tableService;\n    this.cd = cd;\n    this.valueChangeSubscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n      this.checked = this.updateCheckedState();\n    });\n    this.selectionChangeSubscription = this.tt.tableService.selectionSource$.subscribe(() => {\n      this.checked = this.updateCheckedState();\n    });\n  }\n\n  ngOnInit() {\n    this.checked = this.updateCheckedState();\n  }\n\n  onClick(event, checked) {\n    if (this.tt.value && this.tt.value.length > 0) {\n      this.tt.toggleNodesWithCheckbox(event, !checked);\n    }\n\n    DomHandler.clearSelection();\n  }\n\n  onFocus() {\n    DomHandler.addClass(this.boxViewChild.nativeElement, 'p-focus');\n  }\n\n  onBlur() {\n    DomHandler.removeClass(this.boxViewChild.nativeElement, 'p-focus');\n  }\n\n  ngOnDestroy() {\n    if (this.selectionChangeSubscription) {\n      this.selectionChangeSubscription.unsubscribe();\n    }\n\n    if (this.valueChangeSubscription) {\n      this.valueChangeSubscription.unsubscribe();\n    }\n  }\n\n  updateCheckedState() {\n    this.cd.markForCheck();\n    let checked;\n    const data = this.tt.filteredNodes || this.tt.value;\n\n    if (data) {\n      for (let node of data) {\n        if (this.tt.isSelected(node)) {\n          checked = true;\n        } else {\n          checked = false;\n          break;\n        }\n      }\n    } else {\n      checked = false;\n    }\n\n    return checked;\n  }\n\n}\n\nTTHeaderCheckbox.ɵfac = function TTHeaderCheckbox_Factory(t) {\n  return new (t || TTHeaderCheckbox)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nTTHeaderCheckbox.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TTHeaderCheckbox,\n  selectors: [[\"p-treeTableHeaderCheckbox\"]],\n  viewQuery: function TTHeaderCheckbox_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c25, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.boxViewChild = _t.first);\n    }\n  },\n  decls: 7,\n  vars: 10,\n  consts: [[1, \"p-checkbox\", \"p-component\", 3, \"click\"], [1, \"p-hidden-accessible\"], [\"type\", \"checkbox\", 3, \"checked\", \"disabled\", \"focus\", \"blur\"], [\"cb\", \"\"], [\"role\", \"checkbox\", 3, \"ngClass\"], [\"box\", \"\"], [1, \"p-checkbox-icon\", 3, \"ngClass\"]],\n  template: function TTHeaderCheckbox_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r2 = i0.ɵɵgetCurrentView();\n\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵlistener(\"click\", function TTHeaderCheckbox_Template_div_click_0_listener($event) {\n        i0.ɵɵrestoreView(_r2);\n\n        const _r0 = i0.ɵɵreference(3);\n\n        return ctx.onClick($event, _r0.checked);\n      });\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"input\", 2, 3);\n      i0.ɵɵlistener(\"focus\", function TTHeaderCheckbox_Template_input_focus_2_listener() {\n        return ctx.onFocus();\n      })(\"blur\", function TTHeaderCheckbox_Template_input_blur_2_listener() {\n        return ctx.onBlur();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 4, 5);\n      i0.ɵɵelement(6, \"span\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"checked\", ctx.checked)(\"disabled\", !ctx.tt.value || ctx.tt.value.length === 0);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(5, _c28, ctx.checked, !ctx.tt.value || ctx.tt.value.length === 0));\n      i0.ɵɵattribute(\"aria-checked\", ctx.checked);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(8, _c29, ctx.checked));\n    }\n  },\n  directives: [i3.NgClass],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTHeaderCheckbox, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableHeaderCheckbox',\n      template: `\n        <div class=\"p-checkbox p-component\" (click)=\"onClick($event, cb.checked)\">\n            <div class=\"p-hidden-accessible\">\n                <input #cb type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"!tt.value||tt.value.length === 0\">\n            </div>\n            <div #box [ngClass]=\"{'p-checkbox-box':true,\n                'p-highlight':checked, 'p-disabled': (!tt.value || tt.value.length === 0)}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"p-checkbox-icon\" [ngClass]=\"{'pi pi-check':checked}\"></span>\n            </div>\n        </div>\n    `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    boxViewChild: [{\n      type: ViewChild,\n      args: ['box']\n    }]\n  });\n})();\n\nclass TTEditableColumn {\n  constructor(tt, el, zone) {\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n\n  ngAfterViewInit() {\n    if (this.isEnabled()) {\n      DomHandler.addClass(this.el.nativeElement, 'p-editable-column');\n    }\n  }\n\n  onClick(event) {\n    if (this.isEnabled()) {\n      this.tt.editingCellClick = true;\n\n      if (this.tt.editingCell) {\n        if (this.tt.editingCell !== this.el.nativeElement) {\n          if (!this.tt.isEditingCellValid()) {\n            return;\n          }\n\n          DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n          this.openCell();\n        }\n      } else {\n        this.openCell();\n      }\n    }\n  }\n\n  openCell() {\n    this.tt.updateEditingCell(this.el.nativeElement, this.data, this.field);\n    DomHandler.addClass(this.el.nativeElement, 'p-cell-editing');\n    this.tt.onEditInit.emit({\n      field: this.field,\n      data: this.data\n    });\n    this.tt.editingCellClick = true;\n    this.zone.runOutsideAngular(() => {\n      setTimeout(() => {\n        let focusable = DomHandler.findSingle(this.el.nativeElement, 'input, textarea');\n\n        if (focusable) {\n          focusable.focus();\n        }\n      }, 50);\n    });\n  }\n\n  closeEditingCell() {\n    DomHandler.removeClass(this.tt.editingCell, 'p-checkbox-icon');\n    this.tt.editingCell = null;\n    this.tt.unbindDocumentEditListener();\n  }\n\n  onKeyDown(event) {\n    if (this.isEnabled()) {\n      //enter\n      if (event.keyCode == 13) {\n        if (this.tt.isEditingCellValid()) {\n          DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n          this.closeEditingCell();\n          this.tt.onEditComplete.emit({\n            field: this.field,\n            data: this.data\n          });\n        }\n\n        event.preventDefault();\n      } //escape\n      else if (event.keyCode == 27) {\n          if (this.tt.isEditingCellValid()) {\n            DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n            this.closeEditingCell();\n            this.tt.onEditCancel.emit({\n              field: this.field,\n              data: this.data\n            });\n          }\n\n          event.preventDefault();\n        } //tab\n        else if (event.keyCode == 9) {\n            this.tt.onEditComplete.emit({\n              field: this.field,\n              data: this.data\n            });\n            if (event.shiftKey) this.moveToPreviousCell(event);else this.moveToNextCell(event);\n          }\n    }\n  }\n\n  findCell(element) {\n    if (element) {\n      let cell = element;\n\n      while (cell && !DomHandler.hasClass(cell, 'p-cell-editing')) {\n        cell = cell.parentElement;\n      }\n\n      return cell;\n    } else {\n      return null;\n    }\n  }\n\n  moveToPreviousCell(event) {\n    let currentCell = this.findCell(event.target);\n    let row = currentCell.parentElement;\n    let targetCell = this.findPreviousEditableColumn(currentCell);\n\n    if (targetCell) {\n      DomHandler.invokeElementMethod(targetCell, 'click');\n      event.preventDefault();\n    }\n  }\n\n  moveToNextCell(event) {\n    let currentCell = this.findCell(event.target);\n    let row = currentCell.parentElement;\n    let targetCell = this.findNextEditableColumn(currentCell);\n\n    if (targetCell) {\n      DomHandler.invokeElementMethod(targetCell, 'click');\n      event.preventDefault();\n    }\n  }\n\n  findPreviousEditableColumn(cell) {\n    let prevCell = cell.previousElementSibling;\n\n    if (!prevCell) {\n      let previousRow = cell.parentElement ? cell.parentElement.previousElementSibling : null;\n\n      if (previousRow) {\n        prevCell = previousRow.lastElementChild;\n      }\n    }\n\n    if (prevCell) {\n      if (DomHandler.hasClass(prevCell, 'p-editable-column')) return prevCell;else return this.findPreviousEditableColumn(prevCell);\n    } else {\n      return null;\n    }\n  }\n\n  findNextEditableColumn(cell) {\n    let nextCell = cell.nextElementSibling;\n\n    if (!nextCell) {\n      let nextRow = cell.parentElement ? cell.parentElement.nextElementSibling : null;\n\n      if (nextRow) {\n        nextCell = nextRow.firstElementChild;\n      }\n    }\n\n    if (nextCell) {\n      if (DomHandler.hasClass(nextCell, 'p-editable-column')) return nextCell;else return this.findNextEditableColumn(nextCell);\n    } else {\n      return null;\n    }\n  }\n\n  isEnabled() {\n    return this.ttEditableColumnDisabled !== true;\n  }\n\n}\n\nTTEditableColumn.ɵfac = function TTEditableColumn_Factory(t) {\n  return new (t || TTEditableColumn)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nTTEditableColumn.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TTEditableColumn,\n  selectors: [[\"\", \"ttEditableColumn\", \"\"]],\n  hostBindings: function TTEditableColumn_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function TTEditableColumn_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      })(\"keydown\", function TTEditableColumn_keydown_HostBindingHandler($event) {\n        return ctx.onKeyDown($event);\n      });\n    }\n  },\n  inputs: {\n    data: [\"ttEditableColumn\", \"data\"],\n    field: [\"ttEditableColumnField\", \"field\"],\n    ttEditableColumnDisabled: \"ttEditableColumnDisabled\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTEditableColumn, [{\n    type: Directive,\n    args: [{\n      selector: '[ttEditableColumn]'\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    data: [{\n      type: Input,\n      args: [\"ttEditableColumn\"]\n    }],\n    field: [{\n      type: Input,\n      args: [\"ttEditableColumnField\"]\n    }],\n    ttEditableColumnDisabled: [{\n      type: Input\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }]\n  });\n})();\n\nclass TreeTableCellEditor {\n  constructor(tt, editableColumn) {\n    this.tt = tt;\n    this.editableColumn = editableColumn;\n  }\n\n  ngAfterContentInit() {\n    this.templates.forEach(item => {\n      switch (item.getType()) {\n        case 'input':\n          this.inputTemplate = item.template;\n          break;\n\n        case 'output':\n          this.outputTemplate = item.template;\n          break;\n      }\n    });\n  }\n\n}\n\nTreeTableCellEditor.ɵfac = function TreeTableCellEditor_Factory(t) {\n  return new (t || TreeTableCellEditor)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TTEditableColumn));\n};\n\nTreeTableCellEditor.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TreeTableCellEditor,\n  selectors: [[\"p-treeTableCellEditor\"]],\n  contentQueries: function TreeTableCellEditor_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n    }\n  },\n  decls: 2,\n  vars: 2,\n  consts: [[4, \"ngIf\"], [4, \"ngTemplateOutlet\"]],\n  template: function TreeTableCellEditor_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, TreeTableCellEditor_ng_container_0_Template, 2, 1, \"ng-container\", 0);\n      i0.ɵɵtemplate(1, TreeTableCellEditor_ng_container_1_Template, 2, 1, \"ng-container\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.tt.editingCell === ctx.editableColumn.el.nativeElement);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.tt.editingCell || ctx.tt.editingCell !== ctx.editableColumn.el.nativeElement);\n    }\n  },\n  directives: [i3.NgIf, i3.NgTemplateOutlet],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeTableCellEditor, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableCellEditor',\n      template: `\n        <ng-container *ngIf=\"tt.editingCell === editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!tt.editingCell || tt.editingCell !== editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\n        </ng-container>\n    `,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TTEditableColumn\n    }];\n  }, {\n    templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }]\n  });\n})();\n\nclass TTRow {\n  constructor(tt, el, zone) {\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n\n  onKeyDown(event) {\n    switch (event.which) {\n      //down arrow\n      case 40:\n        let nextRow = this.el.nativeElement.nextElementSibling;\n\n        if (nextRow) {\n          nextRow.focus();\n        }\n\n        event.preventDefault();\n        break;\n      //down arrow\n\n      case 38:\n        let prevRow = this.el.nativeElement.previousElementSibling;\n\n        if (prevRow) {\n          prevRow.focus();\n        }\n\n        event.preventDefault();\n        break;\n      //left arrow\n\n      case 37:\n        if (this.rowNode.node.expanded) {\n          this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n          this.rowNode.node.expanded = false;\n          this.tt.onNodeCollapse.emit({\n            originalEvent: event,\n            node: this.rowNode.node\n          });\n          this.tt.updateSerializedValue();\n          this.tt.tableService.onUIUpdate(this.tt.value);\n          this.restoreFocus();\n        }\n\n        break;\n      //right arrow\n\n      case 39:\n        if (!this.rowNode.node.expanded) {\n          this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n          this.rowNode.node.expanded = true;\n          this.tt.onNodeExpand.emit({\n            originalEvent: event,\n            node: this.rowNode.node\n          });\n          this.tt.updateSerializedValue();\n          this.tt.tableService.onUIUpdate(this.tt.value);\n          this.restoreFocus();\n        }\n\n        break;\n    }\n  }\n\n  restoreFocus() {\n    this.zone.runOutsideAngular(() => {\n      setTimeout(() => {\n        let row = DomHandler.findSingle(this.tt.containerViewChild.nativeElement, '.p-treetable-tbody').children[this.tt.toggleRowIndex];\n\n        if (row) {\n          row.focus();\n        }\n      }, 25);\n    });\n  }\n\n}\n\nTTRow.ɵfac = function TTRow_Factory(t) {\n  return new (t || TTRow)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nTTRow.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TTRow,\n  selectors: [[\"\", \"ttRow\", \"\"]],\n  hostVars: 1,\n  hostBindings: function TTRow_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keydown\", function TTRow_keydown_HostBindingHandler($event) {\n        return ctx.onKeyDown($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"tabindex\", \"0\");\n    }\n  },\n  inputs: {\n    rowNode: [\"ttRow\", \"rowNode\"]\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTRow, [{\n    type: Directive,\n    args: [{\n      selector: '[ttRow]',\n      host: {\n        '[attr.tabindex]': '\"0\"'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    rowNode: [{\n      type: Input,\n      args: ['ttRow']\n    }],\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }]\n  });\n})();\n\nclass TreeTableToggler {\n  constructor(tt) {\n    this.tt = tt;\n  }\n\n  onClick(event) {\n    this.rowNode.node.expanded = !this.rowNode.node.expanded;\n\n    if (this.rowNode.node.expanded) {\n      this.tt.onNodeExpand.emit({\n        originalEvent: event,\n        node: this.rowNode.node\n      });\n    } else {\n      this.tt.onNodeCollapse.emit({\n        originalEvent: event,\n        node: this.rowNode.node\n      });\n    }\n\n    this.tt.updateSerializedValue();\n    this.tt.tableService.onUIUpdate(this.tt.value);\n    event.preventDefault();\n  }\n\n}\n\nTreeTableToggler.ɵfac = function TreeTableToggler_Factory(t) {\n  return new (t || TreeTableToggler)(i0.ɵɵdirectiveInject(TreeTable));\n};\n\nTreeTableToggler.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TreeTableToggler,\n  selectors: [[\"p-treeTableToggler\"]],\n  inputs: {\n    rowNode: \"rowNode\"\n  },\n  decls: 2,\n  vars: 5,\n  consts: [[\"type\", \"button\", \"tabindex\", \"-1\", \"pRipple\", \"\", 1, \"p-treetable-toggler\", \"p-link\", 3, \"click\"], [3, \"ngClass\"]],\n  template: function TreeTableToggler_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function TreeTableToggler_Template_button_click_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵelement(1, \"i\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"visibility\", ctx.rowNode.node.leaf === false || ctx.rowNode.node.children && ctx.rowNode.node.children.length ? \"visible\" : \"hidden\")(\"margin-left\", ctx.rowNode.level * 16 + \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", ctx.rowNode.node.expanded ? \"pi pi-fw pi-chevron-down\" : \"pi pi-fw pi-chevron-right\");\n    }\n  },\n  directives: [i5.Ripple, i3.NgClass],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeTableToggler, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableToggler',\n      template: `\n        <button type=\"button\" class=\"p-treetable-toggler p-link\" (click)=\"onClick($event)\" tabindex=\"-1\" pRipple\n            [style.visibility]=\"rowNode.node.leaf === false || (rowNode.node.children && rowNode.node.children.length) ? 'visible' : 'hidden'\" [style.marginLeft]=\"rowNode.level * 16 + 'px'\">\n            <i [ngClass]=\"rowNode.node.expanded ? 'pi pi-fw pi-chevron-down' : 'pi pi-fw pi-chevron-right'\"></i>\n        </button>\n    `,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }];\n  }, {\n    rowNode: [{\n      type: Input\n    }]\n  });\n})();\n\nclass TreeTableModule {}\n\nTreeTableModule.ɵfac = function TreeTableModule_Factory(t) {\n  return new (t || TreeTableModule)();\n};\n\nTreeTableModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TreeTableModule\n});\nTreeTableModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, PaginatorModule, ScrollingModule, RippleModule], SharedModule, ScrollingModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeTableModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, PaginatorModule, ScrollingModule, RippleModule],\n      exports: [TreeTable, SharedModule, TreeTableToggler, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor, ScrollingModule],\n      declarations: [TreeTable, TreeTableToggler, TTScrollableView, TTBody, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TTBody, TTCheckbox, TTContextMenuRow, TTEditableColumn, TTHeaderCheckbox, TTReorderableColumn, TTResizableColumn, TTRow, TTScrollableView, TTSelectableRow, TTSelectableRowDblClick, TTSortIcon, TTSortableColumn, TreeTable, TreeTableCellEditor, TreeTableModule, TreeTableService, TreeTableToggler }; //# sourceMappingURL=primeng-treetable.js.map","map":{"version":3,"sources":["D:/TEKCLOVER GIT MAIN/root/IWB2B/MVP/Code/Associate-MVP/node_modules/primeng/fesm2015/primeng-treetable.js"],"names":["i0","Injectable","EventEmitter","Component","ViewEncapsulation","Input","Output","ViewChild","ContentChildren","Directive","HostListener","ChangeDetectionStrategy","NgModule","i3","CommonModule","Subject","DomHandler","i2","PaginatorModule","i1","PrimeTemplate","SharedModule","ObjectUtils","i5","RippleModule","i4","CdkVirtualScrollViewport","ScrollingModule","TreeTableService","constructor","sortSource","selectionSource","contextMenuSource","uiUpdateSource","totalRecordsSource","sortSource$","asObservable","selectionSource$","contextMenuSource$","uiUpdateSource$","totalRecordsSource$","onSort","sortMeta","next","onSelectionChange","onContextMenu","node","onUIUpdate","value","onTotalRecordsChange","ɵfac","ɵprov","type","TreeTable","el","zone","tableService","filterService","lazy","lazyLoadOnInit","first","pageLinks","alwaysShowPaginator","paginatorPosition","currentPageReportTemplate","showFirstLastIcon","showPageLinks","defaultSortOrder","sortMode","resetPageOnSort","selectionChange","contextMenuSelectionChange","contextMenuSelectionMode","compareSelectionBy","loadingIcon","showLoader","virtualScrollDelay","virtualRowHeight","columnResizeMode","rowTrackBy","index","item","filters","filterDelay","filterMode","onFilter","onNodeExpand","onNodeCollapse","onPage","onLazyLoad","sortFunction","onColResize","onColReorder","onNodeSelect","onNodeUnselect","onContextMenuSelect","onHeaderCheckboxToggle","onEditInit","onEditComplete","onEditCancel","_value","_totalRecords","_sortOrder","selectionKeys","ngOnInit","emit","createLazyLoadMetadata","initialized","ngAfterContentInit","templates","forEach","getType","captionTemplate","template","headerTemplate","bodyTemplate","loadingBodyTemplate","footerTemplate","summaryTemplate","colGroupTemplate","emptyMessageTemplate","paginatorLeftTemplate","paginatorRightTemplate","paginatorDropdownItemTemplate","frozenHeaderTemplate","frozenBodyTemplate","frozenFooterTemplate","frozenColGroupTemplate","ngOnChanges","simpleChange","currentValue","totalRecords","length","sortField","sortSingle","multiSortMeta","sortMultiple","hasFilter","_filter","updateSerializedValue","_sortField","sortOrder","_multiSortMeta","selection","_selection","preventSelectionSetterPropagation","updateSelectionKeys","val","serializedValue","paginator","serializePageNodes","serializeNodes","filteredNodes","parent","nodes","level","visible","rowNode","expanded","push","children","data","i","rows","dataKey","Array","isArray","String","resolveFieldData","onPageChange","event","scrollable","resetScrollTop","sort","originalEvent","field","metaKey","ctrlKey","getSortMeta","order","sortNodes","customSort","mode","node1","node2","value1","value2","result","localeCompare","undefined","numeric","sortMultipleNodes","multisortmeta","multisortField","isSorted","sorted","globalFilter","virtualScroll","scrollToVirtualIndex","scrollTo","top","scrollableViewChild","scrollableFrozenViewChild","options","isEmpty","getBlockableElement","nativeElement","onColumnResizeBegin","containerLeft","getOffset","containerViewChild","left","lastResizerHelperX","pageX","scrollLeft","preventDefault","onColumnResize","addClass","resizeHelperViewChild","style","height","offsetHeight","display","onColumnResizeEnd","column","delta","offsetLeft","columnWidth","offsetWidth","newColumnWidth","minWidth","parseInt","nextColumn","nextElementSibling","offsetParent","nextColumnWidth","nextColumnMinWidth","scrollableView","findParentScrollableView","scrollableBodyTable","findSingle","scrollableHeaderTable","scrollableFooterTable","resizeColumnIndex","resizeColGroup","width","scrollableBody","scrollableHeader","scrollableFooter","scrollableBodyTableWidth","scrollableHeaderTableWidth","isContainerInViewport","setWidth","container","table","calculateScrollbarWidth","tableViewChild","containerWidth","element","removeClass","parentElement","hasClass","colGroup","nodeName","col","nextCol","onColumnDragStart","columnElement","reorderIconWidth","getHiddenElementOuterWidth","reorderIndicatorUpViewChild","reorderIconHeight","getHiddenElementOuterHeight","reorderIndicatorDownViewChild","draggedColumn","dataTransfer","setData","onColumnDragEnter","dropHeader","reorderableColumns","containerOffset","dropHeaderOffset","targetLeft","targetTop","columnCenter","Math","ceil","dropPosition","dropEffect","onColumnDragLeave","onColumnDrop","dropColumn","dragIndex","indexWithinGroup","dropIndex","allowDrop","reorderArray","columns","draggable","handleRowClick","targetNode","target","selectionMode","selected","isSelected","metaSelection","rowTouched","metaKeySelection","dataKeyValue","isSingleSelectionMode","selectionIndex","findIndexInSelection","filter","isMultipleSelectionMode","rowIndex","handleRowTouchEnd","handleRowRightClick","contextMenu","contextMenuSelection","show","toggleNodeWithCheckbox","propagateSelectionDown","propagateSelectionUp","toggleNodesWithCheckbox","check","slice","checked","select","selectedChildCount","childPartialSelected","child","partialSelected","equals","matchMode","filterTimeout","clearTimeout","isFilterBlank","setTimeout","filterGlobal","trim","globalFilterFieldsArray","globalFilterFields","Error","isStrictMode","isValueChanged","copyNode","Object","assign","localMatch","globalMatch","paramsWithoutNode","prop","hasOwnProperty","filterMeta","filterField","filterValue","filterMatchMode","filterConstraint","findFilteredNodes","isFilterMatched","j","copyNodeForGlobal","matches","filteredValue","matched","childNodes","childNode","copyChildNode","dataFieldValue","filterLocale","isNodeLeaf","leaf","empty","reset","updateEditingCell","cell","editingCell","editingCellData","editingCellField","bindDocumentEditListener","isEditingCellValid","find","documentEditListener","editingCellClick","unbindDocumentEditListener","document","addEventListener","removeEventListener","ngOnDestroy","ElementRef","NgZone","FilterService","ɵcmp","NgStyle","NgClass","NgIf","NgTemplateOutlet","Paginator","TTBody","TTScrollableView","args","selector","providers","encapsulation","None","styleUrls","styleClass","tableStyle","tableStyleClass","autoLayout","rowsPerPageOptions","paginatorDropdownAppendTo","showCurrentPageReport","showJumpToPageDropdown","rowHover","loading","scrollHeight","minBufferPx","maxBufferPx","frozenWidth","frozenColumns","resizableColumns","tt","treeTableService","cd","subscription","subscribe","detectChanges","unsubscribe","ChangeDetectorRef","NgForOf","CdkVirtualForOf","frozen","_scrollHeight","includes","console","log","virtualScrollBody","ngAfterViewInit","frozenView","previousElementSibling","frozenSiblingBody","scrollBarWidth","scrollHeaderBoxViewChild","paddingRight","scrollFooterBoxViewChild","scrollableAlignerViewChild","calculateScrollbarHeight","bindEvents","runOutsideAngular","scrollHeaderViewChild","headerScrollListener","onHeaderScroll","bind","scrollFooterViewChild","footerScrollListener","onFooterScroll","bodyScrollListener","onBodyScroll","getElementRef","scrollBodyViewChild","unbindEvents","preventBodyScrollPropagation","marginLeft","scrollTop","scrollToIndex","CdkFixedSizeVirtualScroll","scrollTableViewChild","scrollLoadingTableViewChild","TTSortableColumn","isEnabled","updateSortState","onClick","clearSelection","onEnterKey","ttSortableColumnDisabled","ɵdir","host","TTSortIcon","markForCheck","changeDetection","OnPush","ariaLabelDesc","ariaLabelAsc","TTResizableColumn","resizer","createElement","className","appendChild","resizerMouseDownListener","onMouseDown","bindDocumentEvents","documentMouseMoveListener","onDocumentMouseMove","documentMouseUpListener","onDocumentMouseUp","unbindDocumentEvents","ttResizableColumnDisabled","TTReorderableColumn","mouseDownListener","dragStartListener","onDragStart","dragOverListener","onDragEnter","dragEnterListener","dragLeaveListener","onDragLeave","onDragOver","onDrop","ttReorderableColumnDisabled","TTSelectableRow","which","onTouchEnd","ttSelectableRowDisabled","TTSelectableRowDblClick","TTContextMenuRow","focus","ttContextMenuRowDisabled","TTCheckbox","disabled","onFocus","boxViewChild","onBlur","TTHeaderCheckbox","valueChangeSubscription","updateCheckedState","selectionChangeSubscription","TTEditableColumn","openCell","focusable","closeEditingCell","onKeyDown","keyCode","shiftKey","moveToPreviousCell","moveToNextCell","findCell","currentCell","row","targetCell","findPreviousEditableColumn","invokeElementMethod","findNextEditableColumn","prevCell","previousRow","lastElementChild","nextCell","nextRow","firstElementChild","ttEditableColumnDisabled","TreeTableCellEditor","editableColumn","inputTemplate","outputTemplate","TTRow","prevRow","toggleRowIndex","restoreFocus","TreeTableToggler","Ripple","TreeTableModule","ɵmod","ɵinj","imports","exports","declarations"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Component, ViewEncapsulation, Input, Output, ViewChild, ContentChildren, Directive, HostListener, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { DomHandler } from 'primeng/dom';\nimport * as i2 from 'primeng/paginator';\nimport { PaginatorModule } from 'primeng/paginator';\nimport * as i1 from 'primeng/api';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { ObjectUtils } from 'primeng/utils';\nimport * as i5 from 'primeng/ripple';\nimport { RippleModule } from 'primeng/ripple';\nimport * as i4 from '@angular/cdk/scrolling';\nimport { CdkVirtualScrollViewport, ScrollingModule } from '@angular/cdk/scrolling';\n\nclass TreeTableService {\n    constructor() {\n        this.sortSource = new Subject();\n        this.selectionSource = new Subject();\n        this.contextMenuSource = new Subject();\n        this.uiUpdateSource = new Subject();\n        this.totalRecordsSource = new Subject();\n        this.sortSource$ = this.sortSource.asObservable();\n        this.selectionSource$ = this.selectionSource.asObservable();\n        this.contextMenuSource$ = this.contextMenuSource.asObservable();\n        this.uiUpdateSource$ = this.uiUpdateSource.asObservable();\n        this.totalRecordsSource$ = this.totalRecordsSource.asObservable();\n    }\n    onSort(sortMeta) {\n        this.sortSource.next(sortMeta);\n    }\n    onSelectionChange() {\n        this.selectionSource.next();\n    }\n    onContextMenu(node) {\n        this.contextMenuSource.next(node);\n    }\n    onUIUpdate(value) {\n        this.uiUpdateSource.next(value);\n    }\n    onTotalRecordsChange(value) {\n        this.totalRecordsSource.next(value);\n    }\n}\nTreeTableService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TreeTableService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nTreeTableService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TreeTableService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TreeTableService, decorators: [{\n            type: Injectable\n        }] });\nclass TreeTable {\n    constructor(el, zone, tableService, filterService) {\n        this.el = el;\n        this.zone = zone;\n        this.tableService = tableService;\n        this.filterService = filterService;\n        this.lazy = false;\n        this.lazyLoadOnInit = true;\n        this.first = 0;\n        this.pageLinks = 5;\n        this.alwaysShowPaginator = true;\n        this.paginatorPosition = 'bottom';\n        this.currentPageReportTemplate = '{currentPage} of {totalPages}';\n        this.showFirstLastIcon = true;\n        this.showPageLinks = true;\n        this.defaultSortOrder = 1;\n        this.sortMode = 'single';\n        this.resetPageOnSort = true;\n        this.selectionChange = new EventEmitter();\n        this.contextMenuSelectionChange = new EventEmitter();\n        this.contextMenuSelectionMode = \"separate\";\n        this.compareSelectionBy = 'deepEquals';\n        this.loadingIcon = 'pi pi-spinner';\n        this.showLoader = true;\n        this.virtualScrollDelay = 150;\n        this.virtualRowHeight = 28;\n        this.columnResizeMode = 'fit';\n        this.rowTrackBy = (index, item) => item;\n        this.filters = {};\n        this.filterDelay = 300;\n        this.filterMode = 'lenient';\n        this.onFilter = new EventEmitter();\n        this.onNodeExpand = new EventEmitter();\n        this.onNodeCollapse = new EventEmitter();\n        this.onPage = new EventEmitter();\n        this.onSort = new EventEmitter();\n        this.onLazyLoad = new EventEmitter();\n        this.sortFunction = new EventEmitter();\n        this.onColResize = new EventEmitter();\n        this.onColReorder = new EventEmitter();\n        this.onNodeSelect = new EventEmitter();\n        this.onNodeUnselect = new EventEmitter();\n        this.onContextMenuSelect = new EventEmitter();\n        this.onHeaderCheckboxToggle = new EventEmitter();\n        this.onEditInit = new EventEmitter();\n        this.onEditComplete = new EventEmitter();\n        this.onEditCancel = new EventEmitter();\n        this._value = [];\n        this._totalRecords = 0;\n        this._sortOrder = 1;\n        this.selectionKeys = {};\n    }\n    ngOnInit() {\n        if (this.lazy && this.lazyLoadOnInit) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        this.initialized = true;\n    }\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'caption':\n                    this.captionTemplate = item.template;\n                    break;\n                case 'header':\n                    this.headerTemplate = item.template;\n                    break;\n                case 'body':\n                    this.bodyTemplate = item.template;\n                    break;\n                case 'loadingbody':\n                    this.loadingBodyTemplate = item.template;\n                    break;\n                case 'footer':\n                    this.footerTemplate = item.template;\n                    break;\n                case 'summary':\n                    this.summaryTemplate = item.template;\n                    break;\n                case 'colgroup':\n                    this.colGroupTemplate = item.template;\n                    break;\n                case 'emptymessage':\n                    this.emptyMessageTemplate = item.template;\n                    break;\n                case 'paginatorleft':\n                    this.paginatorLeftTemplate = item.template;\n                    break;\n                case 'paginatorright':\n                    this.paginatorRightTemplate = item.template;\n                    break;\n                case 'paginatordropdownitem':\n                    this.paginatorDropdownItemTemplate = item.template;\n                    break;\n                case 'frozenheader':\n                    this.frozenHeaderTemplate = item.template;\n                    break;\n                case 'frozenbody':\n                    this.frozenBodyTemplate = item.template;\n                    break;\n                case 'frozenfooter':\n                    this.frozenFooterTemplate = item.template;\n                    break;\n                case 'frozencolgroup':\n                    this.frozenColGroupTemplate = item.template;\n                    break;\n            }\n        });\n    }\n    ngOnChanges(simpleChange) {\n        if (simpleChange.value) {\n            this._value = simpleChange.value.currentValue;\n            if (!this.lazy) {\n                this.totalRecords = (this._value ? this._value.length : 0);\n                if (this.sortMode == 'single' && this.sortField)\n                    this.sortSingle();\n                else if (this.sortMode == 'multiple' && this.multiSortMeta)\n                    this.sortMultiple();\n                else if (this.hasFilter()) //sort already filters\n                    this._filter();\n            }\n            this.updateSerializedValue();\n            this.tableService.onUIUpdate(this.value);\n        }\n        if (simpleChange.sortField) {\n            this._sortField = simpleChange.sortField.currentValue;\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if (!this.lazy || this.initialized) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n        if (simpleChange.sortOrder) {\n            this._sortOrder = simpleChange.sortOrder.currentValue;\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if (!this.lazy || this.initialized) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n        if (simpleChange.multiSortMeta) {\n            this._multiSortMeta = simpleChange.multiSortMeta.currentValue;\n            if (this.sortMode === 'multiple') {\n                this.sortMultiple();\n            }\n        }\n        if (simpleChange.selection) {\n            this._selection = simpleChange.selection.currentValue;\n            if (!this.preventSelectionSetterPropagation) {\n                this.updateSelectionKeys();\n                this.tableService.onSelectionChange();\n            }\n            this.preventSelectionSetterPropagation = false;\n        }\n    }\n    get value() {\n        return this._value;\n    }\n    set value(val) {\n        this._value = val;\n    }\n    updateSerializedValue() {\n        this.serializedValue = [];\n        if (this.paginator)\n            this.serializePageNodes();\n        else\n            this.serializeNodes(null, this.filteredNodes || this.value, 0, true);\n    }\n    serializeNodes(parent, nodes, level, visible) {\n        if (nodes && nodes.length) {\n            for (let node of nodes) {\n                node.parent = parent;\n                const rowNode = {\n                    node: node,\n                    parent: parent,\n                    level: level,\n                    visible: visible && (parent ? parent.expanded : true)\n                };\n                this.serializedValue.push(rowNode);\n                if (rowNode.visible && node.expanded) {\n                    this.serializeNodes(node, node.children, level + 1, rowNode.visible);\n                }\n            }\n        }\n    }\n    serializePageNodes() {\n        let data = this.filteredNodes || this.value;\n        this.serializedValue = [];\n        if (data && data.length) {\n            const first = this.lazy ? 0 : this.first;\n            for (let i = first; i < (first + this.rows); i++) {\n                let node = data[i];\n                if (node) {\n                    this.serializedValue.push({\n                        node: node,\n                        parent: null,\n                        level: 0,\n                        visible: true\n                    });\n                    this.serializeNodes(node, node.children, 1, true);\n                }\n            }\n        }\n    }\n    get totalRecords() {\n        return this._totalRecords;\n    }\n    set totalRecords(val) {\n        this._totalRecords = val;\n        this.tableService.onTotalRecordsChange(this._totalRecords);\n    }\n    get sortField() {\n        return this._sortField;\n    }\n    set sortField(val) {\n        this._sortField = val;\n    }\n    get sortOrder() {\n        return this._sortOrder;\n    }\n    set sortOrder(val) {\n        this._sortOrder = val;\n    }\n    get multiSortMeta() {\n        return this._multiSortMeta;\n    }\n    set multiSortMeta(val) {\n        this._multiSortMeta = val;\n    }\n    get selection() {\n        return this._selection;\n    }\n    set selection(val) {\n        this._selection = val;\n    }\n    updateSelectionKeys() {\n        if (this.dataKey && this._selection) {\n            this.selectionKeys = {};\n            if (Array.isArray(this._selection)) {\n                for (let node of this._selection) {\n                    this.selectionKeys[String(ObjectUtils.resolveFieldData(node.data, this.dataKey))] = 1;\n                }\n            }\n            else {\n                this.selectionKeys[String(ObjectUtils.resolveFieldData(this._selection.data, this.dataKey))] = 1;\n            }\n        }\n    }\n    onPageChange(event) {\n        this.first = event.first;\n        this.rows = event.rows;\n        if (this.lazy)\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        else\n            this.serializePageNodes();\n        this.onPage.emit({\n            first: this.first,\n            rows: this.rows\n        });\n        this.tableService.onUIUpdate(this.value);\n        if (this.scrollable) {\n            this.resetScrollTop();\n        }\n    }\n    sort(event) {\n        let originalEvent = event.originalEvent;\n        if (this.sortMode === 'single') {\n            this._sortOrder = (this.sortField === event.field) ? this.sortOrder * -1 : this.defaultSortOrder;\n            this._sortField = event.field;\n            this.sortSingle();\n            if (this.resetPageOnSort && this.scrollable) {\n                this.resetScrollTop();\n            }\n        }\n        if (this.sortMode === 'multiple') {\n            let metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n            let sortMeta = this.getSortMeta(event.field);\n            if (sortMeta) {\n                if (!metaKey) {\n                    this._multiSortMeta = [{ field: event.field, order: sortMeta.order * -1 }];\n                    if (this.resetPageOnSort && this.scrollable) {\n                        this.resetScrollTop();\n                    }\n                }\n                else {\n                    sortMeta.order = sortMeta.order * -1;\n                }\n            }\n            else {\n                if (!metaKey || !this.multiSortMeta) {\n                    this._multiSortMeta = [];\n                    if (this.resetPageOnSort && this.scrollable) {\n                        this.resetScrollTop();\n                    }\n                }\n                this.multiSortMeta.push({ field: event.field, order: this.defaultSortOrder });\n            }\n            this.sortMultiple();\n        }\n    }\n    sortSingle() {\n        if (this.sortField && this.sortOrder) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                this.sortNodes(this.value);\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n            let sortMeta = {\n                field: this.sortField,\n                order: this.sortOrder\n            };\n            this.onSort.emit(sortMeta);\n            this.tableService.onSort(sortMeta);\n            this.updateSerializedValue();\n        }\n    }\n    sortNodes(nodes) {\n        if (!nodes || nodes.length === 0) {\n            return;\n        }\n        if (this.customSort) {\n            this.sortFunction.emit({\n                data: nodes,\n                mode: this.sortMode,\n                field: this.sortField,\n                order: this.sortOrder\n            });\n        }\n        else {\n            nodes.sort((node1, node2) => {\n                let value1 = ObjectUtils.resolveFieldData(node1.data, this.sortField);\n                let value2 = ObjectUtils.resolveFieldData(node2.data, this.sortField);\n                let result = null;\n                if (value1 == null && value2 != null)\n                    result = -1;\n                else if (value1 != null && value2 == null)\n                    result = 1;\n                else if (value1 == null && value2 == null)\n                    result = 0;\n                else if (typeof value1 === 'string' && typeof value2 === 'string')\n                    result = value1.localeCompare(value2, undefined, { numeric: true });\n                else\n                    result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\n                return (this.sortOrder * result);\n            });\n        }\n        for (let node of nodes) {\n            this.sortNodes(node.children);\n        }\n    }\n    sortMultiple() {\n        if (this.multiSortMeta) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                this.sortMultipleNodes(this.value);\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n            this.onSort.emit({\n                multisortmeta: this.multiSortMeta\n            });\n            this.updateSerializedValue();\n            this.tableService.onSort(this.multiSortMeta);\n        }\n    }\n    sortMultipleNodes(nodes) {\n        if (!nodes || nodes.length === 0) {\n            return;\n        }\n        if (this.customSort) {\n            this.sortFunction.emit({\n                data: this.value,\n                mode: this.sortMode,\n                multiSortMeta: this.multiSortMeta\n            });\n        }\n        else {\n            nodes.sort((node1, node2) => {\n                return this.multisortField(node1, node2, this.multiSortMeta, 0);\n            });\n        }\n        for (let node of nodes) {\n            this.sortMultipleNodes(node.children);\n        }\n    }\n    multisortField(node1, node2, multiSortMeta, index) {\n        let value1 = ObjectUtils.resolveFieldData(node1.data, multiSortMeta[index].field);\n        let value2 = ObjectUtils.resolveFieldData(node2.data, multiSortMeta[index].field);\n        let result = null;\n        if (value1 == null && value2 != null)\n            result = -1;\n        else if (value1 != null && value2 == null)\n            result = 1;\n        else if (value1 == null && value2 == null)\n            result = 0;\n        if (typeof value1 == 'string' || value1 instanceof String) {\n            if (value1.localeCompare && (value1 != value2)) {\n                return (multiSortMeta[index].order * value1.localeCompare(value2, undefined, { numeric: true }));\n            }\n        }\n        else {\n            result = (value1 < value2) ? -1 : 1;\n        }\n        if (value1 == value2) {\n            return (multiSortMeta.length - 1) > (index) ? (this.multisortField(node1, node2, multiSortMeta, index + 1)) : 0;\n        }\n        return (multiSortMeta[index].order * result);\n    }\n    getSortMeta(field) {\n        if (this.multiSortMeta && this.multiSortMeta.length) {\n            for (let i = 0; i < this.multiSortMeta.length; i++) {\n                if (this.multiSortMeta[i].field === field) {\n                    return this.multiSortMeta[i];\n                }\n            }\n        }\n        return null;\n    }\n    isSorted(field) {\n        if (this.sortMode === 'single') {\n            return (this.sortField && this.sortField === field);\n        }\n        else if (this.sortMode === 'multiple') {\n            let sorted = false;\n            if (this.multiSortMeta) {\n                for (let i = 0; i < this.multiSortMeta.length; i++) {\n                    if (this.multiSortMeta[i].field == field) {\n                        sorted = true;\n                        break;\n                    }\n                }\n            }\n            return sorted;\n        }\n    }\n    createLazyLoadMetadata() {\n        return {\n            first: this.first,\n            rows: this.rows,\n            sortField: this.sortField,\n            sortOrder: this.sortOrder,\n            filters: this.filters,\n            globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,\n            multiSortMeta: this.multiSortMeta\n        };\n    }\n    resetScrollTop() {\n        if (this.virtualScroll)\n            this.scrollToVirtualIndex(0);\n        else\n            this.scrollTo({ top: 0 });\n    }\n    scrollToVirtualIndex(index) {\n        if (this.scrollableViewChild) {\n            this.scrollableViewChild.scrollToVirtualIndex(index);\n        }\n        if (this.scrollableFrozenViewChild) {\n            this.scrollableFrozenViewChild.scrollToVirtualIndex(index);\n        }\n    }\n    scrollTo(options) {\n        if (this.scrollableViewChild) {\n            this.scrollableViewChild.scrollTo(options);\n        }\n        if (this.scrollableFrozenViewChild) {\n            this.scrollableFrozenViewChild.scrollTo(options);\n        }\n    }\n    isEmpty() {\n        let data = this.filteredNodes || this.value;\n        return data == null || data.length == 0;\n    }\n    getBlockableElement() {\n        return this.el.nativeElement.children[0];\n    }\n    onColumnResizeBegin(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        this.lastResizerHelperX = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft);\n        event.preventDefault();\n    }\n    onColumnResize(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        DomHandler.addClass(this.containerViewChild.nativeElement, 'p-unselectable-text');\n        this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild.nativeElement.offsetHeight + 'px';\n        this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\n        this.resizeHelperViewChild.nativeElement.style.left = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft) + 'px';\n        this.resizeHelperViewChild.nativeElement.style.display = 'block';\n    }\n    onColumnResizeEnd(event, column) {\n        let delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\n        let columnWidth = column.offsetWidth;\n        let newColumnWidth = columnWidth + delta;\n        let minWidth = column.style.minWidth || 15;\n        if (columnWidth + delta > parseInt(minWidth)) {\n            if (this.columnResizeMode === 'fit') {\n                let nextColumn = column.nextElementSibling;\n                while (!nextColumn.offsetParent) {\n                    nextColumn = nextColumn.nextElementSibling;\n                }\n                if (nextColumn) {\n                    let nextColumnWidth = nextColumn.offsetWidth - delta;\n                    let nextColumnMinWidth = nextColumn.style.minWidth || 15;\n                    if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\n                        if (this.scrollable) {\n                            let scrollableView = this.findParentScrollableView(column);\n                            let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body table') || DomHandler.findSingle(scrollableView, '.p-treetable-virtual-scrollable-body table');\n                            let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-header-table');\n                            let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-footer-table');\n                            let resizeColumnIndex = DomHandler.index(column);\n                            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                        }\n                        else {\n                            column.style.width = newColumnWidth + 'px';\n                            if (nextColumn) {\n                                nextColumn.style.width = nextColumnWidth + 'px';\n                            }\n                        }\n                    }\n                }\n            }\n            else if (this.columnResizeMode === 'expand') {\n                if (this.scrollable) {\n                    let scrollableView = this.findParentScrollableView(column);\n                    let scrollableBody = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body') || DomHandler.findSingle(scrollableView, 'cdk-virtual-scroll-viewport');\n                    let scrollableHeader = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-header');\n                    let scrollableFooter = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-footer');\n                    let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body table') || DomHandler.findSingle(scrollableView, 'cdk-virtual-scroll-viewport table');\n                    let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-header-table');\n                    let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-footer-table');\n                    scrollableBodyTable.style.width = scrollableBodyTable.offsetWidth + delta + 'px';\n                    scrollableHeaderTable.style.width = scrollableHeaderTable.offsetWidth + delta + 'px';\n                    if (scrollableFooterTable) {\n                        scrollableFooterTable.style.width = scrollableFooterTable.offsetWidth + delta + 'px';\n                    }\n                    let resizeColumnIndex = DomHandler.index(column);\n                    const scrollableBodyTableWidth = column ? scrollableBodyTable.offsetWidth + delta : newColumnWidth;\n                    const scrollableHeaderTableWidth = column ? scrollableHeaderTable.offsetWidth + delta : newColumnWidth;\n                    const isContainerInViewport = this.containerViewChild.nativeElement.offsetWidth >= scrollableBodyTableWidth;\n                    let setWidth = (container, table, width, isContainerInViewport) => {\n                        if (container && table) {\n                            container.style.width = isContainerInViewport ? width + DomHandler.calculateScrollbarWidth(scrollableBody) + 'px' : 'auto';\n                            table.style.width = width + 'px';\n                        }\n                    };\n                    setWidth(scrollableBody, scrollableBodyTable, scrollableBodyTableWidth, isContainerInViewport);\n                    setWidth(scrollableHeader, scrollableHeaderTable, scrollableHeaderTableWidth, isContainerInViewport);\n                    setWidth(scrollableFooter, scrollableFooterTable, scrollableHeaderTableWidth, isContainerInViewport);\n                    this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\n                    this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\n                    this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\n                }\n                else {\n                    this.tableViewChild.nativeElement.style.width = this.tableViewChild.nativeElement.offsetWidth + delta + 'px';\n                    column.style.width = newColumnWidth + 'px';\n                    let containerWidth = this.tableViewChild.nativeElement.style.width;\n                    this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\n                }\n            }\n            this.onColResize.emit({\n                element: column,\n                delta: delta\n            });\n        }\n        this.resizeHelperViewChild.nativeElement.style.display = 'none';\n        DomHandler.removeClass(this.containerViewChild.nativeElement, 'p-unselectable-text');\n    }\n    findParentScrollableView(column) {\n        if (column) {\n            let parent = column.parentElement;\n            while (parent && !DomHandler.hasClass(parent, 'p-treetable-scrollable-view')) {\n                parent = parent.parentElement;\n            }\n            return parent;\n        }\n        else {\n            return null;\n        }\n    }\n    resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\n        if (table) {\n            let colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\n            if (colGroup) {\n                let col = colGroup.children[resizeColumnIndex];\n                let nextCol = col.nextElementSibling;\n                col.style.width = newColumnWidth + 'px';\n                if (nextCol && nextColumnWidth) {\n                    nextCol.style.width = nextColumnWidth + 'px';\n                }\n            }\n            else {\n                throw \"Scrollable tables require a colgroup to support resizable columns\";\n            }\n        }\n    }\n    onColumnDragStart(event, columnElement) {\n        this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild.nativeElement);\n        this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild.nativeElement);\n        this.draggedColumn = columnElement;\n        event.dataTransfer.setData('text', 'b'); // For firefox\n    }\n    onColumnDragEnter(event, dropHeader) {\n        if (this.reorderableColumns && this.draggedColumn && dropHeader) {\n            event.preventDefault();\n            let containerOffset = DomHandler.getOffset(this.containerViewChild.nativeElement);\n            let dropHeaderOffset = DomHandler.getOffset(dropHeader);\n            if (this.draggedColumn != dropHeader) {\n                let targetLeft = dropHeaderOffset.left - containerOffset.left;\n                let targetTop = containerOffset.top - dropHeaderOffset.top;\n                let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n                this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\n                this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n                if (event.pageX > columnCenter) {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = 1;\n                }\n                else {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = -1;\n                }\n                this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\n                this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\n            }\n            else {\n                event.dataTransfer.dropEffect = 'none';\n            }\n        }\n    }\n    onColumnDragLeave(event) {\n        if (this.reorderableColumns && this.draggedColumn) {\n            event.preventDefault();\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n        }\n    }\n    onColumnDrop(event, dropColumn) {\n        event.preventDefault();\n        if (this.draggedColumn) {\n            let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'ttreorderablecolumn');\n            let dropIndex = DomHandler.indexWithinGroup(dropColumn, 'ttreorderablecolumn');\n            let allowDrop = (dragIndex != dropIndex);\n            if (allowDrop && ((dropIndex - dragIndex == 1 && this.dropPosition === -1) || (dragIndex - dropIndex == 1 && this.dropPosition === 1))) {\n                allowDrop = false;\n            }\n            if (allowDrop && ((dropIndex < dragIndex && this.dropPosition === 1))) {\n                dropIndex = dropIndex + 1;\n            }\n            if (allowDrop && ((dropIndex > dragIndex && this.dropPosition === -1))) {\n                dropIndex = dropIndex - 1;\n            }\n            if (allowDrop) {\n                ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\n                this.onColReorder.emit({\n                    dragIndex: dragIndex,\n                    dropIndex: dropIndex,\n                    columns: this.columns\n                });\n            }\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n            this.draggedColumn.draggable = false;\n            this.draggedColumn = null;\n            this.dropPosition = null;\n        }\n    }\n    handleRowClick(event) {\n        let targetNode = event.originalEvent.target.nodeName;\n        if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' || (DomHandler.hasClass(event.originalEvent.target, 'p-clickable'))) {\n            return;\n        }\n        if (this.selectionMode) {\n            this.preventSelectionSetterPropagation = true;\n            let rowNode = event.rowNode;\n            let selected = this.isSelected(rowNode.node);\n            let metaSelection = this.rowTouched ? false : this.metaKeySelection;\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowNode.node.data, this.dataKey)) : null;\n            if (metaSelection) {\n                let metaKey = event.originalEvent.metaKey || event.originalEvent.ctrlKey;\n                if (selected && metaKey) {\n                    if (this.isSingleSelectionMode()) {\n                        this._selection = null;\n                        this.selectionKeys = {};\n                        this.selectionChange.emit(null);\n                    }\n                    else {\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\n                        this._selection = this.selection.filter((val, i) => i != selectionIndex);\n                        this.selectionChange.emit(this.selection);\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n                    this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                }\n                else {\n                    if (this.isSingleSelectionMode()) {\n                        this._selection = rowNode.node;\n                        this.selectionChange.emit(rowNode.node);\n                        if (dataKeyValue) {\n                            this.selectionKeys = {};\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        if (metaKey) {\n                            this._selection = this.selection || [];\n                        }\n                        else {\n                            this._selection = [];\n                            this.selectionKeys = {};\n                        }\n                        this._selection = [...this.selection, rowNode.node];\n                        this.selectionChange.emit(this.selection);\n                        if (dataKeyValue) {\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                    this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                }\n            }\n            else {\n                if (this.selectionMode === 'single') {\n                    if (selected) {\n                        this._selection = null;\n                        this.selectionKeys = {};\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                    }\n                    else {\n                        this._selection = rowNode.node;\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                        if (dataKeyValue) {\n                            this.selectionKeys = {};\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                }\n                else if (this.selectionMode === 'multiple') {\n                    if (selected) {\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\n                        this._selection = this.selection.filter((val, i) => i != selectionIndex);\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n                    else {\n                        this._selection = this.selection ? [...this.selection, rowNode.node] : [rowNode.node];\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                        if (dataKeyValue) {\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                }\n            }\n            this.tableService.onSelectionChange();\n        }\n        this.rowTouched = false;\n    }\n    handleRowTouchEnd(event) {\n        this.rowTouched = true;\n    }\n    handleRowRightClick(event) {\n        if (this.contextMenu) {\n            const node = event.rowNode.node;\n            if (this.contextMenuSelectionMode === 'separate') {\n                this.contextMenuSelection = node;\n                this.contextMenuSelectionChange.emit(node);\n                this.onContextMenuSelect.emit({ originalEvent: event.originalEvent, node: node });\n                this.contextMenu.show(event.originalEvent);\n                this.tableService.onContextMenu(node);\n            }\n            else if (this.contextMenuSelectionMode === 'joint') {\n                this.preventSelectionSetterPropagation = true;\n                let selected = this.isSelected(node);\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n                if (!selected) {\n                    if (this.isSingleSelectionMode()) {\n                        this.selection = node;\n                        this.selectionChange.emit(node);\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        this.selection = [node];\n                        this.selectionChange.emit(this.selection);\n                    }\n                    if (dataKeyValue) {\n                        this.selectionKeys[dataKeyValue] = 1;\n                    }\n                }\n                this.contextMenu.show(event.originalEvent);\n                this.onContextMenuSelect.emit({ originalEvent: event.originalEvent, node: node });\n            }\n        }\n    }\n    toggleNodeWithCheckbox(event) {\n        this.selection = this.selection || [];\n        this.preventSelectionSetterPropagation = true;\n        let node = event.rowNode.node;\n        let selected = this.isSelected(node);\n        if (selected) {\n            this.propagateSelectionDown(node, false);\n            if (event.rowNode.parent) {\n                this.propagateSelectionUp(node.parent, false);\n            }\n            this.selectionChange.emit(this.selection);\n            this.onNodeUnselect.emit({ originalEvent: event, node: node });\n        }\n        else {\n            this.propagateSelectionDown(node, true);\n            if (event.rowNode.parent) {\n                this.propagateSelectionUp(node.parent, true);\n            }\n            this.selectionChange.emit(this.selection);\n            this.onNodeSelect.emit({ originalEvent: event, node: node });\n        }\n        this.tableService.onSelectionChange();\n    }\n    toggleNodesWithCheckbox(event, check) {\n        let data = this.filteredNodes || this.value;\n        this._selection = check && data ? data.slice() : [];\n        if (check) {\n            if (data && data.length) {\n                for (let node of data) {\n                    this.propagateSelectionDown(node, true);\n                }\n            }\n        }\n        else {\n            this._selection = [];\n            this.selectionKeys = {};\n        }\n        this.preventSelectionSetterPropagation = true;\n        this.selectionChange.emit(this._selection);\n        this.tableService.onSelectionChange();\n        this.onHeaderCheckboxToggle.emit({ originalEvent: event, checked: check });\n    }\n    propagateSelectionUp(node, select) {\n        if (node.children && node.children.length) {\n            let selectedChildCount = 0;\n            let childPartialSelected = false;\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n            for (let child of node.children) {\n                if (this.isSelected(child))\n                    selectedChildCount++;\n                else if (child.partialSelected)\n                    childPartialSelected = true;\n            }\n            if (select && selectedChildCount == node.children.length) {\n                this._selection = [...this.selection || [], node];\n                node.partialSelected = false;\n                if (dataKeyValue) {\n                    this.selectionKeys[dataKeyValue] = 1;\n                }\n            }\n            else {\n                if (!select) {\n                    let index = this.findIndexInSelection(node);\n                    if (index >= 0) {\n                        this._selection = this.selection.filter((val, i) => i != index);\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n                }\n                if (childPartialSelected || selectedChildCount > 0 && selectedChildCount != node.children.length)\n                    node.partialSelected = true;\n                else\n                    node.partialSelected = false;\n            }\n        }\n        let parent = node.parent;\n        if (parent) {\n            this.propagateSelectionUp(parent, select);\n        }\n    }\n    propagateSelectionDown(node, select) {\n        let index = this.findIndexInSelection(node);\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n        if (select && index == -1) {\n            this._selection = [...this.selection || [], node];\n            if (dataKeyValue) {\n                this.selectionKeys[dataKeyValue] = 1;\n            }\n        }\n        else if (!select && index > -1) {\n            this._selection = this.selection.filter((val, i) => i != index);\n            if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n            }\n        }\n        node.partialSelected = false;\n        if (node.children && node.children.length) {\n            for (let child of node.children) {\n                this.propagateSelectionDown(child, select);\n            }\n        }\n    }\n    isSelected(node) {\n        if (node && this.selection) {\n            if (this.dataKey) {\n                return this.selectionKeys[ObjectUtils.resolveFieldData(node.data, this.dataKey)] !== undefined;\n            }\n            else {\n                if (this.selection instanceof Array)\n                    return this.findIndexInSelection(node) > -1;\n                else\n                    return this.equals(node, this.selection);\n            }\n        }\n        return false;\n    }\n    findIndexInSelection(node) {\n        let index = -1;\n        if (this.selection && this.selection.length) {\n            for (let i = 0; i < this.selection.length; i++) {\n                if (this.equals(node, this.selection[i])) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n        return index;\n    }\n    isSingleSelectionMode() {\n        return this.selectionMode === 'single';\n    }\n    isMultipleSelectionMode() {\n        return this.selectionMode === 'multiple';\n    }\n    equals(node1, node2) {\n        return this.compareSelectionBy === 'equals' ? (node1 === node2) : ObjectUtils.equals(node1.data, node2.data, this.dataKey);\n    }\n    filter(value, field, matchMode) {\n        if (this.filterTimeout) {\n            clearTimeout(this.filterTimeout);\n        }\n        if (!this.isFilterBlank(value)) {\n            this.filters[field] = { value: value, matchMode: matchMode };\n        }\n        else if (this.filters[field]) {\n            delete this.filters[field];\n        }\n        this.filterTimeout = setTimeout(() => {\n            this._filter();\n            this.filterTimeout = null;\n        }, this.filterDelay);\n    }\n    filterGlobal(value, matchMode) {\n        this.filter(value, 'global', matchMode);\n    }\n    isFilterBlank(filter) {\n        if (filter !== null && filter !== undefined) {\n            if ((typeof filter === 'string' && filter.trim().length == 0) || (filter instanceof Array && filter.length == 0))\n                return true;\n            else\n                return false;\n        }\n        return true;\n    }\n    _filter() {\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            if (!this.value) {\n                return;\n            }\n            if (!this.hasFilter()) {\n                this.filteredNodes = null;\n                if (this.paginator) {\n                    this.totalRecords = this.value ? this.value.length : 0;\n                }\n            }\n            else {\n                let globalFilterFieldsArray;\n                if (this.filters['global']) {\n                    if (!this.columns && !this.globalFilterFields)\n                        throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');\n                    else\n                        globalFilterFieldsArray = this.globalFilterFields || this.columns;\n                }\n                this.filteredNodes = [];\n                const isStrictMode = this.filterMode === 'strict';\n                let isValueChanged = false;\n                for (let node of this.value) {\n                    let copyNode = Object.assign({}, node);\n                    let localMatch = true;\n                    let globalMatch = false;\n                    let paramsWithoutNode;\n                    for (let prop in this.filters) {\n                        if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\n                            let filterMeta = this.filters[prop];\n                            let filterField = prop;\n                            let filterValue = filterMeta.value;\n                            let filterMatchMode = filterMeta.matchMode || 'startsWith';\n                            let filterConstraint = this.filterService.filters[filterMatchMode];\n                            paramsWithoutNode = { filterField, filterValue, filterConstraint, isStrictMode };\n                            if ((isStrictMode && !(this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode))) ||\n                                (!isStrictMode && !(this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode)))) {\n                                localMatch = false;\n                            }\n                            if (!localMatch) {\n                                break;\n                            }\n                        }\n                    }\n                    if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\n                        for (let j = 0; j < globalFilterFieldsArray.length; j++) {\n                            let copyNodeForGlobal = Object.assign({}, copyNode);\n                            let filterField = globalFilterFieldsArray[j].field || globalFilterFieldsArray[j];\n                            let filterValue = this.filters['global'].value;\n                            let filterConstraint = this.filterService.filters[this.filters['global'].matchMode];\n                            paramsWithoutNode = { filterField, filterValue, filterConstraint, isStrictMode };\n                            if ((isStrictMode && (this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode) || this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode))) ||\n                                (!isStrictMode && (this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode) || this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode)))) {\n                                globalMatch = true;\n                                copyNode = copyNodeForGlobal;\n                            }\n                        }\n                    }\n                    let matches = localMatch;\n                    if (this.filters['global']) {\n                        matches = localMatch && globalMatch;\n                    }\n                    if (matches) {\n                        this.filteredNodes.push(copyNode);\n                    }\n                    isValueChanged = isValueChanged || !localMatch || globalMatch || (localMatch && this.filteredNodes.length > 0) || (!globalMatch && this.filteredNodes.length === 0);\n                }\n                if (!isValueChanged) {\n                    this.filteredNodes = null;\n                }\n                if (this.paginator) {\n                    this.totalRecords = this.filteredNodes ? this.filteredNodes.length : this.value ? this.value.length : 0;\n                }\n            }\n        }\n        this.first = 0;\n        const filteredValue = this.filteredNodes || this.value;\n        this.onFilter.emit({\n            filters: this.filters,\n            filteredValue: filteredValue\n        });\n        this.tableService.onUIUpdate(filteredValue);\n        this.updateSerializedValue();\n        if (this.scrollable) {\n            this.resetScrollTop();\n        }\n    }\n    findFilteredNodes(node, paramsWithoutNode) {\n        if (node) {\n            let matched = false;\n            if (node.children) {\n                let childNodes = [...node.children];\n                node.children = [];\n                for (let childNode of childNodes) {\n                    let copyChildNode = Object.assign({}, childNode);\n                    if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                        matched = true;\n                        node.children.push(copyChildNode);\n                    }\n                }\n            }\n            if (matched) {\n                return true;\n            }\n        }\n    }\n    isFilterMatched(node, { filterField, filterValue, filterConstraint, isStrictMode }) {\n        let matched = false;\n        let dataFieldValue = ObjectUtils.resolveFieldData(node.data, filterField);\n        if (filterConstraint(dataFieldValue, filterValue, this.filterLocale)) {\n            matched = true;\n        }\n        if (!matched || (isStrictMode && !this.isNodeLeaf(node))) {\n            matched = this.findFilteredNodes(node, { filterField, filterValue, filterConstraint, isStrictMode }) || matched;\n        }\n        return matched;\n    }\n    isNodeLeaf(node) {\n        return node.leaf === false ? false : !(node.children && node.children.length);\n    }\n    hasFilter() {\n        let empty = true;\n        for (let prop in this.filters) {\n            if (this.filters.hasOwnProperty(prop)) {\n                empty = false;\n                break;\n            }\n        }\n        return !empty;\n    }\n    reset() {\n        this._sortField = null;\n        this._sortOrder = 1;\n        this._multiSortMeta = null;\n        this.tableService.onSort(null);\n        this.filteredNodes = null;\n        this.filters = {};\n        this.first = 0;\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            this.totalRecords = (this._value ? this._value.length : 0);\n        }\n    }\n    updateEditingCell(cell, data, field) {\n        this.editingCell = cell;\n        this.editingCellData = data;\n        this.editingCellField = field;\n        this.bindDocumentEditListener();\n    }\n    isEditingCellValid() {\n        return (this.editingCell && DomHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length === 0);\n    }\n    bindDocumentEditListener() {\n        if (!this.documentEditListener) {\n            this.documentEditListener = (event) => {\n                if (this.editingCell && !this.editingCellClick && this.isEditingCellValid()) {\n                    DomHandler.removeClass(this.editingCell, 'p-cell-editing');\n                    this.editingCell = null;\n                    this.onEditComplete.emit({ field: this.editingCellField, data: this.editingCellData });\n                    this.editingCellField = null;\n                    this.editingCellData = null;\n                    this.unbindDocumentEditListener();\n                }\n                this.editingCellClick = false;\n            };\n            document.addEventListener('click', this.documentEditListener);\n        }\n    }\n    unbindDocumentEditListener() {\n        if (this.documentEditListener) {\n            document.removeEventListener('click', this.documentEditListener);\n            this.documentEditListener = null;\n        }\n    }\n    ngOnDestroy() {\n        this.unbindDocumentEditListener();\n        this.editingCell = null;\n        this.editingCellField = null;\n        this.editingCellData = null;\n        this.initialized = null;\n    }\n}\nTreeTable.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TreeTable, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: TreeTableService }, { token: i1.FilterService }], target: i0.ɵɵFactoryTarget.Component });\nTreeTable.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: TreeTable, selector: \"p-treeTable\", inputs: { columns: \"columns\", style: \"style\", styleClass: \"styleClass\", tableStyle: \"tableStyle\", tableStyleClass: \"tableStyleClass\", autoLayout: \"autoLayout\", lazy: \"lazy\", lazyLoadOnInit: \"lazyLoadOnInit\", paginator: \"paginator\", rows: \"rows\", first: \"first\", pageLinks: \"pageLinks\", rowsPerPageOptions: \"rowsPerPageOptions\", alwaysShowPaginator: \"alwaysShowPaginator\", paginatorPosition: \"paginatorPosition\", paginatorDropdownAppendTo: \"paginatorDropdownAppendTo\", currentPageReportTemplate: \"currentPageReportTemplate\", showCurrentPageReport: \"showCurrentPageReport\", showJumpToPageDropdown: \"showJumpToPageDropdown\", showFirstLastIcon: \"showFirstLastIcon\", showPageLinks: \"showPageLinks\", defaultSortOrder: \"defaultSortOrder\", sortMode: \"sortMode\", resetPageOnSort: \"resetPageOnSort\", customSort: \"customSort\", selectionMode: \"selectionMode\", contextMenuSelection: \"contextMenuSelection\", contextMenuSelectionMode: \"contextMenuSelectionMode\", dataKey: \"dataKey\", metaKeySelection: \"metaKeySelection\", compareSelectionBy: \"compareSelectionBy\", rowHover: \"rowHover\", loading: \"loading\", loadingIcon: \"loadingIcon\", showLoader: \"showLoader\", scrollable: \"scrollable\", scrollHeight: \"scrollHeight\", virtualScroll: \"virtualScroll\", virtualScrollDelay: \"virtualScrollDelay\", virtualRowHeight: \"virtualRowHeight\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\", frozenWidth: \"frozenWidth\", frozenColumns: \"frozenColumns\", resizableColumns: \"resizableColumns\", columnResizeMode: \"columnResizeMode\", reorderableColumns: \"reorderableColumns\", contextMenu: \"contextMenu\", rowTrackBy: \"rowTrackBy\", filters: \"filters\", globalFilterFields: \"globalFilterFields\", filterDelay: \"filterDelay\", filterMode: \"filterMode\", filterLocale: \"filterLocale\", value: \"value\", totalRecords: \"totalRecords\", sortField: \"sortField\", sortOrder: \"sortOrder\", multiSortMeta: \"multiSortMeta\", selection: \"selection\" }, outputs: { selectionChange: \"selectionChange\", contextMenuSelectionChange: \"contextMenuSelectionChange\", onFilter: \"onFilter\", onNodeExpand: \"onNodeExpand\", onNodeCollapse: \"onNodeCollapse\", onPage: \"onPage\", onSort: \"onSort\", onLazyLoad: \"onLazyLoad\", sortFunction: \"sortFunction\", onColResize: \"onColResize\", onColReorder: \"onColReorder\", onNodeSelect: \"onNodeSelect\", onNodeUnselect: \"onNodeUnselect\", onContextMenuSelect: \"onContextMenuSelect\", onHeaderCheckboxToggle: \"onHeaderCheckboxToggle\", onEditInit: \"onEditInit\", onEditComplete: \"onEditComplete\", onEditCancel: \"onEditCancel\" }, providers: [TreeTableService], queries: [{ propertyName: \"templates\", predicate: PrimeTemplate }], viewQueries: [{ propertyName: \"containerViewChild\", first: true, predicate: [\"container\"], descendants: true }, { propertyName: \"resizeHelperViewChild\", first: true, predicate: [\"resizeHelper\"], descendants: true }, { propertyName: \"reorderIndicatorUpViewChild\", first: true, predicate: [\"reorderIndicatorUp\"], descendants: true }, { propertyName: \"reorderIndicatorDownViewChild\", first: true, predicate: [\"reorderIndicatorDown\"], descendants: true }, { propertyName: \"tableViewChild\", first: true, predicate: [\"table\"], descendants: true }, { propertyName: \"scrollableViewChild\", first: true, predicate: [\"scrollableView\"], descendants: true }, { propertyName: \"scrollableFrozenViewChild\", first: true, predicate: [\"scrollableFrozenView\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n        <div #container [ngStyle]=\"style\" [class]=\"styleClass\" data-scrollselectors=\".p-treetable-scrollable-body\"\n                [ngClass]=\"{'p-treetable p-component': true,\n                'p-treetable-hoverable-rows': (rowHover||(selectionMode === 'single' || selectionMode === 'multiple')),\n                'p-treetable-auto-layout': autoLayout,\n                'p-treetable-resizable': resizableColumns,\n                'p-treetable-resizable-fit': (resizableColumns && columnResizeMode === 'fit'),\n                'p-treetable-flex-scrollable': (scrollable && scrollHeight === 'flex')}\">\n            <div class=\"p-treetable-loading\" *ngIf=\"loading && showLoader\">\n                <div class=\"p-treetable-loading-overlay p-component-overlay\">\n                    <i [class]=\"'p-treetable-loading-icon pi-spin ' + loadingIcon\"></i>\n                </div>\n            </div>\n            <div *ngIf=\"captionTemplate\" class=\"p-treetable-header\">\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"p-paginator-top\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showFirstLastIcon]=\"showFirstLastIcon\" [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\" [showJumpToPageDropdown]=\"showJumpToPageDropdown\" [showPageLinks]=\"showPageLinks\"></p-paginator>\n\n            <div class=\"p-treetable-wrapper\" *ngIf=\"!scrollable\">\n                <table #table [ngClass]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container>\n                    </thead>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"bodyTemplate\"></tbody>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n\n            <div class=\"p-treetable-scrollable-wrapper\" *ngIf=\"scrollable\">\n               <div class=\"p-treetable-scrollable-view p-treetable-frozen-view\" *ngIf=\"frozenColumns||frozenBodyTemplate\" #scrollableFrozenView [ttScrollableView]=\"frozenColumns\" [frozen]=\"true\" [ngStyle]=\"{width: frozenWidth}\" [scrollHeight]=\"scrollHeight\"></div>\n               <div class=\"p-treetable-scrollable-view\" #scrollableView [ttScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\" [ngStyle]=\"{left: frozenWidth, width: 'calc(100% - '+frozenWidth+')'}\"></div>\n            </div>\n\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"p-paginator-bottom\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showFirstLastIcon]=\"showFirstLastIcon\" [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\" [showJumpToPageDropdown]=\"showJumpToPageDropdown\" [showPageLinks]=\"showPageLinks\"></p-paginator>\n            <div *ngIf=\"summaryTemplate\" class=\"p-treetable-footer\">\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n            </div>\n\n            <div #resizeHelper class=\"p-column-resizer-helper\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\n\n            <span #reorderIndicatorUp class=\"pi pi-arrow-down p-treetable-reorder-indicator-up\" *ngIf=\"reorderableColumns\"></span>\n            <span #reorderIndicatorDown class=\"pi pi-arrow-up p-treetable-reorder-indicator-down\" *ngIf=\"reorderableColumns\"></span>\n        </div>\n    `, isInline: true, styles: [\".p-treetable{position:relative}.p-treetable table{border-collapse:collapse;width:100%;table-layout:fixed}.p-treetable .p-sortable-column{cursor:pointer;-webkit-user-select:none;-ms-user-select:none;user-select:none}.p-treetable .p-sortable-column .p-column-title,.p-treetable .p-sortable-column .p-sortable-column-badge,.p-treetable .p-sortable-column .p-sortable-column-icon{vertical-align:middle}.p-treetable .p-sortable-column .p-sortable-column-badge{display:inline-flex;align-items:center;justify-content:center}.p-treetable-auto-layout>.p-treetable-wrapper{overflow-x:auto}.p-treetable-auto-layout>.p-treetable-wrapper>table{table-layout:auto}.p-treetable-hoverable-rows .p-treetable-tbody>tr{cursor:pointer}.p-treetable-toggler{cursor:pointer;-webkit-user-select:none;-ms-user-select:none;user-select:none;display:inline-flex;align-items:center;justify-content:center;overflow:hidden;position:relative}.p-treetable-toggler,p-treetabletoggler+p-treetablecheckbox+span,p-treetabletoggler+p-treetablecheckbox .p-checkbox{vertical-align:middle}.p-treetable-scrollable-wrapper{position:relative}.p-treetable-scrollable-footer,.p-treetable-scrollable-header{overflow:hidden}.p-treetable-scrollable-body{overflow:auto;position:relative}.p-treetable-scrollable-body>table>.p-treetable-tbody>tr:first-child>td{border-top:0}.p-treetable-virtual-table{position:absolute}.p-treetable-frozen-view .p-treetable-scrollable-body{overflow:hidden}.p-treetable-frozen-view>.p-treetable-scrollable-body>table>.p-treetable-tbody>tr>td:last-child{border-right:0}.p-treetable-unfrozen-view{position:absolute;top:0}.p-treetable-flex-scrollable,.p-treetable-flex-scrollable .p-treetable-scrollable-view,.p-treetable-flex-scrollable .p-treetable-scrollable-wrapper{display:flex;flex-direction:column;flex:1;height:100%}.p-treetable-flex-scrollable .p-treetable-scrollable-body{flex:1}.p-treetable-resizable>.p-treetable-wrapper{overflow-x:auto}.p-treetable-resizable .p-treetable-tbody>tr>td,.p-treetable-resizable .p-treetable-tfoot>tr>td,.p-treetable-resizable .p-treetable-thead>tr>th{overflow:hidden}.p-treetable-resizable .p-resizable-column{background-clip:padding-box;position:relative}.p-treetable-resizable-fit .p-resizable-column:last-child .p-column-resizer{display:none}.p-treetable .p-column-resizer{display:block;position:absolute!important;top:0;right:0;margin:0;width:.5rem;height:100%;padding:0;cursor:col-resize;border:1px solid transparent}.p-treetable .p-column-resizer-helper{width:1px;position:absolute;z-index:10;display:none}.p-treetable .p-row-editor-cancel,.p-treetable .p-row-editor-init,.p-treetable .p-row-editor-save,.p-treetable .p-row-toggler{display:inline-flex;align-items:center;justify-content:center;overflow:hidden;position:relative}.p-treetable-reorder-indicator-down,.p-treetable-reorder-indicator-up{position:absolute;display:none}[ttReorderableColumn]{cursor:move}.p-treetable .p-treetable-loading-overlay{position:absolute;display:flex;align-items:center;justify-content:center;z-index:2}\"], components: [{ type: i0.forwardRef(function () { return i2.Paginator; }), selector: \"p-paginator\", inputs: [\"pageLinkSize\", \"style\", \"styleClass\", \"alwaysShow\", \"templateLeft\", \"templateRight\", \"dropdownAppendTo\", \"dropdownScrollHeight\", \"currentPageReportTemplate\", \"showCurrentPageReport\", \"showFirstLastIcon\", \"totalRecords\", \"rows\", \"rowsPerPageOptions\", \"showJumpToPageDropdown\", \"showPageLinks\", \"dropdownItemTemplate\", \"first\"], outputs: [\"onPageChange\"] }, { type: i0.forwardRef(function () { return TTBody; }), selector: \"[pTreeTableBody]\", inputs: [\"pTreeTableBody\", \"pTreeTableBodyTemplate\", \"frozen\"] }, { type: i0.forwardRef(function () { return TTScrollableView; }), selector: \"[ttScrollableView]\", inputs: [\"ttScrollableView\", \"frozen\", \"scrollHeight\"] }], directives: [{ type: i0.forwardRef(function () { return i3.NgStyle; }), selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { type: i0.forwardRef(function () { return i3.NgClass; }), selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i0.forwardRef(function () { return i3.NgIf; }), selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i0.forwardRef(function () { return i3.NgTemplateOutlet; }), selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TreeTable, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-treeTable',\n                    template: `\n        <div #container [ngStyle]=\"style\" [class]=\"styleClass\" data-scrollselectors=\".p-treetable-scrollable-body\"\n                [ngClass]=\"{'p-treetable p-component': true,\n                'p-treetable-hoverable-rows': (rowHover||(selectionMode === 'single' || selectionMode === 'multiple')),\n                'p-treetable-auto-layout': autoLayout,\n                'p-treetable-resizable': resizableColumns,\n                'p-treetable-resizable-fit': (resizableColumns && columnResizeMode === 'fit'),\n                'p-treetable-flex-scrollable': (scrollable && scrollHeight === 'flex')}\">\n            <div class=\"p-treetable-loading\" *ngIf=\"loading && showLoader\">\n                <div class=\"p-treetable-loading-overlay p-component-overlay\">\n                    <i [class]=\"'p-treetable-loading-icon pi-spin ' + loadingIcon\"></i>\n                </div>\n            </div>\n            <div *ngIf=\"captionTemplate\" class=\"p-treetable-header\">\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"p-paginator-top\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showFirstLastIcon]=\"showFirstLastIcon\" [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\" [showJumpToPageDropdown]=\"showJumpToPageDropdown\" [showPageLinks]=\"showPageLinks\"></p-paginator>\n\n            <div class=\"p-treetable-wrapper\" *ngIf=\"!scrollable\">\n                <table #table [ngClass]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container>\n                    </thead>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"bodyTemplate\"></tbody>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n\n            <div class=\"p-treetable-scrollable-wrapper\" *ngIf=\"scrollable\">\n               <div class=\"p-treetable-scrollable-view p-treetable-frozen-view\" *ngIf=\"frozenColumns||frozenBodyTemplate\" #scrollableFrozenView [ttScrollableView]=\"frozenColumns\" [frozen]=\"true\" [ngStyle]=\"{width: frozenWidth}\" [scrollHeight]=\"scrollHeight\"></div>\n               <div class=\"p-treetable-scrollable-view\" #scrollableView [ttScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\" [ngStyle]=\"{left: frozenWidth, width: 'calc(100% - '+frozenWidth+')'}\"></div>\n            </div>\n\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"p-paginator-bottom\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showFirstLastIcon]=\"showFirstLastIcon\" [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\" [showJumpToPageDropdown]=\"showJumpToPageDropdown\" [showPageLinks]=\"showPageLinks\"></p-paginator>\n            <div *ngIf=\"summaryTemplate\" class=\"p-treetable-footer\">\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n            </div>\n\n            <div #resizeHelper class=\"p-column-resizer-helper\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\n\n            <span #reorderIndicatorUp class=\"pi pi-arrow-down p-treetable-reorder-indicator-up\" *ngIf=\"reorderableColumns\"></span>\n            <span #reorderIndicatorDown class=\"pi pi-arrow-up p-treetable-reorder-indicator-down\" *ngIf=\"reorderableColumns\"></span>\n        </div>\n    `,\n                    providers: [TreeTableService],\n                    encapsulation: ViewEncapsulation.None,\n                    styleUrls: ['./treetable.css']\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: TreeTableService }, { type: i1.FilterService }]; }, propDecorators: { columns: [{\n                type: Input\n            }], style: [{\n                type: Input\n            }], styleClass: [{\n                type: Input\n            }], tableStyle: [{\n                type: Input\n            }], tableStyleClass: [{\n                type: Input\n            }], autoLayout: [{\n                type: Input\n            }], lazy: [{\n                type: Input\n            }], lazyLoadOnInit: [{\n                type: Input\n            }], paginator: [{\n                type: Input\n            }], rows: [{\n                type: Input\n            }], first: [{\n                type: Input\n            }], pageLinks: [{\n                type: Input\n            }], rowsPerPageOptions: [{\n                type: Input\n            }], alwaysShowPaginator: [{\n                type: Input\n            }], paginatorPosition: [{\n                type: Input\n            }], paginatorDropdownAppendTo: [{\n                type: Input\n            }], currentPageReportTemplate: [{\n                type: Input\n            }], showCurrentPageReport: [{\n                type: Input\n            }], showJumpToPageDropdown: [{\n                type: Input\n            }], showFirstLastIcon: [{\n                type: Input\n            }], showPageLinks: [{\n                type: Input\n            }], defaultSortOrder: [{\n                type: Input\n            }], sortMode: [{\n                type: Input\n            }], resetPageOnSort: [{\n                type: Input\n            }], customSort: [{\n                type: Input\n            }], selectionMode: [{\n                type: Input\n            }], selectionChange: [{\n                type: Output\n            }], contextMenuSelection: [{\n                type: Input\n            }], contextMenuSelectionChange: [{\n                type: Output\n            }], contextMenuSelectionMode: [{\n                type: Input\n            }], dataKey: [{\n                type: Input\n            }], metaKeySelection: [{\n                type: Input\n            }], compareSelectionBy: [{\n                type: Input\n            }], rowHover: [{\n                type: Input\n            }], loading: [{\n                type: Input\n            }], loadingIcon: [{\n                type: Input\n            }], showLoader: [{\n                type: Input\n            }], scrollable: [{\n                type: Input\n            }], scrollHeight: [{\n                type: Input\n            }], virtualScroll: [{\n                type: Input\n            }], virtualScrollDelay: [{\n                type: Input\n            }], virtualRowHeight: [{\n                type: Input\n            }], minBufferPx: [{\n                type: Input\n            }], maxBufferPx: [{\n                type: Input\n            }], frozenWidth: [{\n                type: Input\n            }], frozenColumns: [{\n                type: Input\n            }], resizableColumns: [{\n                type: Input\n            }], columnResizeMode: [{\n                type: Input\n            }], reorderableColumns: [{\n                type: Input\n            }], contextMenu: [{\n                type: Input\n            }], rowTrackBy: [{\n                type: Input\n            }], filters: [{\n                type: Input\n            }], globalFilterFields: [{\n                type: Input\n            }], filterDelay: [{\n                type: Input\n            }], filterMode: [{\n                type: Input\n            }], filterLocale: [{\n                type: Input\n            }], onFilter: [{\n                type: Output\n            }], onNodeExpand: [{\n                type: Output\n            }], onNodeCollapse: [{\n                type: Output\n            }], onPage: [{\n                type: Output\n            }], onSort: [{\n                type: Output\n            }], onLazyLoad: [{\n                type: Output\n            }], sortFunction: [{\n                type: Output\n            }], onColResize: [{\n                type: Output\n            }], onColReorder: [{\n                type: Output\n            }], onNodeSelect: [{\n                type: Output\n            }], onNodeUnselect: [{\n                type: Output\n            }], onContextMenuSelect: [{\n                type: Output\n            }], onHeaderCheckboxToggle: [{\n                type: Output\n            }], onEditInit: [{\n                type: Output\n            }], onEditComplete: [{\n                type: Output\n            }], onEditCancel: [{\n                type: Output\n            }], containerViewChild: [{\n                type: ViewChild,\n                args: ['container']\n            }], resizeHelperViewChild: [{\n                type: ViewChild,\n                args: ['resizeHelper']\n            }], reorderIndicatorUpViewChild: [{\n                type: ViewChild,\n                args: ['reorderIndicatorUp']\n            }], reorderIndicatorDownViewChild: [{\n                type: ViewChild,\n                args: ['reorderIndicatorDown']\n            }], tableViewChild: [{\n                type: ViewChild,\n                args: ['table']\n            }], scrollableViewChild: [{\n                type: ViewChild,\n                args: ['scrollableView']\n            }], scrollableFrozenViewChild: [{\n                type: ViewChild,\n                args: ['scrollableFrozenView']\n            }], templates: [{\n                type: ContentChildren,\n                args: [PrimeTemplate]\n            }], value: [{\n                type: Input\n            }], totalRecords: [{\n                type: Input\n            }], sortField: [{\n                type: Input\n            }], sortOrder: [{\n                type: Input\n            }], multiSortMeta: [{\n                type: Input\n            }], selection: [{\n                type: Input\n            }] } });\nclass TTBody {\n    constructor(tt, treeTableService, cd) {\n        this.tt = tt;\n        this.treeTableService = treeTableService;\n        this.cd = cd;\n        this.subscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n            if (this.tt.virtualScroll) {\n                this.cd.detectChanges();\n            }\n        });\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\nTTBody.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TTBody, deps: [{ token: TreeTable }, { token: TreeTableService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nTTBody.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: TTBody, selector: \"[pTreeTableBody]\", inputs: { columns: [\"pTreeTableBody\", \"columns\"], template: [\"pTreeTableBodyTemplate\", \"template\"], frozen: \"frozen\" }, ngImport: i0, template: `\n        <ng-container *ngIf=\"!tt.virtualScroll\">\n            <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"tt.serializedValue\" [ngForTrackBy]=\"tt.rowTrackBy\">\n                <ng-container *ngIf=\"serializedNode.visible\">\n                    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\"></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"tt.virtualScroll\">\n            <ng-template cdkVirtualFor let-serializedNode let-rowIndex=\"index\" [cdkVirtualForOf]=\"tt.serializedValue\" [cdkVirtualForTrackBy]=\"tt.rowTrackBy\" [cdkVirtualForTemplateCacheSize]=\"0\">\n                <ng-container *ngIf=\"serializedNode.visible\">\n                    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\"></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"tt.isEmpty()\">\n            <ng-container *ngTemplateOutlet=\"tt.emptyMessageTemplate; context: {$implicit: columns, frozen: frozen}\"></ng-container>\n        </ng-container>\n    `, isInline: true, directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i3.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }, { type: i4.CdkVirtualForOf, selector: \"[cdkVirtualFor][cdkVirtualForOf]\", inputs: [\"cdkVirtualForOf\", \"cdkVirtualForTrackBy\", \"cdkVirtualForTemplate\", \"cdkVirtualForTemplateCacheSize\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TTBody, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[pTreeTableBody]',\n                    template: `\n        <ng-container *ngIf=\"!tt.virtualScroll\">\n            <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"tt.serializedValue\" [ngForTrackBy]=\"tt.rowTrackBy\">\n                <ng-container *ngIf=\"serializedNode.visible\">\n                    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\"></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"tt.virtualScroll\">\n            <ng-template cdkVirtualFor let-serializedNode let-rowIndex=\"index\" [cdkVirtualForOf]=\"tt.serializedValue\" [cdkVirtualForTrackBy]=\"tt.rowTrackBy\" [cdkVirtualForTemplateCacheSize]=\"0\">\n                <ng-container *ngIf=\"serializedNode.visible\">\n                    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\"></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"tt.isEmpty()\">\n            <ng-container *ngTemplateOutlet=\"tt.emptyMessageTemplate; context: {$implicit: columns, frozen: frozen}\"></ng-container>\n        </ng-container>\n    `,\n                    encapsulation: ViewEncapsulation.None\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: TreeTableService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { columns: [{\n                type: Input,\n                args: [\"pTreeTableBody\"]\n            }], template: [{\n                type: Input,\n                args: [\"pTreeTableBodyTemplate\"]\n            }], frozen: [{\n                type: Input\n            }] } });\nclass TTScrollableView {\n    constructor(tt, el, zone) {\n        this.tt = tt;\n        this.el = el;\n        this.zone = zone;\n    }\n    get scrollHeight() {\n        return this._scrollHeight;\n    }\n    set scrollHeight(val) {\n        this._scrollHeight = val;\n        if (val != null && (val.includes('%') || val.includes('calc'))) {\n            console.log('Percentage scroll height calculation is removed in favor of the more performant CSS based flex mode, use scrollHeight=\"flex\" instead.');\n        }\n        if (this.tt.virtualScroll && this.virtualScrollBody) {\n            this.virtualScrollBody.ngOnInit();\n        }\n    }\n    ngAfterViewInit() {\n        if (!this.frozen) {\n            if (this.tt.frozenColumns || this.tt.frozenBodyTemplate) {\n                DomHandler.addClass(this.el.nativeElement, 'p-treetable-unfrozen-view');\n            }\n            let frozenView = this.el.nativeElement.previousElementSibling;\n            if (frozenView) {\n                if (this.tt.virtualScroll)\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-treetable-virtual-scrollable-body');\n                else\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-treetable-scrollable-body');\n            }\n            let scrollBarWidth = DomHandler.calculateScrollbarWidth();\n            this.scrollHeaderBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n            if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\n                this.scrollFooterBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n            }\n        }\n        else {\n            if (this.scrollableAlignerViewChild && this.scrollableAlignerViewChild.nativeElement) {\n                this.scrollableAlignerViewChild.nativeElement.style.height = DomHandler.calculateScrollbarHeight() + 'px';\n            }\n        }\n        this.bindEvents();\n    }\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n                this.headerScrollListener = this.onHeaderScroll.bind(this);\n                this.scrollHeaderBoxViewChild.nativeElement.addEventListener('scroll', this.headerScrollListener);\n            }\n            if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n                this.footerScrollListener = this.onFooterScroll.bind(this);\n                this.scrollFooterViewChild.nativeElement.addEventListener('scroll', this.footerScrollListener);\n            }\n            if (!this.frozen) {\n                this.bodyScrollListener = this.onBodyScroll.bind(this);\n                if (this.tt.virtualScroll)\n                    this.virtualScrollBody.getElementRef().nativeElement.addEventListener('scroll', this.bodyScrollListener);\n                else\n                    this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);\n            }\n        });\n    }\n    unbindEvents() {\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.removeEventListener('scroll', this.headerScrollListener);\n        }\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.removeEventListener('scroll', this.footerScrollListener);\n        }\n        if (this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\n            this.scrollBodyViewChild.nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n        }\n        if (this.virtualScrollBody && this.virtualScrollBody.getElementRef()) {\n            this.virtualScrollBody.getElementRef().nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n        }\n    }\n    onHeaderScroll() {\n        const scrollLeft = this.scrollHeaderViewChild.nativeElement.scrollLeft;\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n        this.preventBodyScrollPropagation = true;\n    }\n    onFooterScroll() {\n        const scrollLeft = this.scrollFooterViewChild.nativeElement.scrollLeft;\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n        this.preventBodyScrollPropagation = true;\n    }\n    onBodyScroll(event) {\n        if (this.preventBodyScrollPropagation) {\n            this.preventBodyScrollPropagation = false;\n            return;\n        }\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n        }\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n        }\n        if (this.frozenSiblingBody) {\n            this.frozenSiblingBody.scrollTop = event.target.scrollTop;\n        }\n    }\n    scrollToVirtualIndex(index) {\n        if (this.virtualScrollBody) {\n            this.virtualScrollBody.scrollToIndex(index);\n        }\n    }\n    scrollTo(options) {\n        if (this.virtualScrollBody) {\n            this.virtualScrollBody.scrollTo(options);\n        }\n        else {\n            if (this.scrollBodyViewChild.nativeElement.scrollTo) {\n                this.scrollBodyViewChild.nativeElement.scrollTo(options);\n            }\n            else {\n                this.scrollBodyViewChild.nativeElement.scrollLeft = options.left;\n                this.scrollBodyViewChild.nativeElement.scrollTop = options.top;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this.unbindEvents();\n        this.frozenSiblingBody = null;\n    }\n}\nTTScrollableView.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TTScrollableView, deps: [{ token: TreeTable }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\nTTScrollableView.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: TTScrollableView, selector: \"[ttScrollableView]\", inputs: { columns: [\"ttScrollableView\", \"columns\"], frozen: \"frozen\", scrollHeight: \"scrollHeight\" }, viewQueries: [{ propertyName: \"scrollHeaderViewChild\", first: true, predicate: [\"scrollHeader\"], descendants: true }, { propertyName: \"scrollHeaderBoxViewChild\", first: true, predicate: [\"scrollHeaderBox\"], descendants: true }, { propertyName: \"scrollBodyViewChild\", first: true, predicate: [\"scrollBody\"], descendants: true }, { propertyName: \"scrollTableViewChild\", first: true, predicate: [\"scrollTable\"], descendants: true }, { propertyName: \"scrollLoadingTableViewChild\", first: true, predicate: [\"loadingTable\"], descendants: true }, { propertyName: \"scrollFooterViewChild\", first: true, predicate: [\"scrollFooter\"], descendants: true }, { propertyName: \"scrollFooterBoxViewChild\", first: true, predicate: [\"scrollFooterBox\"], descendants: true }, { propertyName: \"scrollableAlignerViewChild\", first: true, predicate: [\"scrollableAligner\"], descendants: true }, { propertyName: \"virtualScrollBody\", first: true, predicate: CdkVirtualScrollViewport, descendants: true }], ngImport: i0, template: `\n        <div #scrollHeader class=\"p-treetable-scrollable-header\">\n            <div #scrollHeaderBox class=\"p-treetable-scrollable-header-box\">\n                <table class=\"p-treetable-scrollable-header-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenHeaderTemplate||tt.headerTemplate : tt.headerTemplate; context {$implicit: columns}\"></ng-container>\n                    </thead>\n                </table>\n            </div>\n        </div>\n        <ng-container *ngIf=\"!tt.virtualScroll; else virtualScrollTemplate\">\n            <div #scrollBody class=\"p-treetable-scrollable-body\" [ngStyle]=\"{'max-height': tt.scrollHeight !== 'flex' ? scrollHeight : undefined, 'overflow-y': !frozen && tt.scrollHeight ? 'scroll' : undefined}\">\n                <table #scrollTable [class]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </div>\n        </ng-container>\n        <ng-template #virtualScrollTemplate>\n            <cdk-virtual-scroll-viewport [itemSize]=\"tt.virtualRowHeight\" [style.height]=\"tt.scrollHeight !== 'flex' ? scrollHeight : undefined\"\n                    [minBufferPx]=\"tt.minBufferPx\" [maxBufferPx]=\"tt.maxBufferPx\" class=\"p-treetable-virtual-scrollable-body\">\n                <table #scrollTable [class]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </cdk-virtual-scroll-viewport>\n        </ng-template>\n        <div #scrollFooter *ngIf=\"tt.footerTemplate\" class=\"p-treetable-scrollable-footer\">\n            <div #scrollFooterBox class=\"p-treetable-scrollable-footer-box\">\n                <table class=\"p-treetable-scrollable-footer-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenFooterTemplate||tt.footerTemplate : tt.footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    `, isInline: true, components: [{ type: TTBody, selector: \"[pTreeTableBody]\", inputs: [\"pTreeTableBody\", \"pTreeTableBodyTemplate\", \"frozen\"] }, { type: i4.CdkVirtualScrollViewport, selector: \"cdk-virtual-scroll-viewport\", inputs: [\"orientation\"], outputs: [\"scrolledIndexChange\"] }], directives: [{ type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i3.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { type: i3.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }, { type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i4.CdkFixedSizeVirtualScroll, selector: \"cdk-virtual-scroll-viewport[itemSize]\", inputs: [\"itemSize\", \"minBufferPx\", \"maxBufferPx\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TTScrollableView, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[ttScrollableView]',\n                    template: `\n        <div #scrollHeader class=\"p-treetable-scrollable-header\">\n            <div #scrollHeaderBox class=\"p-treetable-scrollable-header-box\">\n                <table class=\"p-treetable-scrollable-header-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenHeaderTemplate||tt.headerTemplate : tt.headerTemplate; context {$implicit: columns}\"></ng-container>\n                    </thead>\n                </table>\n            </div>\n        </div>\n        <ng-container *ngIf=\"!tt.virtualScroll; else virtualScrollTemplate\">\n            <div #scrollBody class=\"p-treetable-scrollable-body\" [ngStyle]=\"{'max-height': tt.scrollHeight !== 'flex' ? scrollHeight : undefined, 'overflow-y': !frozen && tt.scrollHeight ? 'scroll' : undefined}\">\n                <table #scrollTable [class]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </div>\n        </ng-container>\n        <ng-template #virtualScrollTemplate>\n            <cdk-virtual-scroll-viewport [itemSize]=\"tt.virtualRowHeight\" [style.height]=\"tt.scrollHeight !== 'flex' ? scrollHeight : undefined\"\n                    [minBufferPx]=\"tt.minBufferPx\" [maxBufferPx]=\"tt.maxBufferPx\" class=\"p-treetable-virtual-scrollable-body\">\n                <table #scrollTable [class]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </cdk-virtual-scroll-viewport>\n        </ng-template>\n        <div #scrollFooter *ngIf=\"tt.footerTemplate\" class=\"p-treetable-scrollable-footer\">\n            <div #scrollFooterBox class=\"p-treetable-scrollable-footer-box\">\n                <table class=\"p-treetable-scrollable-footer-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenFooterTemplate||tt.footerTemplate : tt.footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    `,\n                    encapsulation: ViewEncapsulation.None\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { columns: [{\n                type: Input,\n                args: [\"ttScrollableView\"]\n            }], frozen: [{\n                type: Input\n            }], scrollHeaderViewChild: [{\n                type: ViewChild,\n                args: ['scrollHeader']\n            }], scrollHeaderBoxViewChild: [{\n                type: ViewChild,\n                args: ['scrollHeaderBox']\n            }], scrollBodyViewChild: [{\n                type: ViewChild,\n                args: ['scrollBody']\n            }], scrollTableViewChild: [{\n                type: ViewChild,\n                args: ['scrollTable']\n            }], scrollLoadingTableViewChild: [{\n                type: ViewChild,\n                args: ['loadingTable']\n            }], scrollFooterViewChild: [{\n                type: ViewChild,\n                args: ['scrollFooter']\n            }], scrollFooterBoxViewChild: [{\n                type: ViewChild,\n                args: ['scrollFooterBox']\n            }], scrollableAlignerViewChild: [{\n                type: ViewChild,\n                args: ['scrollableAligner']\n            }], virtualScrollBody: [{\n                type: ViewChild,\n                args: [CdkVirtualScrollViewport]\n            }], scrollHeight: [{\n                type: Input\n            }] } });\nclass TTSortableColumn {\n    constructor(tt) {\n        this.tt = tt;\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\n                this.updateSortState();\n            });\n        }\n    }\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.updateSortState();\n        }\n    }\n    updateSortState() {\n        this.sorted = this.tt.isSorted(this.field);\n    }\n    onClick(event) {\n        if (this.isEnabled()) {\n            this.updateSortState();\n            this.tt.sort({\n                originalEvent: event,\n                field: this.field\n            });\n            DomHandler.clearSelection();\n        }\n    }\n    onEnterKey(event) {\n        this.onClick(event);\n    }\n    isEnabled() {\n        return this.ttSortableColumnDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\nTTSortableColumn.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TTSortableColumn, deps: [{ token: TreeTable }], target: i0.ɵɵFactoryTarget.Directive });\nTTSortableColumn.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.0.5\", type: TTSortableColumn, selector: \"[ttSortableColumn]\", inputs: { field: [\"ttSortableColumn\", \"field\"], ttSortableColumnDisabled: \"ttSortableColumnDisabled\" }, host: { listeners: { \"click\": \"onClick($event)\", \"keydown.enter\": \"onEnterKey($event)\" }, properties: { \"class.p-sortable-column\": \"isEnabled()\", \"class.p-highlight\": \"sorted\", \"attr.tabindex\": \"isEnabled() ? \\\"0\\\" : null\", \"attr.role\": \"\\\"columnheader\\\"\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TTSortableColumn, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttSortableColumn]',\n                    host: {\n                        '[class.p-sortable-column]': 'isEnabled()',\n                        '[class.p-highlight]': 'sorted',\n                        '[attr.tabindex]': 'isEnabled() ? \"0\" : null',\n                        '[attr.role]': '\"columnheader\"'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }]; }, propDecorators: { field: [{\n                type: Input,\n                args: [\"ttSortableColumn\"]\n            }], ttSortableColumnDisabled: [{\n                type: Input\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }], onEnterKey: [{\n                type: HostListener,\n                args: ['keydown.enter', ['$event']]\n            }] } });\nclass TTSortIcon {\n    constructor(tt, cd) {\n        this.tt = tt;\n        this.cd = cd;\n        this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\n            this.updateSortState();\n            this.cd.markForCheck();\n        });\n    }\n    ngOnInit() {\n        this.updateSortState();\n    }\n    onClick(event) {\n        event.preventDefault();\n    }\n    updateSortState() {\n        if (this.tt.sortMode === 'single') {\n            this.sortOrder = this.tt.isSorted(this.field) ? this.tt.sortOrder : 0;\n        }\n        else if (this.tt.sortMode === 'multiple') {\n            let sortMeta = this.tt.getSortMeta(this.field);\n            this.sortOrder = sortMeta ? sortMeta.order : 0;\n        }\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\nTTSortIcon.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TTSortIcon, deps: [{ token: TreeTable }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nTTSortIcon.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: TTSortIcon, selector: \"p-treeTableSortIcon\", inputs: { field: \"field\", ariaLabelDesc: \"ariaLabelDesc\", ariaLabelAsc: \"ariaLabelAsc\" }, ngImport: i0, template: `\n        <i class=\"p-sortable-column-icon pi pi-fw\" [ngClass]=\"{'pi-sort-amount-up-alt': sortOrder === 1, 'pi-sort-amount-down': sortOrder === -1, 'pi-sort-alt': sortOrder === 0}\"></i>\n    `, isInline: true, directives: [{ type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TTSortIcon, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-treeTableSortIcon',\n                    template: `\n        <i class=\"p-sortable-column-icon pi pi-fw\" [ngClass]=\"{'pi-sort-amount-up-alt': sortOrder === 1, 'pi-sort-amount-down': sortOrder === -1, 'pi-sort-alt': sortOrder === 0}\"></i>\n    `,\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { field: [{\n                type: Input\n            }], ariaLabelDesc: [{\n                type: Input\n            }], ariaLabelAsc: [{\n                type: Input\n            }] } });\nclass TTResizableColumn {\n    constructor(tt, el, zone) {\n        this.tt = tt;\n        this.el = el;\n        this.zone = zone;\n    }\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'p-resizable-column');\n            this.resizer = document.createElement('span');\n            this.resizer.className = 'p-column-resizer';\n            this.el.nativeElement.appendChild(this.resizer);\n            this.zone.runOutsideAngular(() => {\n                this.resizerMouseDownListener = this.onMouseDown.bind(this);\n                this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);\n            });\n        }\n    }\n    bindDocumentEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.documentMouseMoveListener = this.onDocumentMouseMove.bind(this);\n            document.addEventListener('mousemove', this.documentMouseMoveListener);\n            this.documentMouseUpListener = this.onDocumentMouseUp.bind(this);\n            document.addEventListener('mouseup', this.documentMouseUpListener);\n        });\n    }\n    unbindDocumentEvents() {\n        if (this.documentMouseMoveListener) {\n            document.removeEventListener('mousemove', this.documentMouseMoveListener);\n            this.documentMouseMoveListener = null;\n        }\n        if (this.documentMouseUpListener) {\n            document.removeEventListener('mouseup', this.documentMouseUpListener);\n            this.documentMouseUpListener = null;\n        }\n    }\n    onMouseDown(event) {\n        this.tt.onColumnResizeBegin(event);\n        this.bindDocumentEvents();\n    }\n    onDocumentMouseMove(event) {\n        this.tt.onColumnResize(event);\n    }\n    onDocumentMouseUp(event) {\n        this.tt.onColumnResizeEnd(event, this.el.nativeElement);\n        this.unbindDocumentEvents();\n    }\n    isEnabled() {\n        return this.ttResizableColumnDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.resizerMouseDownListener) {\n            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\n        }\n        this.unbindDocumentEvents();\n    }\n}\nTTResizableColumn.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TTResizableColumn, deps: [{ token: TreeTable }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nTTResizableColumn.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.0.5\", type: TTResizableColumn, selector: \"[ttResizableColumn]\", inputs: { ttResizableColumnDisabled: \"ttResizableColumnDisabled\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TTResizableColumn, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttResizableColumn]'\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { ttResizableColumnDisabled: [{\n                type: Input\n            }] } });\nclass TTReorderableColumn {\n    constructor(tt, el, zone) {\n        this.tt = tt;\n        this.el = el;\n        this.zone = zone;\n    }\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            this.bindEvents();\n        }\n    }\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\n            this.dragStartListener = this.onDragStart.bind(this);\n            this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\n            this.dragOverListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\n            this.dragEnterListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragenter', this.dragEnterListener);\n            this.dragLeaveListener = this.onDragLeave.bind(this);\n            this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\n        });\n    }\n    unbindEvents() {\n        if (this.mouseDownListener) {\n            document.removeEventListener('mousedown', this.mouseDownListener);\n            this.mouseDownListener = null;\n        }\n        if (this.dragOverListener) {\n            document.removeEventListener('dragover', this.dragOverListener);\n            this.dragOverListener = null;\n        }\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n        if (this.dragLeaveListener) {\n            document.removeEventListener('dragleave', this.dragLeaveListener);\n            this.dragLeaveListener = null;\n        }\n    }\n    onMouseDown(event) {\n        if (event.target.nodeName === 'INPUT' || event.target.nodeName === 'TEXTAREA' || DomHandler.hasClass(event.target, 'p-column-resizer'))\n            this.el.nativeElement.draggable = false;\n        else\n            this.el.nativeElement.draggable = true;\n    }\n    onDragStart(event) {\n        this.tt.onColumnDragStart(event, this.el.nativeElement);\n    }\n    onDragOver(event) {\n        event.preventDefault();\n    }\n    onDragEnter(event) {\n        this.tt.onColumnDragEnter(event, this.el.nativeElement);\n    }\n    onDragLeave(event) {\n        this.tt.onColumnDragLeave(event);\n    }\n    onDrop(event) {\n        if (this.isEnabled()) {\n            this.tt.onColumnDrop(event, this.el.nativeElement);\n        }\n    }\n    isEnabled() {\n        return this.ttReorderableColumnDisabled !== true;\n    }\n    ngOnDestroy() {\n        this.unbindEvents();\n    }\n}\nTTReorderableColumn.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TTReorderableColumn, deps: [{ token: TreeTable }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nTTReorderableColumn.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.0.5\", type: TTReorderableColumn, selector: \"[ttReorderableColumn]\", inputs: { ttReorderableColumnDisabled: \"ttReorderableColumnDisabled\" }, host: { listeners: { \"drop\": \"onDrop($event)\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TTReorderableColumn, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttReorderableColumn]'\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { ttReorderableColumnDisabled: [{\n                type: Input\n            }], onDrop: [{\n                type: HostListener,\n                args: ['drop', ['$event']]\n            }] } });\nclass TTSelectableRow {\n    constructor(tt, tableService) {\n        this.tt = tt;\n        this.tableService = tableService;\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.tt.isSelected(this.rowNode.node);\n            });\n        }\n    }\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.tt.isSelected(this.rowNode.node);\n        }\n    }\n    onClick(event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n    }\n    onEnterKey(event) {\n        if (event.which === 13) {\n            this.onClick(event);\n        }\n    }\n    onTouchEnd(event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowTouchEnd(event);\n        }\n    }\n    isEnabled() {\n        return this.ttSelectableRowDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\nTTSelectableRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TTSelectableRow, deps: [{ token: TreeTable }, { token: TreeTableService }], target: i0.ɵɵFactoryTarget.Directive });\nTTSelectableRow.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.0.5\", type: TTSelectableRow, selector: \"[ttSelectableRow]\", inputs: { rowNode: [\"ttSelectableRow\", \"rowNode\"], ttSelectableRowDisabled: \"ttSelectableRowDisabled\" }, host: { listeners: { \"click\": \"onClick($event)\", \"keydown\": \"onEnterKey($event)\", \"touchend\": \"onTouchEnd($event)\" }, properties: { \"class.p-highlight\": \"selected\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TTSelectableRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttSelectableRow]',\n                    host: {\n                        '[class.p-highlight]': 'selected'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: TreeTableService }]; }, propDecorators: { rowNode: [{\n                type: Input,\n                args: [\"ttSelectableRow\"]\n            }], ttSelectableRowDisabled: [{\n                type: Input\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }], onEnterKey: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }], onTouchEnd: [{\n                type: HostListener,\n                args: ['touchend', ['$event']]\n            }] } });\nclass TTSelectableRowDblClick {\n    constructor(tt, tableService) {\n        this.tt = tt;\n        this.tableService = tableService;\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.tt.isSelected(this.rowNode.node);\n            });\n        }\n    }\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.tt.isSelected(this.rowNode.node);\n        }\n    }\n    onClick(event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n    }\n    isEnabled() {\n        return this.ttSelectableRowDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\nTTSelectableRowDblClick.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TTSelectableRowDblClick, deps: [{ token: TreeTable }, { token: TreeTableService }], target: i0.ɵɵFactoryTarget.Directive });\nTTSelectableRowDblClick.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.0.5\", type: TTSelectableRowDblClick, selector: \"[ttSelectableRowDblClick]\", inputs: { rowNode: [\"ttSelectableRowDblClick\", \"rowNode\"], ttSelectableRowDisabled: \"ttSelectableRowDisabled\" }, host: { listeners: { \"dblclick\": \"onClick($event)\" }, properties: { \"class.p-highlight\": \"selected\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TTSelectableRowDblClick, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttSelectableRowDblClick]',\n                    host: {\n                        '[class.p-highlight]': 'selected'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: TreeTableService }]; }, propDecorators: { rowNode: [{\n                type: Input,\n                args: [\"ttSelectableRowDblClick\"]\n            }], ttSelectableRowDisabled: [{\n                type: Input\n            }], onClick: [{\n                type: HostListener,\n                args: ['dblclick', ['$event']]\n            }] } });\nclass TTContextMenuRow {\n    constructor(tt, tableService, el) {\n        this.tt = tt;\n        this.tableService = tableService;\n        this.el = el;\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.contextMenuSource$.subscribe((node) => {\n                this.selected = this.tt.equals(this.rowNode.node, node);\n            });\n        }\n    }\n    onContextMenu(event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowRightClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n            this.el.nativeElement.focus();\n            event.preventDefault();\n        }\n    }\n    isEnabled() {\n        return this.ttContextMenuRowDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\nTTContextMenuRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TTContextMenuRow, deps: [{ token: TreeTable }, { token: TreeTableService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nTTContextMenuRow.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.0.5\", type: TTContextMenuRow, selector: \"[ttContextMenuRow]\", inputs: { rowNode: [\"ttContextMenuRow\", \"rowNode\"], ttContextMenuRowDisabled: \"ttContextMenuRowDisabled\" }, host: { listeners: { \"contextmenu\": \"onContextMenu($event)\" }, properties: { \"class.p-highlight-contextmenu\": \"selected\", \"attr.tabindex\": \"isEnabled() ? 0 : undefined\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TTContextMenuRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttContextMenuRow]',\n                    host: {\n                        '[class.p-highlight-contextmenu]': 'selected',\n                        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: TreeTableService }, { type: i0.ElementRef }]; }, propDecorators: { rowNode: [{\n                type: Input,\n                args: [\"ttContextMenuRow\"]\n            }], ttContextMenuRowDisabled: [{\n                type: Input\n            }], onContextMenu: [{\n                type: HostListener,\n                args: ['contextmenu', ['$event']]\n            }] } });\nclass TTCheckbox {\n    constructor(tt, tableService, cd) {\n        this.tt = tt;\n        this.tableService = tableService;\n        this.cd = cd;\n        this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.tt.isSelected(this.rowNode.node);\n            this.cd.markForCheck();\n        });\n    }\n    ngOnInit() {\n        this.checked = this.tt.isSelected(this.rowNode.node);\n    }\n    onClick(event) {\n        if (!this.disabled) {\n            this.tt.toggleNodeWithCheckbox({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n        DomHandler.clearSelection();\n    }\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'p-focus');\n    }\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'p-focus');\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\nTTCheckbox.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TTCheckbox, deps: [{ token: TreeTable }, { token: TreeTableService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nTTCheckbox.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: TTCheckbox, selector: \"p-treeTableCheckbox\", inputs: { disabled: \"disabled\", rowNode: [\"value\", \"rowNode\"] }, viewQueries: [{ propertyName: \"boxViewChild\", first: true, predicate: [\"box\"], descendants: true }], ngImport: i0, template: `\n        <div class=\"p-checkbox p-component\" (click)=\"onClick($event)\">\n            <div class=\"p-hidden-accessible\">\n                <input type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\">\n            </div>\n            <div #box [ngClass]=\"{'p-checkbox-box':true,\n                'p-highlight':checked, 'p-indeterminate': rowNode.node.partialSelected, 'p-disabled':disabled}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"p-checkbox-icon pi\" [ngClass]=\"{'pi-check':checked, 'pi-minus': rowNode.node.partialSelected}\"></span>\n            </div>\n        </div>\n    `, isInline: true, directives: [{ type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TTCheckbox, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-treeTableCheckbox',\n                    template: `\n        <div class=\"p-checkbox p-component\" (click)=\"onClick($event)\">\n            <div class=\"p-hidden-accessible\">\n                <input type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\">\n            </div>\n            <div #box [ngClass]=\"{'p-checkbox-box':true,\n                'p-highlight':checked, 'p-indeterminate': rowNode.node.partialSelected, 'p-disabled':disabled}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"p-checkbox-icon pi\" [ngClass]=\"{'pi-check':checked, 'pi-minus': rowNode.node.partialSelected}\"></span>\n            </div>\n        </div>\n    `,\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: TreeTableService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { disabled: [{\n                type: Input\n            }], rowNode: [{\n                type: Input,\n                args: [\"value\"]\n            }], boxViewChild: [{\n                type: ViewChild,\n                args: ['box']\n            }] } });\nclass TTHeaderCheckbox {\n    constructor(tt, tableService, cd) {\n        this.tt = tt;\n        this.tableService = tableService;\n        this.cd = cd;\n        this.valueChangeSubscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n        this.selectionChangeSubscription = this.tt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n    }\n    ngOnInit() {\n        this.checked = this.updateCheckedState();\n    }\n    onClick(event, checked) {\n        if (this.tt.value && this.tt.value.length > 0) {\n            this.tt.toggleNodesWithCheckbox(event, !checked);\n        }\n        DomHandler.clearSelection();\n    }\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'p-focus');\n    }\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'p-focus');\n    }\n    ngOnDestroy() {\n        if (this.selectionChangeSubscription) {\n            this.selectionChangeSubscription.unsubscribe();\n        }\n        if (this.valueChangeSubscription) {\n            this.valueChangeSubscription.unsubscribe();\n        }\n    }\n    updateCheckedState() {\n        this.cd.markForCheck();\n        let checked;\n        const data = this.tt.filteredNodes || this.tt.value;\n        if (data) {\n            for (let node of data) {\n                if (this.tt.isSelected(node)) {\n                    checked = true;\n                }\n                else {\n                    checked = false;\n                    break;\n                }\n            }\n        }\n        else {\n            checked = false;\n        }\n        return checked;\n    }\n}\nTTHeaderCheckbox.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TTHeaderCheckbox, deps: [{ token: TreeTable }, { token: TreeTableService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nTTHeaderCheckbox.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: TTHeaderCheckbox, selector: \"p-treeTableHeaderCheckbox\", viewQueries: [{ propertyName: \"boxViewChild\", first: true, predicate: [\"box\"], descendants: true }], ngImport: i0, template: `\n        <div class=\"p-checkbox p-component\" (click)=\"onClick($event, cb.checked)\">\n            <div class=\"p-hidden-accessible\">\n                <input #cb type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"!tt.value||tt.value.length === 0\">\n            </div>\n            <div #box [ngClass]=\"{'p-checkbox-box':true,\n                'p-highlight':checked, 'p-disabled': (!tt.value || tt.value.length === 0)}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"p-checkbox-icon\" [ngClass]=\"{'pi pi-check':checked}\"></span>\n            </div>\n        </div>\n    `, isInline: true, directives: [{ type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TTHeaderCheckbox, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-treeTableHeaderCheckbox',\n                    template: `\n        <div class=\"p-checkbox p-component\" (click)=\"onClick($event, cb.checked)\">\n            <div class=\"p-hidden-accessible\">\n                <input #cb type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"!tt.value||tt.value.length === 0\">\n            </div>\n            <div #box [ngClass]=\"{'p-checkbox-box':true,\n                'p-highlight':checked, 'p-disabled': (!tt.value || tt.value.length === 0)}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"p-checkbox-icon\" [ngClass]=\"{'pi pi-check':checked}\"></span>\n            </div>\n        </div>\n    `,\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: TreeTableService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { boxViewChild: [{\n                type: ViewChild,\n                args: ['box']\n            }] } });\nclass TTEditableColumn {\n    constructor(tt, el, zone) {\n        this.tt = tt;\n        this.el = el;\n        this.zone = zone;\n    }\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'p-editable-column');\n        }\n    }\n    onClick(event) {\n        if (this.isEnabled()) {\n            this.tt.editingCellClick = true;\n            if (this.tt.editingCell) {\n                if (this.tt.editingCell !== this.el.nativeElement) {\n                    if (!this.tt.isEditingCellValid()) {\n                        return;\n                    }\n                    DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n                    this.openCell();\n                }\n            }\n            else {\n                this.openCell();\n            }\n        }\n    }\n    openCell() {\n        this.tt.updateEditingCell(this.el.nativeElement, this.data, this.field);\n        DomHandler.addClass(this.el.nativeElement, 'p-cell-editing');\n        this.tt.onEditInit.emit({ field: this.field, data: this.data });\n        this.tt.editingCellClick = true;\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                let focusable = DomHandler.findSingle(this.el.nativeElement, 'input, textarea');\n                if (focusable) {\n                    focusable.focus();\n                }\n            }, 50);\n        });\n    }\n    closeEditingCell() {\n        DomHandler.removeClass(this.tt.editingCell, 'p-checkbox-icon');\n        this.tt.editingCell = null;\n        this.tt.unbindDocumentEditListener();\n    }\n    onKeyDown(event) {\n        if (this.isEnabled()) {\n            //enter\n            if (event.keyCode == 13) {\n                if (this.tt.isEditingCellValid()) {\n                    DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n                    this.closeEditingCell();\n                    this.tt.onEditComplete.emit({ field: this.field, data: this.data });\n                }\n                event.preventDefault();\n            }\n            //escape\n            else if (event.keyCode == 27) {\n                if (this.tt.isEditingCellValid()) {\n                    DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n                    this.closeEditingCell();\n                    this.tt.onEditCancel.emit({ field: this.field, data: this.data });\n                }\n                event.preventDefault();\n            }\n            //tab\n            else if (event.keyCode == 9) {\n                this.tt.onEditComplete.emit({ field: this.field, data: this.data });\n                if (event.shiftKey)\n                    this.moveToPreviousCell(event);\n                else\n                    this.moveToNextCell(event);\n            }\n        }\n    }\n    findCell(element) {\n        if (element) {\n            let cell = element;\n            while (cell && !DomHandler.hasClass(cell, 'p-cell-editing')) {\n                cell = cell.parentElement;\n            }\n            return cell;\n        }\n        else {\n            return null;\n        }\n    }\n    moveToPreviousCell(event) {\n        let currentCell = this.findCell(event.target);\n        let row = currentCell.parentElement;\n        let targetCell = this.findPreviousEditableColumn(currentCell);\n        if (targetCell) {\n            DomHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    }\n    moveToNextCell(event) {\n        let currentCell = this.findCell(event.target);\n        let row = currentCell.parentElement;\n        let targetCell = this.findNextEditableColumn(currentCell);\n        if (targetCell) {\n            DomHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    }\n    findPreviousEditableColumn(cell) {\n        let prevCell = cell.previousElementSibling;\n        if (!prevCell) {\n            let previousRow = cell.parentElement ? cell.parentElement.previousElementSibling : null;\n            if (previousRow) {\n                prevCell = previousRow.lastElementChild;\n            }\n        }\n        if (prevCell) {\n            if (DomHandler.hasClass(prevCell, 'p-editable-column'))\n                return prevCell;\n            else\n                return this.findPreviousEditableColumn(prevCell);\n        }\n        else {\n            return null;\n        }\n    }\n    findNextEditableColumn(cell) {\n        let nextCell = cell.nextElementSibling;\n        if (!nextCell) {\n            let nextRow = cell.parentElement ? cell.parentElement.nextElementSibling : null;\n            if (nextRow) {\n                nextCell = nextRow.firstElementChild;\n            }\n        }\n        if (nextCell) {\n            if (DomHandler.hasClass(nextCell, 'p-editable-column'))\n                return nextCell;\n            else\n                return this.findNextEditableColumn(nextCell);\n        }\n        else {\n            return null;\n        }\n    }\n    isEnabled() {\n        return this.ttEditableColumnDisabled !== true;\n    }\n}\nTTEditableColumn.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TTEditableColumn, deps: [{ token: TreeTable }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nTTEditableColumn.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.0.5\", type: TTEditableColumn, selector: \"[ttEditableColumn]\", inputs: { data: [\"ttEditableColumn\", \"data\"], field: [\"ttEditableColumnField\", \"field\"], ttEditableColumnDisabled: \"ttEditableColumnDisabled\" }, host: { listeners: { \"click\": \"onClick($event)\", \"keydown\": \"onKeyDown($event)\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TTEditableColumn, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttEditableColumn]'\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { data: [{\n                type: Input,\n                args: [\"ttEditableColumn\"]\n            }], field: [{\n                type: Input,\n                args: [\"ttEditableColumnField\"]\n            }], ttEditableColumnDisabled: [{\n                type: Input\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }], onKeyDown: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }] } });\nclass TreeTableCellEditor {\n    constructor(tt, editableColumn) {\n        this.tt = tt;\n        this.editableColumn = editableColumn;\n    }\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'input':\n                    this.inputTemplate = item.template;\n                    break;\n                case 'output':\n                    this.outputTemplate = item.template;\n                    break;\n            }\n        });\n    }\n}\nTreeTableCellEditor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TreeTableCellEditor, deps: [{ token: TreeTable }, { token: TTEditableColumn }], target: i0.ɵɵFactoryTarget.Component });\nTreeTableCellEditor.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: TreeTableCellEditor, selector: \"p-treeTableCellEditor\", queries: [{ propertyName: \"templates\", predicate: PrimeTemplate }], ngImport: i0, template: `\n        <ng-container *ngIf=\"tt.editingCell === editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!tt.editingCell || tt.editingCell !== editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\n        </ng-container>\n    `, isInline: true, directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i3.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TreeTableCellEditor, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-treeTableCellEditor',\n                    template: `\n        <ng-container *ngIf=\"tt.editingCell === editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!tt.editingCell || tt.editingCell !== editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\n        </ng-container>\n    `,\n                    encapsulation: ViewEncapsulation.None\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: TTEditableColumn }]; }, propDecorators: { templates: [{\n                type: ContentChildren,\n                args: [PrimeTemplate]\n            }] } });\nclass TTRow {\n    constructor(tt, el, zone) {\n        this.tt = tt;\n        this.el = el;\n        this.zone = zone;\n    }\n    onKeyDown(event) {\n        switch (event.which) {\n            //down arrow\n            case 40:\n                let nextRow = this.el.nativeElement.nextElementSibling;\n                if (nextRow) {\n                    nextRow.focus();\n                }\n                event.preventDefault();\n                break;\n            //down arrow\n            case 38:\n                let prevRow = this.el.nativeElement.previousElementSibling;\n                if (prevRow) {\n                    prevRow.focus();\n                }\n                event.preventDefault();\n                break;\n            //left arrow\n            case 37:\n                if (this.rowNode.node.expanded) {\n                    this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n                    this.rowNode.node.expanded = false;\n                    this.tt.onNodeCollapse.emit({\n                        originalEvent: event,\n                        node: this.rowNode.node\n                    });\n                    this.tt.updateSerializedValue();\n                    this.tt.tableService.onUIUpdate(this.tt.value);\n                    this.restoreFocus();\n                }\n                break;\n            //right arrow\n            case 39:\n                if (!this.rowNode.node.expanded) {\n                    this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n                    this.rowNode.node.expanded = true;\n                    this.tt.onNodeExpand.emit({\n                        originalEvent: event,\n                        node: this.rowNode.node\n                    });\n                    this.tt.updateSerializedValue();\n                    this.tt.tableService.onUIUpdate(this.tt.value);\n                    this.restoreFocus();\n                }\n                break;\n        }\n    }\n    restoreFocus() {\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                let row = DomHandler.findSingle(this.tt.containerViewChild.nativeElement, '.p-treetable-tbody').children[this.tt.toggleRowIndex];\n                if (row) {\n                    row.focus();\n                }\n            }, 25);\n        });\n    }\n}\nTTRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TTRow, deps: [{ token: TreeTable }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nTTRow.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.0.5\", type: TTRow, selector: \"[ttRow]\", inputs: { rowNode: [\"ttRow\", \"rowNode\"] }, host: { listeners: { \"keydown\": \"onKeyDown($event)\" }, properties: { \"attr.tabindex\": \"\\\"0\\\"\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TTRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttRow]',\n                    host: {\n                        '[attr.tabindex]': '\"0\"'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { rowNode: [{\n                type: Input,\n                args: ['ttRow']\n            }], onKeyDown: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }] } });\nclass TreeTableToggler {\n    constructor(tt) {\n        this.tt = tt;\n    }\n    onClick(event) {\n        this.rowNode.node.expanded = !this.rowNode.node.expanded;\n        if (this.rowNode.node.expanded) {\n            this.tt.onNodeExpand.emit({\n                originalEvent: event,\n                node: this.rowNode.node\n            });\n        }\n        else {\n            this.tt.onNodeCollapse.emit({\n                originalEvent: event,\n                node: this.rowNode.node\n            });\n        }\n        this.tt.updateSerializedValue();\n        this.tt.tableService.onUIUpdate(this.tt.value);\n        event.preventDefault();\n    }\n}\nTreeTableToggler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TreeTableToggler, deps: [{ token: TreeTable }], target: i0.ɵɵFactoryTarget.Component });\nTreeTableToggler.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: TreeTableToggler, selector: \"p-treeTableToggler\", inputs: { rowNode: \"rowNode\" }, ngImport: i0, template: `\n        <button type=\"button\" class=\"p-treetable-toggler p-link\" (click)=\"onClick($event)\" tabindex=\"-1\" pRipple\n            [style.visibility]=\"rowNode.node.leaf === false || (rowNode.node.children && rowNode.node.children.length) ? 'visible' : 'hidden'\" [style.marginLeft]=\"rowNode.level * 16 + 'px'\">\n            <i [ngClass]=\"rowNode.node.expanded ? 'pi pi-fw pi-chevron-down' : 'pi pi-fw pi-chevron-right'\"></i>\n        </button>\n    `, isInline: true, directives: [{ type: i5.Ripple, selector: \"[pRipple]\" }, { type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TreeTableToggler, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-treeTableToggler',\n                    template: `\n        <button type=\"button\" class=\"p-treetable-toggler p-link\" (click)=\"onClick($event)\" tabindex=\"-1\" pRipple\n            [style.visibility]=\"rowNode.node.leaf === false || (rowNode.node.children && rowNode.node.children.length) ? 'visible' : 'hidden'\" [style.marginLeft]=\"rowNode.level * 16 + 'px'\">\n            <i [ngClass]=\"rowNode.node.expanded ? 'pi pi-fw pi-chevron-down' : 'pi pi-fw pi-chevron-right'\"></i>\n        </button>\n    `,\n                    encapsulation: ViewEncapsulation.None\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }]; }, propDecorators: { rowNode: [{\n                type: Input\n            }] } });\nclass TreeTableModule {\n}\nTreeTableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TreeTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTreeTableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TreeTableModule, declarations: [TreeTable, TreeTableToggler, TTScrollableView, TTBody, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor], imports: [CommonModule, PaginatorModule, ScrollingModule, RippleModule], exports: [TreeTable, SharedModule, TreeTableToggler, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor, ScrollingModule] });\nTreeTableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TreeTableModule, imports: [[CommonModule, PaginatorModule, ScrollingModule, RippleModule], SharedModule, ScrollingModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: TreeTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, PaginatorModule, ScrollingModule, RippleModule],\n                    exports: [TreeTable, SharedModule, TreeTableToggler, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor, ScrollingModule],\n                    declarations: [TreeTable, TreeTableToggler, TTScrollableView, TTBody, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TTBody, TTCheckbox, TTContextMenuRow, TTEditableColumn, TTHeaderCheckbox, TTReorderableColumn, TTResizableColumn, TTRow, TTScrollableView, TTSelectableRow, TTSelectableRowDblClick, TTSortIcon, TTSortableColumn, TreeTable, TreeTableCellEditor, TreeTableModule, TreeTableService, TreeTableToggler };\n//# sourceMappingURL=primeng-treetable.js.map\n"]},"metadata":{},"sourceType":"module"}